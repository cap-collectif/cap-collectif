input AddEventInput {
  """When the event start."""
  startAt: DateTime!

  """When the event end."""
  endAt: DateTime
  translations: [EventTranslationInput!]!
  clientMutationId: String
}

type AddEventPayload {
  """The new event edge created."""
  eventEdge: EventEdge

  """An unsuccessful mutation will return one or more `UserError` objects."""
  userErrors: [UserError!]!
  clientMutationId: String
}

"""An argument"""
type Argument implements Node & Publishable & Contribution & Trashable & UniformResourceLocatable {
  """The ID of an object."""
  id: ID!

  """Whether or not the entity is published."""
  published: Boolean!

  """Identifies when the entity can no more be published."""
  publishableUntil: DateTime

  """Identifies when the entity was published at."""
  publishedAt: DateTime

  """Reason that the entity is not published."""
  notPublishedReason: NotPublishedReason

  """Whether or not the contribution is trashed."""
  trashed: Boolean!

  """Identifies the trashed visibility."""
  trashedStatus: TrashableStatus

  """Identifies the moment the moderator trashed the contribution."""
  trashedAt: DateTime

  """Identifies the reason why the moderator trashed the contribution."""
  trashedReason: String

  """Url of the contribution"""
  url: URI!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!

  """
  Return the related contribution if the contribution is related to another.
  """
  related: Contribution

  """The type."""
  type: ArgumentValue!

  """The content of the argument."""
  body: String!
}

"""Value of an argument"""
enum ArgumentValue {
  """AGAINST argument"""
  AGAINST

  """FOR argument"""
  FOR
}

input ChangeEventInput {
  """When the event start."""
  startAt: DateTime!

  """When the event end."""
  endAt: DateTime
  translations: [EventTranslationInput!]!
  clientMutationId: String

  """The ID of the Event to modify."""
  id: ID!
}

type ChangeEventPayload {
  """The event."""
  event: Event

  """An unsuccessful mutation will return one or more `UserError` objects."""
  userErrors: [UserError!]!
  clientMutationId: String
}

"""A step to collect proposals."""
type CollectStep implements Node & Step {
  """The ID of an object."""
  id: ID!

  """A list of proposals associated to the object."""
  proposals(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """
    If non-null, filters proposals with the given trashed status (eg: visible, not visible).
    """
    trashedStatus: ProposalTrashedStatus = NOT_TRASHED

    """
    ID of a User to filter by. If non-null, only proposals authored by this user will be returned.
    """
    author: ID

    """Ordering options for proposals returned from the connection."""
    orderBy: [ProposalOrder] = [{field: PUBLISHED_AT, direction: ASC}]

    """(ROLE_ADMIN only) Select also draft proposals."""
    includeDraft: Boolean = false
  ): ProposalConnection!

  """The URL to this resource."""
  url: URI!

  """When the time interval begins or ends."""
  timeRange: TimeRange!

  """The title of the step."""
  title: String!

  """Identifies the current state of the step."""
  state: StepState!
}

"""A color on hexadecimal format (#DDDDDD)."""
scalar Color

"""A consultation"""
type Consultation implements Node {
  """The ID of an object."""
  id: ID!

  """The title of the consultation."""
  title: String!

  """A list of contributor associated with the consultation."""
  contributors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
  ): UserConnection!

  """
  Whether the user has vote for a contribution in the related step of this consultation.
  """
  userHasVote(
    """The user's login (for example, an email)."""
    login: String!
  ): Boolean!

  """The number of votes in the related step of this consultation."""
  votesCount: Int @deprecated(reason: "reason: \"In preparation for an upcoming change to the way we expose counters, this field will only be available inside a connection.\", description: \"Field `votesCount` will be removed, use \"votes.totalCount\".")

  """The votes in the related step of this consultation."""
  votes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
  ): VoteConnection!
  contributions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """Ordering options for contributions returned from the connection."""
    orderBy: ContributionOrder = {direction: DESC}

    """The connection will return the trashed results too."""
    includeTrashed: Boolean = false
  ): ContributionConnection!
}

"""A step with consultation."""
type ConsultationStep implements Node & Step {
  """The ID of an object."""
  id: ID!

  """The URL to this resource."""
  url: URI!

  """When the time interval begins or ends."""
  timeRange: TimeRange!

  """The title of the step."""
  title: String!

  """Identifies the current state of the step."""
  state: StepState!

  """A list of contributor associated with the consultation step."""
  contributors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
  ): UserConnection!

  """The number of votes in this consultation."""
  votesCount: Int @deprecated(reason: "reason: \"In preparation for an upcoming change to the way we expose counters, this field will only be available inside a connection.\", description: \"Field `votesCount` will be removed, Use \"votes.totalCount\" instead")

  """The votes in this consultation."""
  votes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
  ): VoteConnection!

  """
  Whether the user has vote for a contribution in this consultation step.
  """
  userHasVote(
    """The user's login (for example, an email)."""
    login: String!
  ): Boolean!
}

"""A contribution with an author"""
interface Contribution {
  """The ID of an object"""
  id: ID!

  """
  Return the related contribution if the contribution is related to another.
  """
  related: Contribution

  """Url of the contribution"""
  url: URI!
}

"""A connection to a list of items."""
type ContributionConnection {
  totalCount: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [ContributionEdge]
}

"""An edge in a connection."""
type ContributionEdge {
  """The item at the end of the edge."""
  node: Contribution!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Ways in which lists of contributions can be ordered upon return."""
input ContributionOrder {
  field: ContributionOrderField! = CREATED_AT
  direction: OrderDirection! = DESC
}

"""Ordering options for contributions connections."""
enum ContributionOrderField {
  """Allows ordering a list of contributions by when they were created."""
  CREATED_AT

  """Allows ordering a list of contributions by when they were published."""
  PUBLISHED_AT
}

"""A string containing CSS."""
scalar CssJSON

"""A string containing a datetime."""
scalar DateTime

"""Available errors on DeleteAccountByEmail mutation."""
enum DeleteAccountByEmailErrorCode {
  """The given email does not correspond to an existing user."""
  NON_EXISTING_EMAIL

  """You can't delete a user that has role 'ROLE_SUPER_ADMIN'."""
  DELETION_DENIED
}

input DeleteAccountByEmailInput {
  """The user's email to delete"""
  email: String!
  clientMutationId: String
}

type DeleteAccountByEmailPayload {
  """The deleted user's email."""
  email: String

  """Contains the error code if one occurred."""
  errorCode: DeleteAccountByEmailErrorCode
  clientMutationId: String
}

input DeleteEventInput {
  """The ID of the event to delete."""
  eventId: ID!
  clientMutationId: String
}

type DeleteEventPayload {
  """The ID of the deleted event."""
  deletedEventId: ID
  clientMutationId: String
}

"""A district"""
interface District {
  """The ID of an object"""
  id: ID!
  name(
    """The locale to translate content (eg: FR_FR)."""
    locale: TranslationLocale
  ): String!
  slug(
    """The locale to translate content (eg: FR_FR)."""
    locale: TranslationLocale
  ): String!
  titleOnMap(
    """The locale to translate content (eg: FR_FR)."""
    locale: TranslationLocale
  ): String
  description(
    """The locale to translate content (eg: FR_FR)."""
    locale: TranslationLocale
  ): String
  geojson: GeoJSON
  geojsonStyle: CssJSON
  displayedOnMap: Boolean!
  border: Style
  background: Style
  translations: [DistrictTranslation!]!
}

"""A translation of a District."""
type DistrictTranslation {
  locale: String!
  name: String!
  slug: String!
  titleOnMap: String

  """The description of the district."""
  description: String
}

"""Entities that can be drafted."""
interface Draftable {
  """The ID of an object"""
  id: ID!

  """Whether or not the entity is a draft."""
  draft: Boolean!

  """Identifies when the entity was undraft at."""
  undraftAt: DateTime
}

"""A string containing an email."""
scalar Email

"""Represents a calendar event."""
type Event implements Node & UniformResourceLocatable {
  """The ID of an object."""
  id: ID!

  """The URL to this resource."""
  url: URI!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!

  """When the time interval begins or ends."""
  timeRange: TimeRange!

  """Did the viewer author this entity."""
  viewerDidAuthor: Boolean

  """Identifies the author of the event."""
  author: User

  """The start date of the event."""
  startAt: DateTime! @deprecated(reason: "Field \"startAt\" will be removed Use \"timeRange.startAt\" instead.")

  """The end date of the event."""
  endAt: DateTime @deprecated(reason: "Field \"endAt\" will be removed Use \"timeRange.endAt\" instead.")

  """Whether or not this event is published."""
  enabled: Boolean!

  """Identifies the latitude of the event."""
  lat: Float @deprecated(reason: "Field \"lat\" will be removed, Use \"googleMapsAddress.lat\" instead.")

  """Identifies the longitude of the event."""
  lng: Float @deprecated(reason: "reason: \"This field use our legacy address format Field \"lng\" will be removed, Use \"googleMapsAddress.lng\" instead.")

  """Identifies the zip code of the event."""
  zipCode: String @deprecated(reason: "reason: \"This field use our legacy address format Field \"zipCode\" will be removed, Use \"googleMapsAddress.zipCode\" instead.")

  """Identifies the address of the event."""
  fullAddress: String @deprecated(reason: "reason: \"This field use our legacy address format Field \"fullAddress\" will be removed, Use \"googleMapsAddress.formatted\" instead.")

  """Identifies the address of the event in google Maps format."""
  googleMapsAddress: GoogleMapsAddress

  """The translations availables for this event"""
  translations: [EventTranslation!]!

  """Identifies the title of the event."""
  title: String!

  """Identifies the body of the event."""
  body: HTML!

  """Identifies the registration link of the event."""
  link: URI
}

"""A connection to a list of items."""
type EventConnection {
  """Identifies the total count of items in the connection."""
  totalCount: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [EventEdge]
}

"""An edge in a connection."""
type EventEdge {
  """The item at the end of the edge."""
  node: Event!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Ways in which lists of events can be ordered upon return."""
input EventOrder {
  """The field in which to order nodes by."""
  field: EventOrderField! = START_AT

  """The direction in which to order nodes."""
  direction: OrderDirection! = DESC
}

"""Ordering options for events returned from the connection."""
enum EventOrderField {
  """Order by the end date of the time range."""
  END_AT

  """Order by the start date of the time range."""
  START_AT
}

"""Represents the translation of a calendar event."""
type EventTranslation {
  """IETF code of the translation of the event."""
  locale: String!
  title: String!

  """Identifies the body of the event."""
  body: HTML!

  """Identifies the registration link of the event."""
  link: URI
}

input EventTranslationInput {
  """the id of the event"""
  id: ID

  """the locale of the translation"""
  locale: String!

  """the translated title of the event"""
  title: String

  """the translated body of the event"""
  body: HTML!

  """the localized link of the event"""
  link: URI
}

"""Ways in which follower connections can be ordered."""
input FollowerOrder {
  """The field in which to order nodes by."""
  field: FollowerOrderField!

  """The direction in which to order nodes."""
  direction: OrderDirection! = ASC
}

"""Properties by which follower connections can be ordered"""
enum FollowerOrderField {
  """Allows ordering a list of followers namely."""
  NAME

  """Allows ordering a list of followers by when they were followed."""
  FOLLOWED_AT

  """Allows ordering a list of followers randomly."""
  RANDOM
}

"""A string containing GeoJSON code."""
scalar GeoJSON

"""A global district"""
type GlobalDistrict implements District & Node {
  """The ID of an object"""
  id: ID!
  name(
    """The locale to translate content (eg: FR_FR)."""
    locale: TranslationLocale
  ): String!
  slug(
    """The locale to translate content (eg: FR_FR)."""
    locale: TranslationLocale
  ): String!
  titleOnMap(
    """The locale to translate content (eg: FR_FR)."""
    locale: TranslationLocale
  ): String
  description(
    """The locale to translate content (eg: FR_FR)."""
    locale: TranslationLocale
  ): String
  geojson: GeoJSON
  geojsonStyle: CssJSON
  displayedOnMap: Boolean!
  border: Style
  background: Style
  translations: [DistrictTranslation!]!

  """The list of followers of the district"""
  followers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """Ordering options for followers returning from the connection"""
    orderBy: FollowerOrder = {field: FOLLOWED_AT, direction: DESC}
  ): UserConnection!

  """Identifies the viewer following configuration on the entity."""
  viewerFollowingConfiguration: SubscriptionTypeValue

  """Identifies if the viewer is following the entity."""
  viewerIsFollowing: Boolean!

  """The list of projects in district"""
  projects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
  ): ProjectConnection
  projectDistrictPositioners: [ProjectDistrictPositioner]
  cover: Media
}

"""A connection to a list of items."""
type GlobalDistrictConnection {
  totalCount: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [GlobalDistrictEdge]
}

"""An edge in a connection."""
type GlobalDistrictEdge {
  """The item at the end of the edge."""
  node: GlobalDistrict

  """A cursor for use in pagination."""
  cursor: String!
}

"""An address from Google Maps."""
type GoogleMapsAddress {
  """The raw response from the Google Maps API that describes an address"""
  json: String!

  """A human-readable address string."""
  formatted: String

  """
  The available types for this address. A type indicate the accuracy of the address on Google Maps.
  """
  types: [GoogleMapsAddressType!]!

  """The latitude of this address."""
  lat: Float!

  """The longitude of this address."""
  lng: Float!
}

"""A list of possible types for a given address from Google Maps."""
enum GoogleMapsAddressType {
  """Returns only the addresses that are characterized as approximate"""
  APPROXIMATE

  """
  Returns only geometric centers of a location such as a polyline (for example, a street) or polygon (region).
  """
  GEOMETRIC_CENTER

  """
  Returns only the addresses that reflect an approximation (usually on a road)
  interpolated between two precise points (such as intersections). An
  interpolated range generally indicates that rooftop geocodes are unavailable
  for a street address.
  """
  RANGE_INTERPOLATED

  """
  Returns only the addresses for which Google has location information accurate down to street address precision.
  """
  ROOFTOP
}

"""A string containing HTML code."""
scalar HTML

"""A majority question"""
type MajorityQuestion implements Question & Node {
  """The ID of an object."""
  id: ID!

  """Identifies the question title."""
  title: String!

  """Return responses on this questions."""
  responses(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
  ): ResponseConnection!
}

"""A file uploaded by a user."""
type Media implements UniformResourceLocatable {
  """The URL to this resource."""
  url: URI!
}

"""A question which accept document only."""
type MediaQuestion implements Question & Node {
  """The ID of an object."""
  id: ID!

  """Identifies the question title."""
  title: String!

  """Return responses on this questions."""
  responses(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
  ): ResponseConnection!
}

"""A media response."""
type MediaResponse implements Response {
  """Nullable ID in case of empty response."""
  id: String

  """The question."""
  question: Question!

  """Identifies medias of the response."""
  medias: [Media!]!
}

"""A question with multiple choices available."""
type MultipleChoiceQuestion implements Question & Node {
  """The ID of an object."""
  id: ID!

  """Identifies the question title."""
  title: String!

  """Return responses on this questions."""
  responses(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
  ): ResponseConnection!

  """The question available choices."""
  choices(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
  ): QuestionChoiceConnection!
}

"""This is the entry point into performing writes in the schema."""
type Mutation {
  addEvent(input: AddEventInput!): AddEventPayload
  changeEvent(input: ChangeEventInput!): ChangeEventPayload
  deleteEvent(input: DeleteEventInput!): DeleteEventPayload
  deleteAccountByEmail(input: DeleteAccountByEmailInput!): DeleteAccountByEmailPayload
}

"""Fetches an object given its ID"""
interface Node {
  """The ID of an object"""
  id: ID!
}

"""Possible reason that a `Publishable` is not published."""
enum NotPublishedReason {
  """Author account was confirmed after the step has ended."""
  AUTHOR_CONFIRMED_TOO_LATE

  """Author account isn't confirmed and the step has ended."""
  AUTHOR_NOT_CONFIRMED

  """Author account isn't confirmed yet."""
  WAITING_AUTHOR_CONFIRMATION
}

"""An official response"""
type OfficialResponse implements Node {
  """The ID of an object"""
  id: ID!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  body(
    """The locale to translate content (eg: FR_FR)."""
    locale: TranslationLocale
  ): HTML

  """if the response is published"""
  isPublished: Boolean!

  """Identifies the date and time when the object was or will be published"""
  publishedAt: DateTime

  """The response's authors."""
  authors: [User!]!

  """The proposal linked to the official response"""
  proposal: Proposal!
}

"""A contribution"""
type Opinion implements Node & Contribution & Publishable {
  """The ID of an object"""
  id: ID!

  """
  Return the related contribution if the contribution is related to another.
  """
  related: Contribution

  """Url of the contribution"""
  url: URI!

  """Identifies the date and time when the object was updated."""
  updatedAt: DateTime

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!

  """Whether or not the entity is published."""
  published: Boolean!

  """Identifies when the entity can no more be published."""
  publishableUntil: DateTime

  """Identifies when the entity was published at."""
  publishedAt: DateTime

  """Reason that the entity is not published."""
  notPublishedReason: NotPublishedReason

  """true if the contribution is pinned."""
  pinned: Boolean!

  """Identifies the contribution title."""
  title: String!

  """Identifies the body of the contribution."""
  body: HTML!

  """Identifies the body of the contribution rendered to text."""
  bodyText: String!

  """The related project."""
  project: Project
}

"""
Possible directions in which to order a list of items when provided an `orderBy` argument.
"""
enum OrderDirection {
  """Specifies an ascending order for a given `orderBy` argument."""
  ASC

  """Specifies a descending order for a given `orderBy` argument."""
  DESC
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""A participatory project."""
type Project implements Node & UniformResourceLocatable {
  """The ID of an object."""
  id: ID!

  """The URL to this resource."""
  url: URI!

  """Identifies the title of the project."""
  title: String!

  """Identifies when the project was published at."""
  publishedAt: DateTime!

  """A list of votes associated with the project."""
  votes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
  ): VoteConnection!

  """A list of contributors associated with the project."""
  contributors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """Ordering options for contributors returning from the connection."""
    orderBy: UserOrder = {field: CREATED_AT, direction: DESC}
  ): UserConnection!

  """Count of contributions associated with the project."""
  contributionsCount: Int! @deprecated(reason: "reason: \"In preparation for an upcoming change to the way we expose counters, this field will only be available inside a connection, Field \"contributionsCount\" will be removed, Use \"contributions.totalCount\" instead when it will be published.")

  """Contributions associated with the project."""
  contributions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
  ): ContributionConnection!

  """The cover image associated with the project."""
  cover: Media

  """The type associated with the project."""
  type: ProjectType
  metaDescription: String

  """The different steps associated with the project."""
  steps: [Step!]!

  """The list of users who authored the project."""
  authors: [User!]!

  """Linking table with districts"""
  districts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
  ): GlobalDistrictConnection

  """Themes associated with the project."""
  themes: [Theme!]
}

"""A connection to a list of items."""
type ProjectConnection {
  """Identifies the total count of items in the connection."""
  totalCount: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [ProjectEdge]
}

type ProjectDistrictPositioner {
  district: GlobalDistrict!
  project: Project!
  position: Int!
}

"""An edge in a connection."""
type ProjectEdge {
  """The item at the end of the edge."""
  node: Project!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Ways in which project can be ordered."""
input ProjectOrder {
  """The direction in which to order nodes."""
  direction: OrderDirection! = DESC

  """The field in which to order nodes by."""
  field: ProjectOrderField! = PUBLISHED_AT
}

"""Ordering options for projects returned from the connection."""
enum ProjectOrderField {
  """Allows ordering a list of projects by their number of contributions."""
  POPULAR

  """Allows ordering a list of projects by when they were published."""
  PUBLISHED_AT
}

"""Label of a Project."""
type ProjectType {
  """Title of project Type"""
  title: String!
}

"""Represents a user's contribution to a collect step."""
type Proposal implements Node & Publishable & UniformResourceLocatable & Trashable & Draftable {
  """The ID of an object."""
  id: ID!

  """Whether or not the entity is published."""
  published: Boolean!

  """Identifies when the entity can no more be published."""
  publishableUntil: DateTime

  """Identifies when the entity was published at."""
  publishedAt: DateTime

  """Reason that the entity is not published."""
  notPublishedReason: NotPublishedReason

  """The URL to this resource."""
  url: URI!

  """Whether or not the contribution is trashed."""
  trashed: Boolean!

  """Identifies the trashed visibility."""
  trashedStatus: TrashableStatus

  """Identifies the moment the moderator trashed the contribution."""
  trashedAt: DateTime

  """Identifies the reason why the moderator trashed the contribution."""
  trashedReason: String

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!

  """Whether or not the entity is a draft."""
  draft: Boolean!

  """Identifies when the entity was undraft at."""
  undraftAt: DateTime

  """Identifies the proposal title."""
  title: String!

  """Identifies the author of the contribution."""
  author: User!

  """Identifies the body of the proposal."""
  body: HTML

  """Identifies the responses of the proposal."""
  responses: [Response]!

  """Identifies the unique reference of the proposal."""
  reference: String!

  """Analysts's analysis of the proposal."""
  analyses: [ProposalAnalysis!]

  """The decision of the decision-maker on the analysis of the proposal."""
  decision: ProposalDecision

  """The supervisor's assessment on the analysis of the proposal."""
  assessment: ProposalAssessment

  """List of votes of the proposal."""
  votes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """The ordering options for votes."""
    orderBy: ProposalVoteOrder = {field: PUBLISHED_AT, direction: DESC}
  ): ProposalVoteConnection!

  """List of selections (step an status) of the proposal."""
  selections: [ProposalSelection!]!

  """The address of the proposal."""
  address: GoogleMapsAddress

  """The theme of the proposal."""
  theme: Theme

  """The category of the proposal, related to the ProposalForm."""
  category: ProposalCategory

  """Identifies the summary of the contribution."""
  summary: String

  """Identifies the body of the contribution rendered to text."""
  bodyText: String
}

"""A proposal analysis."""
type ProposalAnalysis {
  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!

  """The proposal's analysis id."""
  id: ID!

  """The related proposal."""
  proposal: Proposal!

  """The last updated by a analyst."""
  analyst: User!

  """The estimated cost of the related proposal in €."""
  estimatedCost: Int

  """The current state of the analysis."""
  state: ProposalAnalysisState!

  """The analysis responses."""
  responses: [Response!]!
}

"""The possible states for a proposal analysis."""
enum ProposalAnalysisState {
  """The proposal's analysis is currently being edited"""
  IN_PROGRESS

  """The proposal's related analysis state is favourable."""
  FAVOURABLE

  """The proposal's related analysis state is unfavourable."""
  UNFAVOURABLE

  """The proposal's related analysis has been not made in time."""
  TOO_LATE

  """The analysis has not begun."""
  NONE
}

"""A proposal assessment."""
type ProposalAssessment {
  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!

  """The proposal's assessment id."""
  id: ID!

  """The related proposal."""
  proposal: Proposal!

  """The last updated by a supervisor."""
  supervisor: User!

  """The current state of the assessment."""
  state: ProposalAssessmentState!

  """The body of the assessment."""
  body: String

  """The estimated cost of the related proposal in €."""
  estimatedCost: Int

  """The official response of the proposal assessment."""
  officialResponse: String
}

"""Possible values of a proposal's assessment state."""
enum ProposalAssessmentState {
  """The proposal's assessment is currently being edited"""
  IN_PROGRESS

  """The proposal's related statement state is favourable."""
  FAVOURABLE

  """The proposal's related statement state is unfavourable."""
  UNFAVOURABLE

  """The evaluation of the proposal was not issued in time."""
  TOO_LATE
}

"""A proposal category"""
type ProposalCategory {
  """Identifies the name of the category."""
  name: String!
}

"""A connection to a list of items."""
type ProposalConnection {
  """Identifies the total count of items in the connection."""
  totalCount: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [ProposalEdge]
}

"""A proposal decision."""
type ProposalDecision {
  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!

  """The proposal's decision id."""
  id: ID!

  """The related proposal."""
  proposal: Proposal!

  """The last updated by a decision-maker."""
  decisionMaker: User!

  """The current state of the decision."""
  isApproved: Boolean!

  """The estimated cost of the related proposal in €."""
  estimatedCost: Int

  """The related official response."""
  post: OfficialResponse! @deprecated(reason: "Field \"post\" will be removed, Use \"officialResponse\" instead.")

  """The related official response."""
  officialResponse: OfficialResponse!

  """The current status of the decision on the proposal"""
  state: ProposalDecisionState!

  """The step's related status assigned to the proposal."""
  refusedReason: ProposalStepStatus
}

"""Possible values of a proposal's decision state."""
enum ProposalDecisionState {
  """The proposal's decision is currently being edited"""
  IN_PROGRESS

  """The proposal's related decision state is favourable."""
  DONE
}

"""An edge in a connection."""
type ProposalEdge {
  """The item at the end of the edge."""
  node: Proposal!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Ways in which proposal connections can be ordered."""
input ProposalOrder {
  """The field in which to order nodes by."""
  field: ProposalOrderField!

  """The direction in which to order nodes."""
  direction: OrderDirection! = ASC
}

"""Properties by which proposal connections can be ordered."""
enum ProposalOrderField {
  """
  Allows ordering a list of proposals by the number of comments it have.
  """
  COMMENTS

  """
  Allows ordering a list of proposals by the cost it have been estimated.
  """
  COST

  """Allows ordering a list of proposals by their creation date."""
  CREATED_AT

  """Allows ordering a list of proposals by when they were published."""
  PUBLISHED_AT

  """Allows randomizing a list of proposals."""
  RANDOM

  """Allows ordering a list of proposals by the number of votes it have."""
  VOTES

  """Allows ordering a list of proposals by the number of points it have."""
  POINTS

  """
  Allows ordering a list of proposals by the number of messages it have received.
  """
  NUMBER_OF_MESSAGES_RECEIVED
}

"""The selection of a proposal in a step."""
type ProposalSelection {
  """The step where the proposal is selected."""
  step: SelectionStep!

  """The status of the proposal in the step."""
  status: ProposalStepStatus
}

"""The given proposal status in a step."""
type ProposalStepStatus {
  """The id of the proposal step status."""
  id: ID!

  """The name of the proposal step status."""
  name: String!

  """The color of the proposal step status."""
  color: ProposalStepStatusColor!
}

"""Different status type"""
enum ProposalStepStatusColor {
  """Info color."""
  INFO

  """Primary color."""
  PRIMARY

  """Success color."""
  SUCCESS

  """Warning color."""
  WARNING

  """Caution color."""
  CAUTION

  """Danger color."""
  DANGER

  """Default color."""
  DEFAULT
}

"""Possible trashed status for a `Proposal`."""
enum ProposalTrashedStatus {
  """`NOT_TRASHED` status to inclide the non trashed proposal."""
  NOT_TRASHED

  """`TRASHED` status to include the trashed proposal."""
  TRASHED
}

"""A vote on a proposal for a given step."""
type ProposalVote implements Publishable & Vote {
  """The ID of an object"""
  id: ID!

  """Whether or not the entity is published."""
  published: Boolean!

  """Identifies when the entity can no more be published."""
  publishableUntil: DateTime

  """Identifies when the entity was published at."""
  publishedAt: DateTime

  """Reason that the entity is not published."""
  notPublishedReason: NotPublishedReason

  """Whether the author of the vote is anonymous or not."""
  private: Boolean @deprecated(reason: "reason: \"This field has been renamed, Field \"private\" will be removed, Use \"anonymous\" instead.")

  """Whether the author of the vote is anonymous or not."""
  anonymous: Boolean!

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
}

"""A connection to a list of items."""
type ProposalVoteConnection {
  totalCount: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [ProposalVoteEdge]
}

"""An edge in a connection."""
type ProposalVoteEdge {
  """The item at the end of the edge."""
  node: ProposalVote!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Ways in which lists of votes can be ordered upon return."""
input ProposalVoteOrder {
  """The field in which to order nodes by."""
  field: ProposalVoteOrderField! = PUBLISHED_AT

  """The direction in which to order nodes."""
  direction: OrderDirection! = DESC
}

"""Ordering options for votes returned from the connection."""
enum ProposalVoteOrderField {
  """Allows ordering a list of vote by when they were published."""
  PUBLISHED_AT
}

"""Entities that can be published."""
interface Publishable {
  """The ID of an object"""
  id: ID!

  """Whether or not the entity is published."""
  published: Boolean!

  """Identifies when the entity can no more be published."""
  publishableUntil: DateTime

  """Identifies when the entity was published at."""
  publishedAt: DateTime

  """Reason that the entity is not published."""
  notPublishedReason: NotPublishedReason
}

"""Root of the schema."""
type Query {
  """The currently authenticated user."""
  viewer: User!

  """Lookup a node by its ID."""
  node(
    """The ID of an object."""
    id: ID!
  ): Node

  """Lookup nodes by a list of IDs."""
  nodes(
    """The list of node IDs."""
    ids: [ID!]!
  ): [Node]!

  """Lookup projects."""
  projects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """Ordering options for projects returning from the connection."""
    orderBy: ProjectOrder = {direction: DESC, field: PUBLISHED_AT}

    """ID of a Theme to filter by. If non-null, filter projects by themes"""
    theme: ID
  ): ProjectConnection!

  """Lookup events."""
  events(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """Ordering options for events returning from the connection."""
    orderBy: EventOrder = {field: START_AT, direction: DESC}

    """
    ID of a Project to filter by. If non-null, only events belonging to the project will be returned.
    """
    project: ID
  ): EventConnection!

  """Lookup users."""
  users(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
  ): UserConnection!

  """List all the district project in the platform."""
  globalDistricts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """Filter by name."""
    name: String = null
  ): GlobalDistrictConnection!
}

"""All custom forms are build using questions."""
interface Question {
  """The ID of an object."""
  id: ID!

  """Identifies the question title."""
  title: String!

  """Return responses on this questions."""
  responses(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
  ): ResponseConnection!
}

"""A possible choice of a question."""
type QuestionChoice {
  """The ID of an object."""
  id: ID!

  """Identifies the question choice title."""
  title: String!

  """Identifies the responses of the question choice."""
  responses(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
  ): ResponseConnection!
}

"""A connection to a list of items."""
type QuestionChoiceConnection {
  totalCount: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [QuestionChoiceEdge]
}

"""An edge in a connection."""
type QuestionChoiceEdge {
  """The item at the end of the edge."""
  node: QuestionChoice

  """A cursor for use in pagination."""
  cursor: String!
}

"""A questionnaire is a series of questions that users can answer."""
type Questionnaire implements Node {
  """The ID of an object."""
  id: ID!

  """Identifies the questionnaire title."""
  title: String!

  """Whether the user has reply to a questionnaire."""
  userHasReply(
    """The user's login (for example, an email)."""
    login: String!
  ): Boolean!

  """A list of users that have replied to the questionnaire."""
  participants(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
  ): UserConnection!

  """The list of questions of the questionnaire."""
  questions: [Question!]!

  """A list of replies to the questionnaire."""
  replies(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """(ROLE_ADMIN only) Select also unpublished replies."""
    includeUnpublished: Boolean = false

    """(ROLE_ADMIN only) Select also draft replies."""
    includeDraft: Boolean = false
  ): UserReplyConnection!
}

"""A step is a part of a project."""
type QuestionnaireStep implements Node & Step {
  """The ID of an object"""
  id: ID!

  """The URL to this resource."""
  url: URI!

  """When the time interval begins or ends."""
  timeRange: TimeRange!

  """The title of the step."""
  title: String!

  """Identifies the current state of the step."""
  state: StepState!

  """A questionnaire associated with the step."""
  questionnaire: Questionnaire

  """A list of contributor associated with the step."""
  contributors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
  ): UserConnection!
}

"""A response to a question."""
interface Response {
  """Nullable ID in case of empty response."""
  id: String

  """The question."""
  question: Question!
}

"""A connection to a list of items."""
type ResponseConnection {
  """Identifies the total count of items in the connection."""
  totalCount: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [ResponseEdge]
}

"""An edge in a connection."""
type ResponseEdge {
  """The item at the end of the edge."""
  node: Response!

  """A cursor for use in pagination."""
  cursor: String!
}

"""A section is just a title in a quiz without any possible answer."""
type SectionQuestion implements Question & Node {
  """The ID of an object."""
  id: ID!

  """Identifies the question title."""
  title: String!

  """Return responses on this questions."""
  responses(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
  ): ResponseConnection!

  """If not null, give the section s depth"""
  level: Int
}

"""A step to select proposals."""
type SelectionStep implements Node & Step {
  """The ID of an object."""
  id: ID!

  """A list of proposals associated to the object."""
  proposals(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """
    If non-null, filters proposals with the given trashed status (eg: visible, not visible).
    """
    trashedStatus: ProposalTrashedStatus = NOT_TRASHED

    """
    ID of a User to filter by. If non-null, only proposals authored by this user will be returned.
    """
    author: ID

    """Ordering options for proposals returned from the connection."""
    orderBy: [ProposalOrder] = [{field: PUBLISHED_AT, direction: ASC}]

    """(ROLE_ADMIN only) Select also draft proposals."""
    includeDraft: Boolean = false
  ): ProposalConnection!

  """The URL to this resource."""
  url: URI!

  """When the time interval begins or ends."""
  timeRange: TimeRange!

  """The title of the step."""
  title: String!

  """Identifies the current state of the step."""
  state: StepState!
}

"""A simple question"""
type SimpleQuestion implements Question & Node {
  """The ID of an object."""
  id: ID!

  """Identifies the question title."""
  title: String!

  """Return responses on this questions."""
  responses(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
  ): ResponseConnection!
}

"""A source"""
type Source implements Node & Publishable & Contribution & Trashable & UniformResourceLocatable {
  """The ID of an object."""
  id: ID!

  """Whether or not the entity is published."""
  published: Boolean!

  """Identifies when the entity can no more be published."""
  publishableUntil: DateTime

  """Identifies when the entity was published at."""
  publishedAt: DateTime

  """Reason that the entity is not published."""
  notPublishedReason: NotPublishedReason

  """
  Return the related contribution if the contribution is related to another.
  """
  related: Contribution

  """The source's url"""
  url: URI!

  """Whether or not the contribution is trashed."""
  trashed: Boolean!

  """Identifies the trashed visibility."""
  trashedStatus: TrashableStatus

  """Identifies the moment the moderator trashed the contribution."""
  trashedAt: DateTime

  """Identifies the reason why the moderator trashed the contribution."""
  trashedReason: String

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!

  """Whether or not the user has report the source."""
  viewerHasReport: Boolean!

  """Whether or not the user can contribute to the source."""
  contribuable: Boolean!

  """Whether or not the user has voted for this source."""
  viewerHasVote: Boolean!

  """The title of the source."""
  title: String!

  """The content of the source."""
  body: String!
}

"""A step is a part of a project."""
interface Step {
  """The ID of an object"""
  id: ID!

  """The URL to this resource."""
  url: URI!

  """When the time interval begins or ends."""
  timeRange: TimeRange!

  """The title of the step."""
  title: String!

  """Identifies the current state of the step."""
  state: StepState!
}

"""The possible states in which a step can be."""
enum StepState {
  """The step has not started yet."""
  FUTURE

  """The step is currently open."""
  OPENED

  """The step has been closed."""
  CLOSED
}

"""A object style."""
type Style {
  id: ID

  """Specify if the style is activated or not."""
  enabled: Boolean!

  """The color value in hexadecimal format for the border or background."""
  color: Color

  """The value of the opacity of the border or the background."""
  opacity: Float

  """The value of the border size."""
  size: Int
}

"""3 possible values for a subscription."""
enum SubscriptionTypeValue {
  """Get all notifications for this subscription"""
  ALL

  """Get essentials notifications for this subscription"""
  ESSENTIAL

  """Get minimal notifications for this subscription"""
  MINIMAL
}

"""A theme."""
type Theme {
  """Identifies the title of the theme."""
  title(
    """The locale to translate content (eg: FR_FR)."""
    locale: TranslationLocale
  ): String!

  """Identifies the body of the theme."""
  body(
    """The locale to translate content (eg: FR_FR)."""
    locale: TranslationLocale
  ): String

  """Identifies the teaser of the theme."""
  teaser(
    """The locale to translate content (eg: FR_FR)."""
    locale: TranslationLocale
  ): String

  """Identifies the theme ID."""
  id: ID!
}

"""A time range that contains start date and end date."""
type TimeRange {
  """The start date of the time range."""
  startAt: DateTime

  """The end date of the time range"""
  endAt: DateTime
}

"""A translation locale"""
enum TranslationLocale {
  """English - UNITED KINGDOM locale"""
  EN_GB

  """French - FRANCE locale"""
  FR_FR

  """Spanish - SPAIN locale"""
  ES_ES

  """German - GERMANY locale"""
  DE_DE

  """Dutch - NETHERLANDS locale"""
  NL_NL

  """Swedish - SWEDEN locale"""
  SV_SE

  """Basque - EUSKADIA locale"""
  EU_EU

  """Gascon - OCCITAN locale"""
  OC_OC

  """Recette - RECETTE locale"""
  UR_IN
}

"""Entities that can be trashed."""
interface Trashable {
  """Whether or not the contribution is trashed."""
  trashed: Boolean!

  """Identifies the trashed visibility."""
  trashedStatus: TrashableStatus

  """Identifies the moment the moderator trashed the contribution."""
  trashedAt: DateTime

  """Identifies the reason why the moderator trashed the contribution."""
  trashedReason: String
}

"""Different trashable status."""
enum TrashableStatus {
  """Content is not visible."""
  INVISIBLE

  """Content is visible."""
  VISIBLE
}

"""An RFC 3986, RFC 3987, and RFC 6570 (level 4) compliant URI string."""
scalar URI

"""Represents a type that can be retrieved by a URL."""
interface UniformResourceLocatable {
  """The URL to this resource."""
  url: URI!
}

"""A user is an individual's account."""
type User implements Node & UniformResourceLocatable {
  """The ID of an object."""
  id: ID!

  """The URL to this resource."""
  url: URI!

  """The user's public name."""
  username: String

  """Whether or not this user is the authenticated user."""
  isViewer: Boolean!

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime

  """A URL pointing to the user's Facebook account."""
  facebookUrl: URI

  """A URL pointing to the user's Twitter account."""
  twitterUrl: URI

  """A URL pointing to the user's LinkedIn account."""
  linkedInUrl: URI

  """A URL pointing to the user's public website/blog."""
  websiteUrl: URI

  """The user's public profile biography."""
  biography: String

  """Identifies the date and time when this user account was deleted."""
  deletedAccountAt: DateTime

  """A URL pointing to the user's Instagram account."""
  instagramUrl: URI

  """The type of the person."""
  userType: UserType

  """The responses answered by user."""
  responses(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
  ): ResponseConnection!

  """The user's personal email."""
  email: Email

  """Whether or not this user consent internal communication."""
  consentInternalCommunication: Boolean

  """The user's public avatar URL."""
  avatarUrl: URI

  """Whether or not this user has a confirmed account."""
  enabled: Boolean!
}

"""A connection to a list of items."""
type UserConnection {
  """Identifies the total count of items in the connection."""
  totalCount: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [UserEdge]
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

"""A business-level error."""
type UserError {
  """The reason which caused the error."""
  message: String

  """Path to input field which caused the error."""
  field: [String!]
}

"""Ways in which lists of users can be ordered upon return."""
input UserOrder {
  """The field to order users by."""
  field: UserOrderField! = CREATED_AT

  """The ordering direction."""
  direction: OrderDirection! = DESC
}

"""Properties by which users connections can be ordered"""
enum UserOrderField {
  """Allows ordering a list of users by when they were created."""
  CREATED_AT

  """Allowing ordering a list of user by their activity."""
  ACTIVITY
}

"""Represents a user answer to a questionnaire."""
type UserReply implements Node {
  """The ID of an object."""
  id: ID!

  """Whether or not the entity is published."""
  published: Boolean!

  """Identifies when the entity can no more be published."""
  publishableUntil: DateTime

  """Identifies when the entity was published at."""
  publishedAt: DateTime

  """Reason that the entity is not published."""
  notPublishedReason: NotPublishedReason

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!

  """Whether or not the entity is a draft."""
  draft: Boolean!

  """Identifies when the entity was undraft at."""
  undraftAt: DateTime

  """The responses of the reply."""
  responses: [Response]!

  """The author of the contribution."""
  author: User!
}

"""A connection to a list of items."""
type UserReplyConnection {
  """Identifies the total count of items in the connection."""
  totalCount: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [UserReplyEdge]
}

"""An edge in a connection."""
type UserReplyEdge {
  """The item at the end of the edge."""
  node: UserReply!

  """A cursor for use in pagination."""
  cursor: String!
}

"""A type of person"""
type UserType implements Node {
  """The id of the type."""
  id: ID!

  """The name of the type."""
  name: String!
}

"""A value response."""
type ValueResponse implements Response {
  """Nullable ID in case of empty response."""
  id: String

  """The question."""
  question: Question!

  """The response value which can be a string or a JSON."""
  value: String

  """The response value formatted."""
  formattedValue: String
}

"""A version of contribution"""
type Version implements Node & Contribution & Publishable & Trashable & UniformResourceLocatable {
  """The ID of an object"""
  id: ID!

  """
  Return the related contribution if the contribution is related to another.
  """
  related: Contribution

  """The URL to this resource."""
  url: URI!

  """Whether or not the contribution is trashed."""
  trashed: Boolean!

  """Identifies the trashed visibility."""
  trashedStatus: TrashableStatus

  """Identifies the moment the moderator trashed the contribution."""
  trashedAt: DateTime

  """Identifies the reason why the moderator trashed the contribution."""
  trashedReason: String

  """Whether or not the entity is published."""
  published: Boolean!

  """Identifies when the entity can no more be published."""
  publishableUntil: DateTime

  """Identifies when the entity was published at."""
  publishedAt: DateTime

  """Reason that the entity is not published."""
  notPublishedReason: NotPublishedReason

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  viewerHasReport: Boolean!

  """Explenation."""
  comment: String

  """The title of the contribution."""
  title: String!

  """The content of the contribution."""
  body: HTML!

  """The content of the contribution."""
  bodyText: String!
  parent: Opinion!

  """The related project."""
  project: Project
}

"""A vote."""
interface Vote {
  """The ID of an object"""
  id: ID!

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
}

"""A connection to a list of items."""
type VoteConnection {
  """Identifies the total count of items in the connection."""
  totalCount: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [VoteEdge]
}

"""An edge in a connection."""
type VoteEdge {
  """The item at the end of the edge."""
  node: Vote

  """A cursor for use in pagination."""
  cursor: String!
}
