#
# This server send all HTTPS requests to varnish
#
server {
    listen 443 ssl default_server;
    root /var/www/public;

    ssl_certificate /etc/ssl/certs/capco.crt;
    ssl_certificate_key /etc/ssl/private/capco.key;

    # Hot reload should not go through Varnish
    location /_next/webpack-hmr {
        proxy_pass http://nextjs:3000/_next/webpack-hmr;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
    }

    location / {
        proxy_pass http://127.0.0.1:8181;
        proxy_set_header Host $http_host;
        proxy_set_header X-Forwarded-Host $http_host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto https;
        proxy_set_header HTTPS "on";
    }

    error_log stderr;
    access_log stderr;
}

# Mailcatcher reverse proxy for SSL
server {
    listen 443 ssl;
    root /var/www/public;
    server_name mail.cap.co;

    ssl_certificate /etc/ssl/certs/capco.crt;
    ssl_certificate_key /etc/ssl/private/capco.key;

    location / {
        proxy_pass http://mailcatchersmtp:80;
        proxy_set_header Host $http_host;
        proxy_set_header X-Forwarded-Host $http_host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto https;
        proxy_set_header HTTPS "on";
    }

    error_log stderr;
    access_log stderr;
}

# RabbitMQ reverse proxy for SSL
server {
    listen 443 ssl;
    root /var/www/public;
    server_name rabbitmq.cap.co;

    ssl_certificate /etc/ssl/certs/capco.crt;
    ssl_certificate_key /etc/ssl/private/capco.key;

    location / {
        proxy_pass http://127.0.0.1:15672;
        proxy_set_header Host $http_host;
        proxy_set_header X-Forwarded-Host $http_host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto https;
        proxy_set_header HTTPS "on";
    }

    error_log stderr;
    access_log stderr;
}

# Kibana reverse proxy for SSL
server {
    listen 443 ssl;
    root /var/www/public;
    server_name kibana.cap.co;

    ssl_certificate /etc/ssl/certs/capco.crt;
    ssl_certificate_key /etc/ssl/private/capco.key;

    location / {
        proxy_pass http://kibana:5601;
        proxy_set_header Host $http_host;
        proxy_set_header X-Forwarded-Host $http_host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto https;
        proxy_set_header HTTPS "on";
    }

    error_log stderr;
    access_log stderr;
}

# cerebro reverse proxy for SSL
server {
    listen 443 ssl;
    root /var/www/public;
    server_name cerebro.cap.co;

    ssl_certificate /etc/ssl/certs/capco.crt;
    ssl_certificate_key /etc/ssl/private/capco.key;

    location / {
        proxy_pass http://cerebro:9000;
        proxy_set_header Host $http_host;
        proxy_set_header X-Forwarded-Host $http_host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto https;
        proxy_set_header HTTPS "on";
    }

    error_log stderr;
    access_log stderr;
}