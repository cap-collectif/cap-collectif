user capco capco;
pid /var/run/nginx.pid;
include /etc/nginx/modules-enabled/50-mod-http-geoip.conf;

worker_processes 8;

daemon off;
error_log stderr;

http {
    # Override some buffer limitations, will prevent DDOS too.
    client_body_buffer_size 10K;
    client_header_buffer_size 32k;
    client_max_body_size 25M;
    large_client_header_buffers 2 1k;
    client_body_in_file_only clean;

    server_tokens off;

    # Tcp_nopush causes nginx to attempt to send its HTTP response head in one
    # packet, instead of using partial frames. This is useful for prepending
    # headers before calling sendfile, or for throughput optimization.
    tcp_nopush on;

    # Don't buffer data-sends (disable Nagle algorithm). Good for sending
    # frequent small bursts of data in real time.
    tcp_nodelay on;

    # Every 60 seconds server broadcasts Sync packets, so 90 is
    # a conservative upper bound.
    keepalive_timeout 90;

    types_hash_max_size 2048;

    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Allow the server to close the connection after a client stops
    # responding.
    # Frees up socket-associated memory.
    reset_timedout_connection on;

    # file upload

    # Sendfile copies data between one FD and other from within the kernel.
    # More efficient than read() + write(), since the requires transferring
    # data to and from the user space.
    sendfile on;
    send_timeout 300s;

    # Open file descriptors.
    # Caches information about open FDs, freqently accessed files.
    open_file_cache max=200000 inactive=20s;
    open_file_cache_valid 30s;
    open_file_cache_min_uses 2;
    open_file_cache_errors on;

    # handle non-ssl https from the nginx load balancer
    map $http_x_forwarded_proto $fastcgi_https {
        default off;
        https on;
    }

    # gzip compression
    gzip on;
    gzip_disable "msie6";
    gzip_vary on;
    gzip_proxied any;

    # Default is 6 (1<n<9), but 2 -- even 1 -- is enough. The higher it is, the
    # more CPU cycles will be wasted.
    gzip_comp_level 2;
    gzip_buffers 16 8k;
    gzip_http_version 1.1;
    gzip_types text/plain
        text/css
        text/javascript
        application/javascript
        application/x-javascript
        application/json
        text/xml
        application/xml
        application/xml+rss
        image/svg+xml;
    gzip_min_length 500;

    # Use analytics to track stuff instead of using precious file IO resources.
    # Disabling logging speeds up IO.
    access_log off;

    proxy_cache_path /var/cache/nginx
        levels=1:2
        keys_zone=STATIC:10m
        max_size=500m
        inactive=60m
        use_temp_path=off;

    upstream nextjs_upstream {
        server localhost:3000;
    }

    # transform $dollar variable into dollar sign
    # https://openresty.org/download/agentzh-nginx-tutorials-en.html#nginx-variables-escaping-dollar
    geo $dollar {
        default "$";
    }

    # Backend application
    server {
        include /etc/nginx/default_headers.conf;
        listen 8080;
        root /var/www/public;

        # other assets
        location ~* \.(js|css|gif|ico|eot|ttf|woff|svg|otf)$ {
            access_log off;
            expires max;
        }

        # Public API endpoint :
        # - CSP is disabled
        # - all origins are allowed
        location = /graphql {
            add_header Content-Security-Policy "default-src 'none'" always;
            add_header Access-Control-Allow-Origin "*" always;
            add_header Access-Control-Allow-Methods "OPTIONS, POST" always;
            add_header Access-Control-Allow-Headers "Accept, Accept-Language, Origin, Content-Type, Authorization" always;
            add_header Access-Control-Max-Age "3600" always;
            add_header Referrer-Policy "origin-when-cross-origin, strict-origin-when-cross-origin" always;
            add_header X-Xss-Protection "1; mode=block" always;
            add_header X-Frame-Options "deny" always;
            add_header X-Content-Type-Options "nosniff" always;

            include /etc/nginx/fastcgi_forward.conf;
        }

        # Internal API endpoints :
        # - CSP is disabled
        # - only our origin is allowed
        location = /graphql/internal {
            add_header Content-Security-Policy "default-src 'none'" always;
            add_header Access-Control-Allow-Origin "$http_origin" always;
            add_header Access-Control-Allow-Methods "OPTIONS, POST" always;
            add_header Access-Control-Max-Age "3600" always;

            include /etc/nginx/fastcgi_forward.conf;
        }
        location = /graphql/dev {
            add_header Content-Security-Policy "default-src 'none'" always;
            add_header Access-Control-Allow-Origin "$http_origin" always;
            add_header Access-Control-Allow-Methods "OPTIONS, POST" always;
            add_header Access-Control-Max-Age "3600" always;

            include /etc/nginx/fastcgi_forward.conf;
        }

        # Public Iframe endpoint :
        # - CSP allow iframes
        # - all origins are allowed
        location /widget_debate {
            add_header Content-Security-Policy
                "default-src * 'unsafe-inline' 'unsafe-eval'; script-src * data: https://* 'unsafe-inline' 'unsafe-eval'; connect-src * 'unsafe-inline'; img-src * data: blob: 'unsafe-inline'; frame-src * data: blob: ; style-src * data: https://* 'unsafe-inline';"
                always;
            add_header Access-Control-Allow-Origin "*" always;
            add_header Access-Control-Max-Age "3600" always;

            include /etc/nginx/fastcgi_forward.conf;
        }

        # Our new Admin powered by NextJS :
        location ^~ /_next/static/ {
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
            proxy_pass http://nextjs_upstream;
        }
        location ~ ^/(admin-next|profile/organization|project-district/|pages|contact$) { #|projects$
            proxy_pass http://nextjs_upstream;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
        }

        # simplesaml application
        location ^~ /simplesaml {
            alias /var/www/vendor/simplesamlphp/simplesamlphp/www;
            location ~ ^(?<prefix>/simplesaml)(?<script_name>.*?\.php)(?<path_info>/.*)?$ {
                include fastcgi_params;
                include environments;
                fastcgi_split_path_info ^(.+\.php)(/.+)$;
                fastcgi_param SCRIPT_FILENAME $document_root$script_name;
                fastcgi_param PATH_INFO $path_info;
                fastcgi_param HTTPS on; # SAML enforce using HTTPS
                fastcgi_pass 127.0.0.1:9000;
            }
        }

        # strip index.php/ prefix if it is present
        rewrite ^/index\.php/?(.*)$ /$1 permanent;

        location / {
            index index.php;

            try_files $uri @rewriteapp;
        }

        # Fighting with Imagine? This little gem is amazing.
        location ~ ^/media/cache/.*/default/ {
            try_files $uri @rewriteapp;
        }

        location /export/ {
            internal;
        }

        location /magiclinks/ {
            return 404;
        }

        location @rewriteapp {
            rewrite ^(.*)$ /index.php/$1 last;
        }

        location ~ ^/index\.php(/|$) {
            include /etc/nginx/fastcgi_forward.conf;
        }

        # return 404 for all other php files not matching the front controller
        # this prevents access to other php files you don't want to be accessible.
        location ~ \.php$ {
            return 404;
        }

        location /502.html {

        }

        error_log stderr;
       # access_log off;
    }
}

events {
    # Let each process accept multiple connections.
    # Accept as many connections as possible, after nginx gets notification
    # about a new connection.
    # May flood worker_connections, if that option is set too low.
    multi_accept on;

    # Preferred connection method for newer linux versions.
    # Essential for linux, optmized to serve many clients with each thread.
    use epoll;

    # Determines how many clients will be served by each worker process.
    # (Max clients = worker_connections * worker_processes)
    # Should be equal to `ulimit -n`
    worker_connections 1024;
}

worker_rlimit_nofile 4096;
