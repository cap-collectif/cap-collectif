#!/bin/bash

cd /var/www

echo "[$(date -u)][PHP-FPM] Creating var/ files..."
for directory in var/cache var/log var/logs public/bundles public/media/default public/media/sonata_category; do
  if [ ! -d "$directory" ]; then
    mkdir -p -m 777 $directory
    chown capco:capco $directory
  fi
done
echo "[PHP-FPM] Created var/ files!"

echo "[$(date -u)][PHP-FPM] Granting permissions to app/ folder..."
chmod -R 777 app/
echo "[$(date -u)][PHP-FPM] Permissions granted to app/ folder!"

echo "[$(date -u)][PHP-FPM] Setting permissions to public/, cache/, log/ and logs/..."
chmod -R 777 public/media
chmod -R 777 var/logs
chmod -R 777 var/log
rm -rf var/cache/prod/*
chown -R capco:capco var/cache
chown -R capco:capco var/logs
chown -R capco:capco var/log
chown -R capco:capco /var/www/config
echo "[$(date -u)][PHP-FPM] Permissions gived to public/, cache/ and, log/ logs/!"

timeout=1;
echo "[$(date -u)][PHP-FPM] Waiting for MySQL..."
while ! (mysqladmin ping --host=${SYMFONY_DATABASE_HOST:-127.0.0.1} --user=${SYMFONY_DATABASE_USER:-root} --password=${SYMFONY_DATABASE_PASSWORD} --port=${SYMFONY_DATABASE_PORT:-3306})
do
    sleep $timeout
    timeout=$(( $timeout + 1 ))
done

timeout=1;
if [[ -z "${SYMFONY_RABBITMQ_HOST}" || $SYMFONY_RABBITMQ_HOST == "127.0.0.1" ]]
then
    echo "[$(date -u)][PHP-FPM] Waiting RabbitMQ..."
    while ! (gosu rabbitmq rabbitmqctl cluster_status > /dev/null)
    do
        sleep $timeout
        timeout=$(( $timeout + 1 ))
    done

    # When we have fresh instance, capco vhost is not created
    if gosu rabbitmq rabbitmqctl list_vhosts | grep -q ${SYMFONY_RABBITMQ_VHOST:-capco}; then
        echo "[$(date -u)][PHP-FPM] Updating RabbitMQ vhost to match schema..."
        gosu capco php bin/rabbit vhost:mapping:create --host=${SYMFONY_RABBITMQ_HOST:-127.0.0.1} --vhost=${SYMFONY_RABBITMQ_VHOST:-capco}  --user=${SYMFONY_RABBITMQ_LOGIN:-guest} --password=${SYMFONY_RABBITMQ_PASSWORD:-guest} config/rabbitmq.yaml --quiet
        echo "[$(date -u)][PHP-FPM] RabbitMQ vhost updated!"
    else
        echo "[$(date -u)][PHP-FPM] Creating RabbitMQ vhost schema..."
        gosu capco php bin/rabbit vhost:mapping:create --host=${SYMFONY_RABBITMQ_HOST:-127.0.0.1} --vhost=${SYMFONY_RABBITMQ_VHOST:-capco} --erase-vhost --user=${SYMFONY_RABBITMQ_LOGIN:-guest} --password=${SYMFONY_RABBITMQ_PASSWORD:-guest} config/rabbitmq.yaml --quiet
        echo "[$(date -u)][PHP-FPM] RabbitMQ vhost created!"
    fi
else
    echo "[$(date -u)][PHP-FPM] Waiting RabbitMQ External Server..."
    while ! (nc -zv ${SYMFONY_RABBITMQ_HOST} ${SYMFONY_RABBITMQ_PORT:-5672} > /dev/null)
    do
        sleep $timeout
        timeout=$(( $timeout + 1 ))
    done

    echo "[$(date -u)][PHP-FPM] Updating RabbitMQ vhost to match schema..."
    gosu capco php bin/rabbit vhost:mapping:create --host=${SYMFONY_RABBITMQ_HOST:-127.0.0.1} --vhost=${SYMFONY_RABBITMQ_VHOST:-capco}  --user=${SYMFONY_RABBITMQ_LOGIN:-guest} --password=${SYMFONY_RABBITMQ_PASSWORD:-guest} config/rabbitmq.yaml --quiet
    
    RESULT=$?
    if [ $RESULT -eq 0 ]; then
        echo "[$(date -u)][PHP-FPM] RabbitMQ vhost updated!"
    else
        echo "[$(date -u)][PHP-FPM] RabbitMQ vhost update failed because it did not exist yet."

        echo "[$(date -u)][PHP-FPM] Creating RabbitMQ vhost schema..."
        gosu capco php bin/rabbit vhost:mapping:create --host=${SYMFONY_RABBITMQ_HOST:-127.0.0.1} --vhost=${SYMFONY_RABBITMQ_VHOST:-capco}  --user=${SYMFONY_RABBITMQ_LOGIN:-guest} --password=${SYMFONY_RABBITMQ_PASSWORD:-guest} config/rabbitmq.yaml --erase-vhost --quiet
        echo "[$(date -u)][PHP-FPM] RabbitMQ vhost created!"
    fi
    
fi

SYMFONY_REDIS_HOST="${SYMFONY_REDIS_HOST:-127.0.0.1}"
echo "[$(date -u)][PHP-FPM] Waiting Redis..."
while ! (redis-cli -h "${SYMFONY_REDIS_HOST}" PING > /dev/null)
do
    sleep $timeout
    timeout=$(( $timeout + 1 ))
done
echo "[$(date -u)][PHP-FPM] Purging doctrine/pools cache in redis..."
gosu capco php bin/console cache:pool:clear cache.global_clearer
echo "[$(date -u)][PHP-FPM] Purged doctrine/pools cache in redis done"

echo "[$(date -u)][PHP-FPM] Warming up cache and install bundle assets..."
chmod -R 777 var/ && chown -R capco:capco var/ 
gosu capco php -d memory_limit=-1 bin/console cache:warmup --no-debug --env=prod --no-interaction --quiet
gosu capco php -d memory_limit=-1 bin/console assets:install public --symlink --env=prod --no-interaction --quiet
echo "[$(date -u)][PHP-FPM] Cache warmed!"

SYMFONY_DATABASE_NAME=${SYMFONY_DATABASE_NAME:-symfony}
database=`mysql --host=${SYMFONY_DATABASE_HOST:-127.0.0.1} --port=${SYMFONY_DATABASE_PORT:-3306} --user=${SYMFONY_DATABASE_USER:-root} --password=${SYMFONY_DATABASE_PASSWORD} --skip-column-names -e "SHOW DATABASES LIKE '${SYMFONY_DATABASE_NAME}'"`
if [ "$database" == "$SYMFONY_DATABASE_NAME" ]; then
    echo "[$(date -u)][PHP-FPM] Database ${SYMFONY_DATABASE_NAME} already exists."
    gosu capco php -d memory_limit=-1 bin/console doctrine:migrations:sync-metadata-storage --env=prod --no-interaction
    upToDate=`php bin/console doctrine:migrations:up-to-date --env=prod --no-interaction | grep -o "Up-to-date!" | wc -l`
    if [ "$upToDate" == "1" ]; then
      echo "[$(date -u)][PHP-FPM] No migrations to execute."
    else
        echo "[$(date -u)][PHP-FPM] Migrating an existing database..."
        retry=0
        maxRetries=3
        until [ ${retry} -ge ${maxRetries} ]
        do
            su capco -c "php -d memory_limit=-1 bin/console doctrine:migrations:migrate --env=prod --no-interaction" && break
            echo "[$(date -u)][PHP-FPM] Database migration failed... Exiting" >&2
            retry=$[${retry}+1]
        done
        if [ ${retry} -ge ${maxRetries} ]; then
            echo "[$(date -u)][PHP-FPM] Database migration failed after ${maxRetries} attempts!"
            # Kill docker
            kill -9 1
        fi
    fi
else
    echo "[$(date -u)][PHP-FPM] Database ${SYMFONY_DATABASE_NAME} does not exist yet."
    echo "[$(date -u)][PHP-FPM] Cleaning ElasticSearch index..."
    while ! curl http://${SYMFONY_ELASTICSEARCH_HOST:-127.0.0.1}:${SYMFONY_ELASTICSEARCH_PORT:-9200} > /dev/null 2>&1;
      do sleep $timeout
    done
    curl -XDELETE http://${SYMFONY_ELASTICSEARCH_HOST:-127.0.0.1}:${SYMFONY_ELASTICSEARCH_PORT:-9200}/${SYMFONY_ELASTICSEARCH_INDEX:-capco} > /dev/null 2>&1
    echo "[$(date -u)][PHP-FPM] Creating a new database with production data..."
    gosu capco php bin/console doctrine:database:create --env=prod --no-interaction --quiet
    gosu capco php bin/console doctrine:migrations:sync-metadata-storage --env=prod --no-interaction --quiet
    chmod -R 777 var/ && chown -R capco:capco var/
    gosu capco php bin/console doctrine:schema:create --env=prod --no-interaction --quiet
    chmod -R 777 var/ && chown -R capco:capco var/
    gosu capco php bin/console doctrine:migrations:version --add --all --env=prod --no-interaction --quiet
    chmod -R 777 var/ && chown -R capco:capco var/
    if [[ -n "${QA_FIXTURES}" && "${QA_FIXTURES}" == "true" ]]; then
        echo "[$(date -u)][PHP-FPM] FIXTURES_QA is set to 'true', loading ‘dev’ fixtures, then appending ‘qa’ fixtures."
        gosu capco php bin/console hautelook:fixtures:load -e dev --no-interaction
        gosu capco php bin/console hautelook:fixtures:load -e qa --no-interaction --append
    else
        echo "[$(date -u)][PHP-FPM] Loading ‘prod’ fixtures."
        gosu capco php bin/console capco:load-prod-data --force --env=prod --no-interaction --quiet
    fi
fi
echo "[$(date -u)][PHP-FPM] Database is ready!"

echo "[$(date -u)][PHP-FPM] Generating map token for Mapbox"
gosu capco php bin/console capco:generate:map-token MAPBOX --no-debug --env=prod --no-interaction --quiet

if [[ ! -f config/jwt/private.pem ]]; then
    echo "[$(date -u)][PHP-FPM] Generating JWT keypair"
    gosu capco openssl genrsa -passout pass:${SYMFONY_JWT_PASSPHRASE} -out config/jwt/private.pem
    gosu capco openssl rsa -in config/jwt/private.pem -passin pass:${SYMFONY_JWT_PASSPHRASE} -pubout -out config/jwt/public.pem
fi

echo "[$(date -u)][PHP-FPM] Checking ES mapping..."
gosu capco php bin/console capco:es:mapping
mappingUpToDate=$?
if [ $mappingUpToDate -eq 1 ]; then
    echo "[$(date -u)][PHP-FPM] Migrate mapping..."
    gosu capco php bin/console capco:es:migrate
    echo "[$(date -u)][PHP-FPM] Mapping is up to date."
elif [ $mappingUpToDate -eq 0 ]; then
    echo "[$(date -u)][PHP-FPM] Starting daemon to populate elasticsearch..."
    /etc/service/php-fpm/populate_elasticsearch_index &
    echo "[$(date -u)][PHP-FPM] Daemon started!"
else
    echo "[$(date -u)][PHP-FPM] Nothing to migrate..."
fi

echo "[$(date -u)][PHP-FPM] Started!"
exec /usr/sbin/php-fpm8.1 --fpm-config /etc/service/php-fpm/fpm.conf --force-stderr
