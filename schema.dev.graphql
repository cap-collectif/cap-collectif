"""An abstract debate argument."""
interface AbstractDebateArgument {
  """The ID of an object."""
  id: ID!

  """Whether or not the contribution is trashed."""
  trashed: Boolean!

  """Identifies the trashed visibility."""
  trashedStatus: TrashableStatus

  """Identifies the moment the moderator trashed the contribution."""
  trashedAt: DateTime

  """Identifies the reason why the moderator trashed the contribution."""
  trashedReason: String

  """Whether or not the entity is published."""
  published: Boolean!

  """Identifies when the entity can no more be published."""
  publishableUntil: DateTime

  """Identifies when the entity was published at."""
  publishedAt: DateTime

  """Reason that the entity is not published."""
  notPublishedReason: NotPublishedReason

  """True if the viewer has reported the argument."""
  viewerHasReport: Boolean!

  """The reportings related to the reportable."""
  reportings(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
    orderBy: ReportingOrder = {field: CREATED_AT, direction: DESC}
  ): ReportingConnection!

  """Check if a user can report"""
  viewerCanReport: Boolean!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!

  """
  Return the related contribution if the contribution is related to another.
  """
  related: Contribution

  """The url of the debate"""
  url: URI!

  """The content of the argument."""
  body: String!

  """The debate related to the argument."""
  debate: Debate!

  """Whether the argument is for or against."""
  type: ForOrAgainstValue!

  """IP of the author"""
  ipAddress: IP

  """The origin of a debate's argument"""
  origin: ContributionOrigin!

  """The URL of widget from which the debate's argument was added, if any."""
  widgetOriginUrl: URI

  """The formatted geolocalization informations."""
  geoip: FormattedGeolocalization

  """True if the viewer has upvoted the argument."""
  viewerHasVote: Boolean!

  """The upvotes on the argument."""
  votes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """Order by."""
    orderBy: DebateArgumentVoteOrder = {field: PUBLISHED_AT, direction: DESC}
  ): DebateArgumentVoteConnection!
}

"""An abstract debate vote."""
interface AbstractDebateVote {
  """The ID of an object"""
  id: ID!

  """The date of the vote."""
  createdAt: DateTime!

  """Whether or not the vote is published."""
  published: Boolean!

  """The date when the vote was published at."""
  publishedAt: DateTime

  """The value of the vote."""
  type: ForOrAgainstValue!

  """The debate of the vote."""
  debate: Debate!

  """IP of the voter"""
  ipAddress: IP

  """The origin of a debate's vote"""
  origin: ContributionOrigin!

  """The URL of widget from which the debate's vote was added, if any."""
  widgetOriginUrl: URI
}

"""Available errors on `AddAnonymousReply` mutation."""
enum AddAnonymousReplyErrorCode {
  """The submited reply is not valid."""
  INVALID_FORM
}

input AddAnonymousReplyInput {
  """The id of the questionnaire"""
  questionnaireId: ID!

  """The responses to the questionnaire questions"""
  responses: [ResponseInput!]!

  """The participant email"""
  participantEmail: Email
  clientMutationId: String
}

type AddAnonymousReplyPayload {
  """The created reply"""
  reply: AnonymousReply

  """The associated questionnaire"""
  questionnaire: Questionnaire

  """The reply token"""
  token: String

  """An error"""
  errorCode: AddAnonymousReplyErrorCode
  clientMutationId: String
}

input AddArgumentInput {
  """The Argumentable ID to argue."""
  argumentableId: ID!

  """The contents of the argument body."""
  body: String!

  """The type of the argument."""
  type: ArgumentValue!
  clientMutationId: String
}

type AddArgumentPayload {
  """The newly created argument."""
  argument: Argument

  """The edge from the argumentable's arguments connection."""
  argumentEdge: ArgumentEdge

  """An unsuccessful mutation will return one or more `UserError` objects."""
  userErrors: [UserError!]!
  clientMutationId: String
}

input AddArgumentVoteInput {
  """The Node ID of the argument to vote."""
  argumentId: ID!
  clientMutationId: String
}

type AddArgumentVotePayload {
  voteEdge: ArgumentVoteEdge
  viewer: User!
  clientMutationId: String
}

input AddCommentInput {
  """The Commentable ID of the subject to comment."""
  commentableId: ID!

  """The contents of the comment."""
  body: String!
  authorName: String
  authorEmail: String
  clientMutationId: String
}

type AddCommentPayload {
  """The edge from the commentable's comment connection."""
  commentEdge: CommentEdge

  """The commentable."""
  commentable: Commentable

  """An unsuccessful mutation will return one or more `UserError` objects."""
  userErrors: [UserError!]!
  clientMutationId: String
}

input AddCommentVoteInput {
  """The Node ID of the comment to vote."""
  commentId: ID!
  clientMutationId: String
}

type AddCommentVotePayload {
  voteEdge: CommentVoteEdge
  viewer: User!
  clientMutationId: String
}

input AddContactFormInput {
  """Email of the interlocutor of the contact form."""
  email: String!
  translations: [ContactFormTranslationInput!]!

  """Is the body using Jodit Wysiwyg."""
  bodyUsingJoditWysiwyg: Boolean

  """Is the confidentiality using Jodit Wysiwyg."""
  confidentialityUsingJoditWysiwyg: Boolean
  clientMutationId: String
}

type AddContactFormPayload {
  """The contact form created."""
  contactForm: ContactForm!
  clientMutationId: String
}

"""Available errors for an `addDebateAnonymousVote` mutation."""
enum AddDebateAnonymousVoteErrorCode {
  """No `Debate` match your `debateId`."""
  UNKNOWN_DEBATE

  """The debate is closed and be voted."""
  CLOSED_DEBATE

  """The given captcha is invalid."""
  INVALID_CAPTCHA
}

input AddDebateAnonymousVoteInput {
  """The Node ID of the `Debate` to vote on."""
  debateId: ID!

  """Whether the vote will be `FOR` or `AGAINST`."""
  type: ForOrAgainstValue!

  """The captcha verification."""
  captcha: String!

  """The URL of widget from which the debate's argument was added, if any."""
  widgetOriginURI: URI = null
  clientMutationId: String
}

type AddDebateAnonymousVotePayload {
  """The token of the newly created anonymous vote."""
  token: String

  """The newly created anonymous vote."""
  debateAnonymousVote: DebateAnonymousVote

  """An unsuccessful mutation will return an error."""
  errorCode: AddDebateAnonymousVoteErrorCode
  clientMutationId: String
}

"""Available errors for an `addDebateArgumentVote` mutation."""
enum AddDebateArgumentVoteErrorCode {
  """No `DebateArgument` match your id."""
  UNKNOWN_DEBATE_ARGUMENT

  """The debate is closed and arguments cannot be voted for."""
  CLOSED_DEBATE

  """Viewer has already voted for this argument."""
  ALREADY_VOTED
}

input AddDebateArgumentVoteInput {
  """The id of the `DebateArgument` to vote for."""
  debateArgumentId: ID!

  """The URL of widget from which the debate's argument was added, if any."""
  widgetOriginURI: URI = null
  clientMutationId: String
}

type AddDebateArgumentVotePayload {
  """The argument that had just been upvoted."""
  debateArgument: AbstractDebateArgument

  """The vote just added."""
  debateArgumentVote: DebateArgumentVote

  """An unsuccessful mutation will return an error."""
  errorCode: AddDebateArgumentVoteErrorCode
  clientMutationId: String
}

"""Available errors for an `addDebateOpinion` mutation."""
enum AddDebateOpinionErrorCode {
  """No `Debate` match your `debateId`."""
  UNKNOWN_DEBATE

  """The provided values are not valid."""
  INVALID_FORM
}

input AddDebateOpinionInput {
  """The Node ID of the `Debate` where the opinion belongs."""
  debateId: ID!

  """The title value of the opinion."""
  title: String!

  """The body value of the opinion."""
  body: HTML!

  """Is the body using Jodit Wysiwyg."""
  bodyUsingJoditWysiwyg: Boolean

  """The Node ID of a `User`. The author of the opinion."""
  author: ID!

  """Whether the opinion will be `FOR` or `AGAINST`."""
  type: ForOrAgainstValue!
  clientMutationId: String
}

type AddDebateOpinionPayload {
  """The newly created opinion."""
  debateOpinion: DebateOpinion

  """An unsuccessful mutation will return an error."""
  errorCode: AddDebateOpinionErrorCode
  clientMutationId: String
}

"""Available errors for an `addDebateVote` mutation."""
enum AddDebateVoteErrorCode {
  """No `Debate` match your `debateId`."""
  UNKNOWN_DEBATE

  """The debate is closed and be voted."""
  CLOSED_DEBATE
}

input AddDebateVoteInput {
  """The Node ID of the `Debate` to vote on."""
  debateId: ID!

  """Whether the vote will be `FOR` or `AGAINST`."""
  type: ForOrAgainstValue!

  """The URL of widget from which the debate's vote was added, if any."""
  widgetOriginURI: URI = null
  clientMutationId: String
}

type AddDebateVotePayload {
  """The newly created Vote."""
  debateVote: DebateVote

  """If there was an existing vote, the id of the remove vote."""
  previousVoteId: ID

  """An unsuccessful mutation will return an error."""
  errorCode: AddDebateVoteErrorCode
  clientMutationId: String
}

input AddEventInput {
  """When the event start."""
  startAt: DateTime!

  """When the event end."""
  endAt: DateTime
  translations: [EventTranslationInput!]!
  clientMutationId: String

  """Whether or not this event is published."""
  enabled: Boolean = true

  """The media to illustrate the event."""
  media: ID

  """Whether or not this event is commentable."""
  commentable: Boolean = true

  """The contents of the event addressJson."""
  addressJson: String

  """The contents of the event customCode."""
  customCode: String

  """An array of Node IDs of projects associated to this event."""
  projects: [ID]

  """An array of Node IDs of themes associated to this event."""
  themes: [ID]

  """Whether or not this event is allow registrations."""
  guestListEnabled: Boolean! = false

  """The Node ID of the author for this event."""
  author: ID

  """Is the body using Jodit Wysiwyg."""
  bodyUsingJoditWysiwyg: Boolean

  """Author of event agree to use personal data for event only"""
  authorAgreeToUsePersonalDataForEventOnly: Boolean

  """Admin authorize data transfer"""
  adminAuthorizeDataTransfer: Boolean

  """An array of Node IDs of steps associated to this event."""
  steps: [ID!]

  """Whether or not this event is registrations measurable."""
  measurable: Boolean! = false

  """If measurable what is the max allowed registrations"""
  maxRegistrations: Int

  """
  ID of the owner of the event, user or organization. If null, fallback on the viewer.
  """
  owner: ID

  """An array of Node IDs of districts associated to this event."""
  districts: [ID]
}

type AddEventPayload {
  """The edge from the events connection."""
  eventEdge: EventEdge

  """An unsuccessful mutation will return one or more `UserError` objects."""
  userErrors: [UserError!]!
  clientMutationId: String
}

input AddEventsInput {
  """A list of events input to import."""
  events: [EventInput!]!

  """
  This option is useful if you want to test your import. Set it to true if you want to import definitively.
  """
  dryRun: Boolean!
  clientMutationId: String
}

type AddEventsPayload {
  """List of imported events."""
  importedEvents: [Event!]!

  """List of emails that didn't match an existing user."""
  notFoundEmails: [Email]!

  """List of themes ID that didn't match an existing themes."""
  notFoundThemes: [ID]!

  """List of projects ID that didn't match an existing projects."""
  notFoundProjects: [ID]!

  """List of districts ID that didn't match an existing districts."""
  notFoundDistricts: [ID]!

  """List of dates that didn't got the good format"""
  brokenDates: [String]!
  clientMutationId: String
}

input AddMediatorVotesInput {
  mediatorId: ID!
  stepId: ID!
  proposals: [ID]!
  participantInfos: ParticipantInfosInput!
  clientMutationId: String
}

type AddMediatorVotesPayload {
  mediator: Mediator!
  participant: Participant!
  clientMutationId: String
}

input AddMediatorsInput {
  """List of users to add as mediator."""
  usersId: [ID]!

  """The step attached to the mediator."""
  stepId: ID!
  clientMutationId: String
}

type AddMediatorsPayload {
  mediators: MediatorConnection!
  step: Step!
  clientMutationId: String
}

input AddOpinionVoteInput {
  """The Node ID of the opinion/version to vote."""
  opinionId: ID!

  """The vote value."""
  value: YesNoPairedVoteValue!
  clientMutationId: String
}

type AddOpinionVotePayload {
  vote: YesNoPairedVote
  voteEdge: YesNoPairedVoteEdge
  viewer: User!
  previousVoteId: ID
  clientMutationId: String
}

input AddOrganizationInput {
  translations: [UpdateOrganizationTranslationInput!]
  clientMutationId: String
}

type AddOrganizationPayload {
  """The newly created organization."""
  organization: Organization
  clientMutationId: String
}

input AddProposalNewsInput {
  """The Node ID of the proposal to add news."""
  proposalId: ID!
  translations: [NewsTranslationInput!]!

  """Current media id"""
  media: ID

  """Is the body using Jodit Wysiwyg."""
  bodyUsingJoditWysiwyg: Boolean
  clientMutationId: String
}

type AddProposalNewsPayload {
  """The new post."""
  proposalPost: Post

  """An unsuccessful mutation will return an error message"""
  errorCode: ProposalNewsErrorCode

  """the proposal attached to the news"""
  proposal: Proposal

  """the URL of proposalNews posted"""
  postURL: URI
  clientMutationId: String
}

"""Available errors for an `addProposalSmsVote` mutation."""
enum AddProposalSmsVoteErrorCode {
  """The proposal is already voted by this phone number."""
  PROPOSAL_ALREADY_VOTED

  """Max votes limit reached."""
  VOTE_LIMIT_REACHED

  """Phone not found for the given token."""
  PHONE_NOT_FOUND

  """
  The proposal is already voted by another user/participant with the given number.
  """
  PHONE_ALREADY_USED
}

input AddProposalSmsVoteInput {
  """The Node ID of the proposal to vote."""
  proposalId: ID!

  """The Node ID of the step."""
  stepId: ID!

  """The token associated to this number."""
  token: String!

  """Whether or not the user consents to receive communications by sms."""
  consentSmsCommunication: Boolean!
  clientMutationId: String
}

type AddProposalSmsVotePayload {
  vote: ProposalSmsVote
  voteEdge: ProposalVoteEdge
  errorCode: AddProposalSmsVoteErrorCode
  votes: ProposalSmsVoteConnection
  clientMutationId: String
}

"""Available errors for an `addProposalVote` mutation."""
enum AddProposalVoteErrorCode {
  """
  The proposal is already voted by another user/participant with the given number.
  """
  PHONE_ALREADY_USED
}

input AddProposalVoteInput {
  """The Node ID of the proposal to vote."""
  proposalId: ID!

  """The Node ID of the step."""
  stepId: ID!

  """The vote will be anonymous."""
  anonymously: Boolean = false
  clientMutationId: String
}

type AddProposalVotePayload {
  vote: ProposalUserVote
  viewer: User
  voteEdge: ProposalVoteEdge
  errorCode: AddProposalVoteErrorCode
  clientMutationId: String
}

input AddProposalsFromCsvInput {
  """The id of the form form proposal"""
  proposalFormId: ID!

  """The ID of csv file uploaded to import"""
  csvToImport: ID!

  """
  This option is useful if you want to test your import. Set it to false if you want to import definitively.
  """
  dryRun: Boolean! = true

  """the char mark to delimit column in csv"""
  delimiter: String = ";"
  clientMutationId: String
}

type AddProposalsFromCsvPayload {
  """List of imported proposals."""
  importedProposals: ProposalConnection

  """List of imported proposals."""
  importedProposalsArray: [Proposal]

  """List of bad lines."""
  badLines: [Int]!

  """Number of doubloon"""
  duplicates: [Int]!

  """Lines with missing data mandatory"""
  mandatoryMissing: [Int]!

  """code of error"""
  errorCode: ProposalImportsErrorCode

  """Number of importable proposals."""
  importableProposals: Int!

  """the project proposals"""
  project: Project
  clientMutationId: String
}

"""Available errors on step assignment of proposals"""
enum AddProposalsToStepsErrorCode {
  """No proposal match your id"""
  NO_VALID_PROPOSAL

  """No step match your id or it does not fit the selected proposals"""
  NO_VALID_STEP
}

input AddProposalsToStepsInput {
  """The ids of the proposals to add to steps"""
  proposalIds: [ID!]!

  """The ids of the steps to which proposals should be moved"""
  stepIds: [ID!]!
  clientMutationId: String
}

type AddProposalsToStepsPayload {
  """Connection of assigned proposals"""
  proposals: ProposalConnection

  """An unsuccessful mutation will return an error message"""
  error: AddProposalsToStepsErrorCode

  """The steps to which proposals have been moved."""
  steps: [Step!]!
  clientMutationId: String
}

"""Available errors on addSmsCredit mutation."""
enum AddSmsCreditErrorCode {
  """The given order is already processed."""
  ORDER_ALREADY_PROCESSED

  """The given order is not found."""
  SMS_ORDER_NOT_FOUND

  """Error occured while calling twilio API."""
  TWILIO_API_ERROR
}

input AddSmsCreditInput {
  """The amount to credit."""
  amount: Int!

  """The order id to process."""
  smsOrder: ID!
  clientMutationId: String
}

type AddSmsCreditPayload {
  """The created sms credit."""
  smsCredit: SmsCredit

  """Available errors for the mutation."""
  errorCode: AddSmsCreditErrorCode
  clientMutationId: String
}

input AddSourceInput {
  """The Sourceable ID to source."""
  sourceableId: ID!

  """The contents of the source body."""
  body: String!

  """The category of the source."""
  category: ID!
  link: URI!
  title: String!
  clientMutationId: String
}

type AddSourcePayload {
  """The newly created source."""
  source: Source

  """The edge from the sourceable's sources connection."""
  sourceEdge: SourceEdge

  """An unsuccessful mutation will return one or more `UserError` objects."""
  userErrors: [UserError!]!
  clientMutationId: String
}

input AddSourceVoteInput {
  """The Node ID of the source to vote."""
  sourceId: ID!
  clientMutationId: String
}

type AddSourceVotePayload {
  voteEdge: SourceVoteEdge
  viewer: User!
  clientMutationId: String
}

input AddStepInput {
  """The project linked to the step."""
  projectId: ID!
  clientMutationId: String
}

type AddStepPayload {
  step: Step!
  clientMutationId: String
}

"""Available errors for an `addUserReply` mutation."""
enum AddUserReplyErrorCode {
  """the viewer does not meet requirements"""
  REQUIREMENTS_NOT_MET
}

input AddUserReplyInput {
  """The id of the questionnaire"""
  questionnaireId: ID!

  """The responses to the questionnaire questions"""
  responses: [ResponseInput]

  """Anonymous or not."""
  private: Boolean

  """If true will create a draft reply."""
  draft: Boolean! = false
  clientMutationId: String
}

type AddUserReplyPayload {
  reply: UserReply
  questionnaire: Questionnaire
  errorCode: AddUserReplyErrorCode
  clientMutationId: String
}

input AddUsersToGroupFromEmailInput {
  """A list of email(s)."""
  emails: [Email!]!

  """
  This option is useful if you want to test your emails list. Set it to true if you want to import definitively.
  """
  dryRun: Boolean!

  """The Node ID of the group."""
  groupId: ID!
  clientMutationId: String
}

type AddUsersToGroupFromEmailPayload {
  """List of imported users."""
  importedUsers: [User]!

  """List of emails that didn't match an existing user."""
  notFoundEmails: [Email]!

  """
  If an email from your list is already associated to a user who is in the chosen group, it will be in this field.
  """
  alreadyImportedUsers: [User]!
  clientMutationId: String
}

input AddVersionInput {
  """The concerned opinion id."""
  opinionId: ID!
  title: String!
  body: HTML!

  """Is the body using Jodit Wysiwyg."""
  bodyUsingJoditWysiwyg: Boolean
  comment: HTML

  """Is the comment using Jodit Wysiwyg."""
  commentUsingJoditWysiwyg: Boolean
  clientMutationId: String
}

type AddVersionPayload {
  version: Version
  versionEdge: VersionEdge

  """An unsuccessful mutation will return one or more `UserError` objects."""
  userErrors: [UserError]
  clientMutationId: String
}

"""Represent an aggregrated result that should be displayed in a chart"""
type AggregatedResult {
  """A unique key that distinguish one result from another"""
  key: String!

  """How many objects are associated to the key"""
  totalCount: Int!
}

input AnalyseProposalAnalysisInput {
  """The id of the proposal to analyse."""
  proposalId: ID!

  """The responses from the evaluation form."""
  responses: [ResponseInput!]!
  clientMutationId: String

  """The analysis decision taken about the proposal"""
  decision: ProposalAnalysisDecision!
}

type AnalyseProposalAnalysisPayload {
  """The changed proposal analysis."""
  analysis: ProposalAnalysis

  """Contains the error code if one occurred."""
  errorCode: ProposalStatementErrorCode
  clientMutationId: String
}

"""An analysis configuration."""
type AnalysisConfiguration {
  """The ID of an object."""
  id: ID!

  """The related ProposalForm."""
  proposalForm: ProposalForm!

  """Activate cost estimation on evaluation form."""
  costEstimationEnabled: Boolean!

  """The evaluation form of the analysis"""
  evaluationForm: Questionnaire

  """The step on which the analysis is based on."""
  analysisStep: Step

  """The date on which the related decision will become effective"""
  effectiveDate: DateTime

  """Indicates whether or not a proposal decision is immediately effective"""
  isImmediatelyEffective: Boolean!

  """The available favourable statuses to apply on contributions."""
  favourableStatus: ProposalStepStatus

  """The unfavourable status to apply on contributions."""
  unfavourableStatuses: [ProposalStepStatus!]

  """The step to which proposals will be moved."""
  moveToSelectionStep: SelectionStep

  """The status to apply on next step."""
  selectionStepStatus: ProposalStepStatus

  """The creation date."""
  createdAt: DateTime!

  """The last update date."""
  updatedAt: DateTime

  """A text to explain the analysis process."""
  body: HTML

  """Is the body using Jodit Wysiwyg."""
  bodyUsingJoditWysiwyg: Boolean!

  """
  Indicates whether or not a proposal has been processed on effectiveDate
  """
  effectiveDateProcessed: Boolean
}

"""Represents an answer from a non-registered to a questionnaire."""
type AnonymousReply implements Reply & Node {
  """The ID of an object"""
  id: ID!

  """
  Return the related contribution if the contribution is related to another.
  """
  related: Contribution

  """The url of the reply."""
  url: URI!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!

  """Whether or not the entity is published."""
  published: Boolean!

  """Identifies when the entity can no more be published."""
  publishableUntil: DateTime

  """Identifies when the entity was published at."""
  publishedAt: DateTime

  """Reason that the entity is not published."""
  notPublishedReason: NotPublishedReason

  """The responses of the reply."""
  responses: [Response]!

  """Identifies the form where the contribution was submitted."""
  questionnaire: Questionnaire!

  """The admin url of the reply."""
  adminUrl: URI

  """The status of the reply."""
  status: ReplyStatus
  participantEmail: Email
}

"""A contribution"""
type Answer {
  """Identifies the date and time when the object was created."""
  createdAt: DateTime!

  """Identifies the contribution title."""
  title: String

  """Identifies the body of the contribution."""
  body: HTML
  author: User
}

union AnswerOrPost = Answer | Post

"""A contribution"""
type Appendix {
  """Identifies the body of the contribution."""
  body: HTML

  """Is the body using Jodit Wysiwyg."""
  bodyUsingJoditWysiwyg: Boolean!

  """Identifies the body of the contribution rendered to text."""
  bodyText: String
  appendixType: AppendixType!
}

"""A contribution"""
input AppendixInput {
  """Identifies the body of the contribution."""
  body: HTML

  """Is the body using Jodit Wysiwyg."""
  bodyUsingJoditWysiwyg: Boolean
  appendixType: ID
}

"""An AppendixType"""
type AppendixType {
  title: String!
}

"""Available errors on status assignment of proposals"""
enum ApplyProposalStatusErrorCode {
  """No status match your id"""
  NO_VALID_STATUS

  """No proposal match your id or it does not fit the selected status"""
  NO_VALID_PROPOSAL
}

input ApplyProposalStatusInput {
  """The ids of the proposals to add to steps"""
  proposalIds: [ID!]!

  """
  The id of the status to apply or nothing if the status is to be removed
  """
  statusId: ID
  clientMutationId: String
}

type ApplyProposalStatusPayload {
  """Connection of assigned proposals"""
  proposals: ProposalConnection

  """An unsuccessful mutation will return an error message"""
  error: ApplyProposalStatusErrorCode

  """The status applied or nothing if the status was removed."""
  status: ProposalStepStatus
  clientMutationId: String
}

"""An argument"""
type Argument implements Node & Publishable & Contribution & Trashable & UniformResourceLocatable & Reportable & ContributionWithAuthor & EditableContribution {
  """Does the viewer already submitted a report ?"""
  viewerHasReport: Boolean!

  """The reportings related to the reportable."""
  reportings(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
    orderBy: ReportingOrder = {field: CREATED_AT, direction: DESC}
  ): ReportingConnection!

  """Check if a user can report"""
  viewerCanReport: Boolean!

  """The author of the contribution."""
  author: User!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime

  """The ID of an object."""
  id: ID!

  """Whether or not the entity is published."""
  published: Boolean!

  """Identifies when the entity can no more be published."""
  publishableUntil: DateTime

  """Identifies when the entity was published at."""
  publishedAt: DateTime

  """Reason that the entity is not published."""
  notPublishedReason: NotPublishedReason

  """Whether or not the contribution is trashed."""
  trashed: Boolean!

  """Identifies the trashed visibility."""
  trashedStatus: TrashableStatus

  """Identifies the moment the moderator trashed the contribution."""
  trashedAt: DateTime

  """Identifies the reason why the moderator trashed the contribution."""
  trashedReason: String

  """Url of the contribution"""
  url: URI!

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!

  """
  Return the related contribution if the contribution is related to another.
  """
  related: Contribution

  """The type."""
  type: ArgumentValue!

  """The content of the argument."""
  body: String!
  votes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
  ): ArgumentVoteConnection!

  """The kind of contribution (argument)."""
  kind: String!
  viewerHasVote: Boolean!
  viewerVote: ArgumentVote
  contribuable: Boolean!
  step: ConsultationStep!
}

"""A connection to a list of items."""
type ArgumentConnection {
  totalCount: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [ArgumentEdge]
}

"""An edge in a connection."""
type ArgumentEdge {
  """The item at the end of the edge."""
  node: Argument

  """A cursor for use in pagination."""
  cursor: String!
}

"""Ways in which argument connections can be ordered."""
input ArgumentOrder {
  """The field in which to order nodes by."""
  field: ArgumentOrderField!

  """The direction in which to order nodes."""
  direction: OrderDirection! = ASC
}

"""Properties by which argument connections can be ordered"""
enum ArgumentOrderField {
  """Allows ordering a list of arguments by when they were published."""
  PUBLISHED_AT

  """Allows ordering a list of arguments by the number of votes it have."""
  VOTES

  """Allows ordering a list of arguments by when they were created."""
  CREATED_AT

  """Allows ordering a list of arguments by when they were updated."""
  UPDATED_AT
}

"""Value of an argument"""
enum ArgumentValue {
  """AGAINST argument"""
  AGAINST

  """FOR argument"""
  FOR
}

"""A contribution with an author"""
type ArgumentVote implements Vote & Publishable & Contribution {
  """The ID of an object"""
  id: ID!

  """The date of the vote."""
  createdAt: DateTime!

  """The author of the contribution."""
  author: User

  """
  Return the related contribution if the contribution is related to another.
  """
  related: Argument

  """Returns Type of vote"""
  kind: String!

  """Returns if vote is accounted or not"""
  isAccounted: Boolean!

  """The participant of the contribution."""
  participant: Participant

  """Whether or not the entity is published."""
  published: Boolean!

  """Identifies when the entity can no more be published."""
  publishableUntil: DateTime

  """Identifies when the entity was published at."""
  publishedAt: DateTime

  """Reason that the entity is not published."""
  notPublishedReason: NotPublishedReason

  """Url of the contribution"""
  url: URI!
}

"""A connection to a list of items."""
type ArgumentVoteConnection {
  totalCount: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [ArgumentVoteEdge]
}

"""An edge in a connection."""
type ArgumentVoteEdge {
  """The item at the end of the edge."""
  node: ArgumentVote

  """A cursor for use in pagination."""
  cursor: String!
}

"""An argumentable"""
interface Argumentable {
  """The ID of an object"""
  id: ID!
  contribuable: Boolean!

  """The arguments related to the argumentable."""
  arguments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
    orderBy: ArgumentOrder = {field: PUBLISHED_AT, direction: DESC}

    """If provided, returns the arguments of this particular type."""
    type: ArgumentValue

    """The connection will return the trashed results too."""
    includeTrashed: Boolean = false
  ): ArgumentConnection!

  """The unpublished arguments of to the viewer."""
  viewerArgumentsUnpublished(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """If provided, returns the arguments of this particular type."""
    type: ArgumentValue
  ): ArgumentConnection
}

"""Available errors on proposal related mutations."""
enum AskProposalRevisionErrorCode {
  """The given proposal does not exist."""
  NON_EXISTING_PROPOSAL

  """The provided values are not valid."""
  INVALID_FORM
}

input AskProposalRevisionInput {
  """The id of the proposal to be revised."""
  proposalId: ID!

  """The reason to revise the propose"""
  reason: String!

  """The datetime when revision expire"""
  expiresAt: DateTime!

  """The information to resolve revision"""
  body: HTML!

  """Is the body using Jodit Wysiwyg."""
  bodyUsingJoditWysiwyg: Boolean
  clientMutationId: String
}

type AskProposalRevisionPayload {
  """The proposal"""
  proposal: Proposal

  """Contains the error code if one occurred."""
  errorCode: AskProposalRevisionErrorCode
  clientMutationId: String
}

input AssignAnalystsToProposalsInput {
  """Assign analyst list to a list of proposals."""
  proposalIds: [ID!]!

  """The concerned list of analysts"""
  analystIds: [ID!]!
  clientMutationId: String
}

type AssignAnalystsToProposalsPayload {
  """Connection of assigned proposals"""
  proposals: ProposalConnection

  """Contains the error code if one occurred."""
  errorCode: ProposalAssignmentErrorCode
  viewer: User!
  clientMutationId: String
}

input AssignDecisionMakerToProposalsInput {
  """Assign a decision maker to a list of proposals."""
  proposalIds: [ID!]!

  """The concerned decision maker id."""
  decisionMakerId: ID
  clientMutationId: String
}

type AssignDecisionMakerToProposalsPayload {
  """Connection of assigned proposals"""
  proposals: ProposalConnection

  """Contains the error code if one occurred."""
  errorCode: ProposalAssignmentErrorCode
  clientMutationId: String
}

input AssignSupervisorToProposalsInput {
  """Assign a supervisor to a list of proposals."""
  proposalIds: [ID!]!

  """The concerned supervisor id."""
  supervisorId: ID
  clientMutationId: String
}

type AssignSupervisorToProposalsPayload {
  """Connection of assigned proposals"""
  proposals: ProposalConnection

  """Contains the error code if one occurred."""
  errorCode: ProposalAssignmentErrorCode
  clientMutationId: String
}

"""Represent an author."""
interface Author {
  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!

  """Author ID"""
  id: ID!

  """Author username"""
  username: String

  """The author's public profile name."""
  displayName: String!

  """The author's slug"""
  slug: String!
  media: Media

  """Whether or not this author is the authenticated user."""
  isViewer: Boolean!
  url: URI!
  biography: String

  """The author's public avatar URL."""
  avatarUrl: URI
  email: String
  isProjectAdmin: Boolean!
  userType: UserType
}

"""The possible values for a proposal category color"""
enum AvailableProposalCategoryColor {
  COLOR_EF5350
  COLOR_B71C1C
  COLOR_880E4F
  COLOR_C2185B
  COLOR_9C27B0
  COLOR_6A1B9A
  COLOR_673AB7
  COLOR_3F51B5
  COLOR_0D47A1
  COLOR_1E88E5
  COLOR_0097A7
  COLOR_00796B
  COLOR_004D40
  COLOR_1B5E20
  COLOR_43A047
  COLOR_558B2F
  COLOR_827717
  COLOR_FFC107
  COLOR_FF9800
  COLOR_E65100
  COLOR_BF360C
  COLOR_795548
  COLOR_5D4037
  COLOR_3E2723
  COLOR_616161
  COLOR_78909C
  COLOR_455A64
  COLOR_263238
}

"""The possible values for a proposal category icon"""
enum AvailableProposalCategoryIcon {
  GAS_STATION
  BOAT
  EARTH
  TRAVEL
  PASSPORT
  ECONOMY
  PARKING
  COCKTAIL
  RESTAURANT
  FARMER_MARKET
  NETWORK
  MOBILE_PHONE
  COMPANY
  URBANISM
  VILLAGE
  CONSTRUCTION_CONE
  VEGETABLES_PLATE
  GROCERY_SHOPPING
  SHOPPING_BAG
  MEDICAL
  HOSPITAL
  HEALTH
  BICYCLE
  OFFICER
  SURVEILLANCE_CAMERA
  FAMILY_CHILDREN
  FAMILY_WALK_PARK
  FAMILY_CHILD_PLAY_BALL
  BASKETBALL_BALL
  DOG_LEASH
  WATER
  TREE
  PARK_BENCH_LIGHT
  RECYCLE
  BIN
  AGRICULTURE_MACHINE_TRACTOR
  HAND
  SOLIDARITY
  HIERARCHY
  ELDERLY
  PARAPLEGIC
  CAR
  CARPOOLING
  BUS_STATION
  RAILROAD_TRAIN
  BRIEFCASE
  BOOK_FLIP_PAGE
  CULTURE
  OFFICIAL_BUILDING
  GRADUATE
  LIGHT_BULB
  ENERGY
  ICN
  ECOLOGY_LEAF
}

"""Type of sso service"""
enum AvailableSso {
  """FranceConnect sso service"""
  FRANCE_CONNECT

  """Facebook sso service"""
  FACEBOOK
}

input BackgroundStyleInput {
  enabled: Boolean
  color: Color
  opacity: Float
}

input BorderStyleInput {
  enabled: Boolean
  color: Color
  opacity: Float
  size: Int
}

"""CAS SSO Configuration."""
type CASSSOConfiguration implements Node & SSOConfiguration {
  """The ID of an object."""
  id: ID!

  """The name of configured SSO."""
  name: String!

  """Does this configuration is enabled?"""
  enabled: Boolean!

  """Profile URL on the SSO side."""
  profileUrl: URI

  """Whether or not disconnect sso on logout."""
  disconnectSsoOnLogout: Boolean!

  """Version of CAS used."""
  casVersion: CasVersion!

  """URL of the CAS server."""
  casServerUrl: URI!

  """Content of the certificate file."""
  casCertificate: String!
}

type CancelEmailChangePayload {
  """if it succeeded"""
  success: Boolean
  clientMutationId: String
}

"""Available errors when canceling a planned campaign"""
enum CancelEmailingCampaignErrorCode {
  """No campaign match your id"""
  ID_NOT_FOUND

  """The campaign cannot be canceled, it may not be planned"""
  CANNOT_BE_CANCELED
}

input CancelEmailingCampaignInput {
  """Global id of the planned campaign to cancel"""
  id: ID!
  clientMutationId: String
}

type CancelEmailingCampaignPayload {
  """The campaign cancelled"""
  emailingCampaign: EmailingCampaign

  """The error code, if any"""
  error: CancelEmailingCampaignErrorCode
  clientMutationId: String
}

input CancelUserInvitationsInput {
  """The list of invitations to cancel"""
  invitationsEmails: [String!]!
  clientMutationId: String
}

type CancelUserInvitationsPayload {
  """The cancelled invitations IDs"""
  cancelledInvitationsIds: [ID!]!
  clientMutationId: String
}

"""Section carrousel page in admin"""
type CarrouselConfiguration implements Node {
  """The ID of an object."""
  id: ID!

  """The title of the section"""
  title: String!

  """The position of the section in the homepage"""
  position: Int!

  """Whether the section is enabled or not"""
  enabled: Boolean!

  """Whether the legend is enabled on the image or not"""
  isLegendEnabledOnImage: Boolean!

  """The elements of the carrousel"""
  carrouselElements: SectionCarrouselElementConnection!
}

input CarrouselElementInput {
  id: ID

  """The position of the carrousel element."""
  position: Int!

  """The type of the carrousel element."""
  type: CarrouselElementType!

  """The main heading or title displayed on the carrousel element."""
  title: String

  """
  A detailed description providing context or information about the carrousel element.
  """
  description: String

  """
  The URL to which users are redirected when interacting with the carrousel element.
  """
  redirectLink: URI

  """The image displayed on the carrousel element."""
  image: ID

  """
  The text label displayed on the action button of the carrousel element.
  """
  buttonLabel: String

  """
  A toggle indicating whether the carrousel element is visible to users.
  """
  isDisplayed: Boolean

  """Additional data associated with the carrousel element."""
  extraData: ExtraDataInput
}

"""The type of the carrousel element."""
enum CarrouselElementType {
  """Carrousel element is an article."""
  ARTICLE

  """Carrousel element is an event."""
  EVENT

  """Carrousel element is a project."""
  PROJECT

  """Carrousel element is a theme."""
  THEME

  """Carrousel element is defined by the user."""
  CUSTOM
}

"""Allowed versions of cas."""
enum CasVersion {
  v1
  v2
  v3
}

"""A category image"""
type CategoryImage {
  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  id: ID!

  """The associated media of the site image"""
  image: Media

  """Is image a predefined image (true) or personalized image (false)"""
  isDefault: Boolean!
}

"""Ordering options for categories returned from the connection."""
enum CategoryOrderField {
  """Allows ordering a list of categories in an alphabetical order."""
  ALPHABETICAL
}

input ChangeArgumentInput {
  """The argument Node id."""
  argumentId: ID!

  """The contents of the argument body."""
  body: String!
  clientMutationId: String
}

type ChangeArgumentPayload {
  argument: Argument!
  clientMutationId: String
}

input ChangeCollectStatusInput {
  statusId: ID

  """The proposal id"""
  proposalId: ID!
  clientMutationId: String
}

type ChangeCollectStatusPayload {
  proposal: Proposal!
  clientMutationId: String
}

input ChangeDistrictInput {
  """The district id"""
  districtId: ID!
  geojson: GeoJSON
  displayedOnMap: Boolean
  name: String
  titleOnMap: String
  clientMutationId: String
}

type ChangeDistrictPayload {
  district: ProposalDistrict!
  clientMutationId: String
}

input ChangeEventInput {
  """When the event start."""
  startAt: DateTime!

  """When the event end."""
  endAt: DateTime
  translations: [EventTranslationInput!]!
  clientMutationId: String

  """Whether or not this event is published."""
  enabled: Boolean = true

  """The media to illustrate the event."""
  media: ID

  """Whether or not this event is commentable."""
  commentable: Boolean = true

  """The contents of the event addressJson."""
  addressJson: String

  """The contents of the event customCode."""
  customCode: String

  """An array of Node IDs of projects associated to this event."""
  projects: [ID]

  """An array of Node IDs of themes associated to this event."""
  themes: [ID]

  """Whether or not this event is allow registrations."""
  guestListEnabled: Boolean! = false

  """The Node ID of the author for this event."""
  author: ID

  """Is the body using Jodit Wysiwyg."""
  bodyUsingJoditWysiwyg: Boolean

  """Author of event agree to use personal data for event only"""
  authorAgreeToUsePersonalDataForEventOnly: Boolean

  """Admin authorize data transfer"""
  adminAuthorizeDataTransfer: Boolean

  """An array of Node IDs of steps associated to this event."""
  steps: [ID!]

  """Whether or not this event is registrations measurable."""
  measurable: Boolean! = false

  """If measurable what is the max allowed registrations"""
  maxRegistrations: Int

  """
  ID of the owner of the event, user or organization. If null, fallback on the viewer.
  """
  owner: ID

  """An array of Node IDs of districts associated to this event."""
  districts: [ID]

  """The ID of the Event to modify."""
  id: ID!
}

type ChangeEventPayload {
  """The edge from the events connection."""
  event: Event

  """An unsuccessful mutation will return one or more `UserError` objects."""
  userErrors: [UserError!]!
  clientMutationId: String
}

input ChangeFontInput {
  """The new heading font ID."""
  heading: ID!

  """The new body font ID."""
  body: ID!
  clientMutationId: String
}

type ChangeFontPayload {
  """Return the available platform fonts."""
  fonts: [Font!]!
  headingFont: Font!
  bodyFont: Font!
  clientMutationId: String
}

input ChangeMapProviderTokenInput {
  """The name of the provider the new token will be set"""
  provider: MapTokenProvider!

  """The new public token"""
  publicToken: String

  """The new secret token"""
  secretToken: String
  clientMutationId: String
}

type ChangeMapProviderTokenPayload {
  """The newly map token"""
  mapToken: MapToken
  clientMutationId: String
}

input ChangeMapStyleInput {
  """The ID of the map token to modify the style"""
  mapTokenId: ID!

  """The new style owner"""
  styleOwner: String!

  """The new style ID"""
  styleId: ID!
  clientMutationId: String
}

type ChangeMapStylePayload {
  """The newly map token"""
  mapToken: MapToken
  clientMutationId: String
}

input ChangeProposalAnalysisInput {
  """The id of the proposal to analyse."""
  proposalId: ID!

  """The responses from the evaluation form."""
  responses: [ResponseInput!]!
  clientMutationId: String
}

type ChangeProposalAnalysisPayload {
  """The changed proposal analysis."""
  analysis: ProposalAnalysis

  """Contains the error code if one occurred."""
  errorCode: ProposalStatementErrorCode
  clientMutationId: String
}

input ChangeProposalAssessmentInput {
  """The id of the proposal to evaluate."""
  proposalId: ID!

  """The proposal assessment's body."""
  body: String

  """The estimated budget for the proposal."""
  estimatedCost: Int

  """The proposal assessment's official response."""
  officialResponse: String
  clientMutationId: String
}

type ChangeProposalAssessmentPayload {
  """The changed proposal assessment."""
  assessment: ProposalAssessment

  """Contains the error code if one occurred."""
  errorCode: ProposalStatementErrorCode
  clientMutationId: String
}

input ChangeProposalContentInput {
  """Link of Web page."""
  webPageUrl: URI

  """Link of Facebook page."""
  facebookUrl: URI

  """Link of Twitter page."""
  twitterUrl: URI

  """Link of Instagram page."""
  instagramUrl: URI

  """Link of LinkedIn profile."""
  linkedInUrl: URI

  """Link of Youtube channel."""
  youtubeUrl: URI

  """The proposal id"""
  id: ID!

  """
  Pass 'true' to keep your proposal in draft state, otherwise we admit that you want to publish it.
  """
  draft: Boolean

  """The new proposal title"""
  title: String

  """The new proposal body"""
  body: HTML

  """Is the body using Jodit Wysiwyg."""
  bodyUsingJoditWysiwyg: Boolean

  """The new proposal summary"""
  summary: String

  """The author id (ROLE_SUPER_ADMIN allowed only)"""
  author: ID

  """The theme id (feature themes enabled)"""
  theme: String

  """The category id"""
  category: String

  """The district id (feature districts enabled)"""
  district: String

  """The address geocoded by google"""
  address: String

  """The custom fields responses"""
  responses: [ResponseInput]

  """Current media id"""
  media: ID
  estimation: Float
  likers: [ID!]
  clientMutationId: String
}

type ChangeProposalContentPayload {
  proposal: Proposal!
  clientMutationId: String
}

input ChangeProposalDecisionInput {
  """The id of the proposal to evaluate."""
  proposalId: ID!

  """The proposal assessment's body."""
  body: String

  """The estimated budget for the proposal."""
  estimatedCost: Int

  """The official response related authors."""
  authors: [ID!]

  """The decision given for the proposal."""
  isApproved: Boolean

  """The status in the step to assign to the proposal"""
  refusedReason: ID

  """Is decision making complete."""
  isDone: Boolean
  clientMutationId: String
}

type ChangeProposalDecisionPayload {
  """The changed proposal decision."""
  decision: ProposalDecision

  """Contains the error code if one occurred."""
  errorCode: ProposalStatementErrorCode

  """The changed proposal."""
  proposal: Proposal

  """The changed post."""
  post: Post
  clientMutationId: String
}

input ChangeProposalNotationInput {
  """The proposal id"""
  proposalId: ID!
  estimation: Float
  likers: [ID!]
  clientMutationId: String
}

type ChangeProposalNotationPayload {
  proposal: Proposal!
  clientMutationId: String
}

input ChangeProposalProgressStepsInput {
  progressSteps: [ProgressStepInput!]!
  proposalId: String!
  clientMutationId: String
}

type ChangeProposalProgressStepsPayload {
  proposal: Proposal!
  clientMutationId: String
}

input ChangeProposalPublicationStatusInput {
  """The new publication status"""
  publicationStatus: ProposalPublicationStatus!

  """Added if you set publicationStatus to TRASHED"""
  trashedReason: String

  """The proposal id"""
  proposalId: ID!
  clientMutationId: String
}

type ChangeProposalPublicationStatusPayload {
  proposal: Proposal!
  clientMutationId: String
}

input ChangeSelectionStatusInput {
  stepId: ID!
  proposalId: ID!
  statusId: ID
  clientMutationId: String
}

type ChangeSelectionStatusPayload {
  proposal: Proposal!
  clientMutationId: String
}

input ChangeSiteFaviconInput {
  """The media id to associate for the website favicon"""
  mediaId: ID!
  clientMutationId: String
}

type ChangeSiteFaviconPayload {
  """The newly updated site image favicon"""
  siteFavicon: SiteImage!
  clientMutationId: String
}

input ChangeSourceInput {
  """The source id."""
  sourceId: ID!

  """The contents of the source body."""
  body: String

  """The contents of the source category."""
  category: ID

  """The contents of the source title."""
  title: String

  """The contents of the source link."""
  link: URI
  clientMutationId: String
}

type ChangeSourcePayload {
  source: Source
  clientMutationId: String
}

input ChangeUserNotificationsConfigurationInput {
  """The new proposal comment notification value"""
  onProposalCommentMail: Boolean!

  """The new external consent for communication"""
  consentExternalCommunication: Boolean!

  """The new internal consent for communication"""
  consentInternalCommunication: Boolean!
  clientMutationId: String
}

type ChangeUserNotificationsConfigurationPayload {
  user: User!
  clientMutationId: String
}

input ChangeVersionInput {
  """The version Node id."""
  versionId: ID!

  """Updated version body."""
  body: HTML

  """Is the body using Jodit Wysiwyg."""
  bodyUsingJoditWysiwyg: Boolean

  """Updated version title."""
  title: String

  """Updated version comment."""
  comment: HTML

  """Is the comment using Jodit Wysiwyg."""
  commentUsingJoditWysiwyg: Boolean
  clientMutationId: String
}

type ChangeVersionPayload {
  version: Version
  clientMutationId: String
}

"""Available errors for an `checkIdentificationCode` mutation."""
enum CheckIdentificationCodeErrorCode {
  """The validation code is not valid"""
  BAD_CODE

  """The validation code is already used"""
  CODE_ALREADY_USED

  """The viewer already has an identification code"""
  VIEWER_ALREADY_HAS_A_CODE

  """The viewer reached the limit to try enter an identification code"""
  LIMIT_REACHED
}

input CheckIdentificationCodeInput {
  """Your identification code to verify your account"""
  identificationCode: String!
  clientMutationId: String
}

type CheckIdentificationCodePayload {
  """The user who the code is checked"""
  user: User!

  """The error generated, if any."""
  errorCode: CheckIdentificationCodeErrorCode
  clientMutationId: String
}

"""Requires the viewer to check a box"""
type CheckboxRequirement implements Node & Requirement {
  """The ID of an object"""
  id: ID!

  """Does the viewer meets the requirement ?"""
  viewerMeetsTheRequirement: Boolean!

  """Does the participant meets the requirement ?"""
  participantMeetsTheRequirement(
    """The token associated to the Participant."""
    token: String!
  ): Boolean!

  """The requirement type sent to the api."""
  type: RequirementType!

  """The condition set by the requirement."""
  label: String!
}

"""A node that can be analyzed by civicIA."""
interface CivicIAAnalyzable {
  """Detected category by civicIA."""
  iaCategory: String

  """Detected readability by civicIA. The higher the more complex."""
  iaReadability: Float

  """Detected sentiment by civicIA."""
  iaSentiment: CivicIASentiment
}

"""Sentiments detected by civicIA."""
enum CivicIASentiment {
  """Positive sentiment."""
  POSITIVE

  """Neutral or undetected sentiment."""
  NEUTRAL

  """Negative sentiment."""
  NEGATIVE

  """Positive and negative sentiment."""
  MIXED
}

"""A proposal step"""
type CollectStep implements Node & Step & ProposalStep & RequirementStep {
  """The requirements to vote on this step."""
  requirements(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
  ): RequirementConnection!
  allRequirements(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
  ): RequirementConnection!

  """The ID of an object."""
  id: ID!

  """The URL to this resource."""
  url: URI!

  """When the time interval begins or ends."""
  timeRange: TimeRange!

  """The title of the step."""
  title: String!

  """Identifies the current state of the step."""
  state: StepState!

  """The kind of the step"""
  kind: String! @deprecated(reason: "Please, use `__typename` instead.")

  """The type of the step"""
  type: String @deprecated(reason: "Please, use `__typename` instead.")

  """Does the step have a end date ?"""
  timeless: Boolean

  """The introduction text of the step."""
  body: HTML

  """Is the body using Jodit Wysiwyg."""
  bodyUsingJoditWysiwyg: Boolean!

  """Is the step enabled or not"""
  enabled: Boolean!

  """The label of the step"""
  label: String!

  """The step's metadescription"""
  metaDescription: String

  """The step's custom code"""
  customCode: String

  """The step's slug"""
  slug: String

  """Events linked to the step"""
  events(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
    orderBy: EventOrder! = {field: START_AT, direction: DESC}

    """If non-null, filters events by comparing the start date with present."""
    isFuture: Boolean
  ): EventConnection!
  project: Project
  exportStepUrl: URI
  exportContributorsUrl: URI
  adminUrl(operationType: StepAdminUrlOperationType): URI!

  """Mediators assigned to this step."""
  mediators(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """Filter mediators by user username."""
    username: String
  ): MediatorConnection

  """A list of proposals associated to the object."""
  proposals(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """
    If non-null, filters proposals with the given trashed status (eg: visible, not visible).
    """
    trashedStatus: ProposalTrashedStatus = NOT_TRASHED

    """
    ID of a User to filter by. If non-null, only proposals authored by this user will be returned.
    """
    author: ID

    """Ordering options for proposals returned from the connection."""
    orderBy: [ProposalOrder] = [{field: PUBLISHED_AT, direction: ASC}]

    """(ROLE_ADMIN only) Select also draft proposals."""
    includeDraft: Boolean = false

    """
    The state of the proposals to filter by. If non-null, filters proposals with the given state.
    """
    state: ProposalsState

    """
    ID of a ProposalDistrict to filter by. If non-null, filters proposals with the given district.
    """
    district: ID

    """
    ID of a UserType to filter by. If non-null, filters proposals with the given type of author.
    """
    userType: ID

    """
    ID of a ProposalCategory to filter by. If non-null, filters proposals with the given category.
    """
    category: ID

    """
    ID of a ProposalStatus to filter by. If non-null, filters proposals with the given status.
    """
    status: ID

    """
    ID of a Theme to filter by. If non-null, filters proposals with the given theme.
    """
    theme: ID

    """If non-null, filters proposals with the given string to look for."""
    term: String
    reference: String

    """Affiliation options for proposals returned from the connection."""
    affiliations: [ProposalAffiliation]

    """(ROLE_SUPER_ADMIN only) Select also unpublished proposals."""
    includeUnpublished: Boolean = false

    """The global progress status of the proposal."""
    progressStatus: ProposalProgressState

    """The analysts's ids assigned to the proposal"""
    analysts: [ID!]

    """The supervisor's id assigned to the proposal"""
    supervisor: ID

    """The decision-maker's id assigned to the proposal"""
    decisionMaker: ID
    excludeViewerVotes: Boolean = false

    """Filter proposals by a given geo bounding box"""
    geoBoundingBox: GeoBoundingBox
  ): ProposalConnection!

  """The viewer unpublished proposals (only visible by viewer)."""
  viewerProposalsUnpublished(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
  ): ProposalConnection

  """
  If votesRanking enabled, votesLimit is the reference value for the points scale.
  """
  votesLimit: Int

  """
  Minimum number of votes a user must submit for his votes to be counted.
  """
  votesMin: Int
  budget: Int
  voteType: ProposalStepVoteType!
  votable: Boolean!
  votesHelpText: String
  voteThreshold: Int
  statuses: [ProposalStepStatus!]!
  defaultSort: String
  open: Boolean!

  """If enabled, allow voters to order their votes by point"""
  votesRanking: Boolean!

  """A list of viewer votes associated with the step."""
  viewerVotes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """Order votes."""
    orderBy: ProposalVoteOrder = {direction: DESC}

    """If anonymous user the token used to vote."""
    token: String
  ): ProposalVoteConnection!
  form: ProposalForm

  """Whether or not secret ballot is enable"""
  isSecretBallot: Boolean!

  """If not null, the date to display vote count"""
  publishedVoteDate: DateTime

  """Whether or not can display vote counters and points"""
  canDisplayBallot: Boolean!

  """Whether or not sms vote are enabled."""
  isProposalSmsVoteEnabled: Boolean

  """
  Determines how long it will take for the proposal to be archived, coupled with proposalArchivedUnitTime.
  """
  proposalArchivedTime: Int!

  """
  The unit chosen to set the archived duration can be either MONTHS or DAYS
  """
  proposalArchivedUnitTime: ProposalArchivedUnitTime!
  private: Boolean!
  defaultStatus: ProposalStepStatus

  """A list of contributor associated with the step."""
  contributors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
  ): UserConnection!
  viewerProposalDrafts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
  ): ProposalConnection!

  """The main view : GRID, LIST or MAP"""
  mainView: MainView!

  """
  Whether or not authors can add news on proposals collected in this step
  """
  allowAuthorsToAddNews: Boolean!

  """
  When email collect is enabled, the imap config to connect to the mailbox
  """
  imapConfig: ImapConfig

  """Whether or not collect by email is enabled."""
  isCollectByEmailEnabled: Boolean!
}

"""A color on hexadecimal format (#DDDDDD)."""
scalar Color

"""A comment"""
type Comment implements Node & Publishable & Reportable & Contribution & Commentable & UniformResourceLocatable {
  """The ID of an object"""
  id: ID!

  """Whether or not the contribution is trashed."""
  trashed: Boolean!

  """Identifies the trashed visibility."""
  trashedStatus: TrashableStatus

  """Identifies the moment the moderator trashed the contribution."""
  trashedAt: DateTime

  """Identifies the reason why the moderator trashed the contribution."""
  trashedReason: String

  """Does the viewer already submitted a report ?"""
  viewerHasReport: Boolean!

  """The reportings related to the reportable."""
  reportings(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
    orderBy: ReportingOrder = {field: CREATED_AT, direction: DESC}
  ): ReportingConnection!

  """Check if a user can report"""
  viewerCanReport: Boolean!

  """Whether or not the entity is published."""
  published: Boolean!

  """Identifies when the entity can no more be published."""
  publishableUntil: DateTime

  """Identifies when the entity was published at."""
  publishedAt: DateTime

  """Reason that the entity is not published."""
  notPublishedReason: NotPublishedReason

  """
  Return the related contribution if the contribution is related to another.
  """
  related: Contribution

  """The URL to this resource."""
  url: URI!

  """The comments related to the commentable."""
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
    orderBy: CommentOrder = {field: PUBLISHED_AT, direction: DESC}
  ): CommentConnection!

  """The comments not yet approved by moderators."""
  viewerNotApprovedByModeratorComments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
    orderBy: CommentOrder = {field: PUBLISHED_AT, direction: DESC}
  ): CommentConnection

  """Expose Primary Key, do not use it, except for testing purpose."""
  _id: ID!

  """The kind of contribution."""
  kind: String!
  body: String!
  createdAt: DateTime!
  updatedAt: DateTime
  author: User
  parent: Comment
  pinned: Boolean!
  contribuable: Boolean!
  answers: [Comment!]!
  authorName: String
  authorEmail: String
  authorIp: IP
  publicationStatus: CommentPublicationStatus!
  votes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
    orderBy: VoteOrder = {field: PUBLISHED_AT, direction: DESC}
  ): CommentVoteConnection!
  viewerHasVote: Boolean!
  viewerVote: CommentVote
  editUrl: URI
  commentable: Commentable

  """If moderation is enabled, the comment status."""
  moderationStatus: CommentModerationStatus!

  """
  If comment is anonymous whether or not the user has confirmed his email.
  """
  isEmailConfirmed: Boolean!
}

"""A connection to a list of items."""
type CommentConnection {
  totalCount: Int!
  totalCountWithAnswers: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [CommentEdge]
}

"""An edge in a connection."""
type CommentEdge {
  """The item at the end of the edge."""
  node: Comment!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Available moderation status for comments"""
enum CommentModerationStatus {
  """The comments has not been moderated yet."""
  PENDING

  """The comments has been approved by a moderator."""
  APPROVED

  """The comments has been rejected by a moderator."""
  REJECTED
}

"""Ways in which lists of comments can be ordered upon return."""
input CommentOrder {
  """The field in which to order nodes by."""
  field: CommentOrderField! = PUBLISHED_AT

  """The direction in which to order nodes."""
  direction: OrderDirection! = DESC
}

"""Ordering options for comments returned from the connection."""
enum CommentOrderField {
  """Allows ordering a list of comments by when they were published."""
  PUBLISHED_AT

  """Allows ordering a list of comments by when they were created."""
  CREATED_AT

  """Allows ordering a list of comments by when they were updated."""
  UPDATED_AT

  """Allows ordering a list of comments by there likes."""
  POPULARITY
}

"""Available statuses"""
enum CommentPublicationStatus {
  """Visible by author only."""
  UNPUBLISHED

  """Normal status, Publicly visible"""
  PUBLISHED

  """Publicly visible in the trash bin"""
  TRASHED

  """In the trash bin, content not visible"""
  TRASHED_NOT_VISIBLE
}

"""Entities that can be published."""
type CommentVote implements Node & Vote & Publishable {
  """The ID of an object"""
  id: ID!

  """The date of the vote."""
  createdAt: DateTime!

  """The author of the contribution."""
  author: User

  """The contribution that was voted."""
  related: Contribution

  """Returns 'commentVote'."""
  kind: String!

  """Returns if vote is accounted or not"""
  isAccounted: Boolean!

  """The participant of the contribution."""
  participant: Participant

  """Whether or not the entity is published."""
  published: Boolean!

  """Identifies when the entity can no more be published."""
  publishableUntil: DateTime

  """Identifies when the entity was published at."""
  publishedAt: DateTime

  """Reason that the entity is not published."""
  notPublishedReason: NotPublishedReason
  contribution: Comment!
}

"""A connection to a list of items."""
type CommentVoteConnection {
  totalCount: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [CommentVoteEdge]
}

"""An edge in a connection."""
type CommentVoteEdge {
  """The item at the end of the edge."""
  node: CommentVote!

  """A cursor for use in pagination."""
  cursor: String!
}

"""A commentable"""
interface Commentable {
  """The ID of an object"""
  id: ID!

  """The comments related to the commentable."""
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
    orderBy: CommentOrder = {field: PUBLISHED_AT, direction: DESC}
  ): CommentConnection!

  """The comments not yet approved by moderators."""
  viewerNotApprovedByModeratorComments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
    orderBy: CommentOrder = {field: PUBLISHED_AT, direction: DESC}
  ): CommentConnection
}

"""The different available types of step."""
enum ConcreteStepType {
  """Represent a collect step."""
  COLLECT

  """Represent a selection step."""
  SELECTION

  """Represent a consultation step."""
  CONSULTATION

  """Represent a step with no particular behaviour."""
  OTHER

  """Represent a presentation step, mainly used to show an introduction."""
  PRESENTATION

  """Represent a questionnaire step."""
  QUESTIONNAIRE

  """Represent a ranking step."""
  RANKING

  """Represent a debate step."""
  DEBATE
}

input ConfigureAnalysisInput {
  """The related proposal form id."""
  proposalFormId: ID!

  """The related evaluation form id."""
  evaluationFormId: ID

  """The step on which the analysis is based on."""
  analysisStepId: ID!

  """The effective date of the taken decision."""
  effectiveDate: DateTime

  """A text to explain the analysis process."""
  body: HTML

  """Is the body using Jodit Wysiwyg."""
  bodyUsingJoditWysiwyg: Boolean

  """Activate the cost estimation on the evaluation form."""
  costEstimationEnabled: Boolean!

  """The favourable status to apply on contributions."""
  favourableStatus: ID

  """The available unfavourable statuses to, apply on contributions."""
  unfavourableStatuses: [ID!]

  """The selection step on which the contributions are moved on."""
  moveToSelectionStepId: ID

  """The status to apply on the contributions for the next step."""
  selectionStepStatusId: ID
  clientMutationId: String
}

type ConfigureAnalysisPayload {
  """The analysis configuration."""
  analysisConfiguration: AnalysisConfiguration
  clientMutationId: String
}

"""A consultation"""
type Consultation implements Node {
  """Expose Primary Key, do not use it, except for testing purpose."""
  _id: ID!

  """The ID of an object."""
  id: ID!

  """The title of the consultation."""
  title: String!

  """A list of contributor associated with the consultation."""
  contributors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
  ): UserConnection!

  """
  Whether the user has vote for a contribution in the related step of this consultation.
  """
  userHasVote(
    """The user's login (for example, an email)."""
    login: String!
  ): Boolean!

  """The number of votes in the related step of this consultation."""
  votesCount: Int @deprecated(reason: "reason: \"In preparation for an upcoming change to the way we expose counters, this field will only be available inside a connection.\", description: \"Field `votesCount` will be removed, use \"votes.totalCount\".")

  """The votes in the related step of this consultation."""
  votes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
  ): VoteConnection!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!

  """Get the associated description of the consultation"""
  description: HTML

  """Get the associated illustration of the consultation"""
  illustration: Media

  """Get the url of the consultation"""
  url: URI!

  """List of sections."""
  sections: [Section]

  """The viewer's unpublished opinions."""
  viewerOpinionsUnpublished(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
  ): OpinionConnection

  """Contributions are allowed right now."""
  contribuable: Boolean!

  """The number of opinions shown by section."""
  opinionCountShownBySection: Int
  titleHelpText: String

  """The help text description."""
  descriptionHelpText: String

  """The associated consultation step in which belongs this consultation"""
  step: ConsultationStep

  """Retrieves all the contributions of the current consultation."""
  contributions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """Ordering options for contributions returned from the connection."""
    orderBy: ContributionOrder = {field: POSITION, direction: DESC}

    """The connection will return the trashed results too."""
    includeTrashed: Boolean = false
  ): ContributionConnection
  adminUrl: URI!
}

"""A connection to a list of items."""
type ConsultationConnection {
  totalCount: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [ConsultationEdge]
}

"""An edge in a connection."""
type ConsultationEdge {
  """The item at the end of the edge."""
  node: Consultation!

  """A cursor for use in pagination."""
  cursor: String!
}

input ConsultationInput {
  """The consultation id."""
  id: ID

  """The consultation title."""
  title: String!

  """The consultation description."""
  description: String

  """The consultation sections."""
  sections: [OpinionTypeInput!]!

  """The consultation position."""
  position: Int!

  """The consultation illustration."""
  illustration: ID
}

"""Ways in which lists of questionnaires can be ordered upon return."""
input ConsultationOrder {
  """The field to order questionnaires by."""
  field: ConsultationOrderField! = POSITION

  """The ordering direction."""
  direction: OrderDirection! = DESC
}

"""Properties by which consultations can be ordered"""
enum ConsultationOrderField {
  """
  Allows ordering a list of consultations by when they have been updated.
  """
  UPDATED_AT

  """
  Allows ordering a list of consultations by when they have been created.
  """
  CREATED_AT

  """Allows ordering a list of consultations by their position."""
  POSITION
}

"""Represent an owner of a consultation."""
interface ConsultationOwner {
  """Get all consultations."""
  consultations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """
    If omitted, returns all consultations. If provided, returns the consultation of the particular id.
    """
    id: ID

    """Filter consultation by a given query."""
    query: String

    """Order consultation by a given criterias."""
    orderBy: ConsultationOrder = {field: POSITION, direction: ASC}
  ): ConsultationConnection!
}

"""A consultation step"""
type ConsultationStep implements Node & Step & RequirementStep {
  """Expose Primary Key, do not use it, except for testing purpose."""
  _id: ID!

  """The ID of an object."""
  id: ID!

  """The requirements to vote on this step."""
  requirements(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
  ): RequirementConnection!
  allRequirements(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
  ): RequirementConnection!

  """The URL to this resource."""
  url: URI!

  """When the time interval begins or ends."""
  timeRange: TimeRange!

  """The title of the step."""
  title: String!

  """Identifies the current state of the step."""
  state: StepState!

  """The type of step. Returns "consultation"."""
  kind: String! @deprecated(reason: "Please, use `__typename` instead.")

  """The type of the step"""
  type: String @deprecated(reason: "Please, use `__typename` instead.")

  """Does the step have a end date ?"""
  timeless: Boolean

  """The introduction text of the step."""
  body: HTML

  """Is the body using Jodit Wysiwyg."""
  bodyUsingJoditWysiwyg: Boolean!

  """Is the step enabled or not"""
  enabled: Boolean!

  """The label of the step"""
  label: String!

  """The step's metadescription"""
  metaDescription: String

  """The step's custom code"""
  customCode: String

  """The step's slug"""
  slug: String

  """Events linked to the step"""
  events(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
    orderBy: EventOrder! = {field: START_AT, direction: DESC}

    """If non-null, filters events by comparing the start date with present."""
    isFuture: Boolean
  ): EventConnection!

  """The project"""
  project: Project!
  exportStepUrl: URI
  exportContributorsUrl: URI
  adminUrl(operationType: StepAdminUrlOperationType): URI!

  """Mediators assigned to this step."""
  mediators(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """Filter mediators by user username."""
    username: String
  ): MediatorConnection

  """A list of contributor associated with the consultation step."""
  contributors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
  ): UserConnection!

  """The number of votes in this consultation."""
  votesCount: Int @deprecated(reason: "Field \"votesCount\" will be removed Use \"votes.totalCount\" instead.")
  votes: VoteConnection!

  """
  Whether the user has vote for a contribution in this consultation step.
  """
  userHasVote(
    """The user's login (for example, an email)."""
    login: String!
  ): Boolean!

  """Contributions are allowed right now."""
  contribuable: Boolean!

  """Get the associated consultations of this consultation step"""
  consultations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
  ): ConsultationConnection!

  """Search a consultation in this step by it's slug"""
  consultation(
    """Returns the consultation that match the given slug"""
    slug: String!
  ): Consultation
  contributions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """Ordering options for contributions returned from the connection."""
    orderBy: ContributionOrder = {field: POSITION, direction: DESC}

    """The connection will return the trashed results too."""
    includeTrashed: Boolean = false
  ): ContributionConnection
  opinionTypes: [OpinionType]!
}

"""Fetches an object given its ID"""
type ContactForm implements Node {
  """The title of the contact Form"""
  id: ID!

  """The title of the contact Form"""
  title(
    """The locale to translate content (eg: FR_FR)."""
    locale: TranslationLocale
  ): String!

  """The body of the contact Form"""
  body(
    """The locale to translate content (eg: FR_FR)."""
    locale: TranslationLocale
  ): HTML

  """Is the body using Jodit Wysiwyg."""
  bodyUsingJoditWysiwyg: Boolean!

  """The mail to send the contact Form"""
  email: String!

  """The confidentiality text for the contact Form"""
  confidentiality(
    """The locale to translate content (eg: FR_FR)."""
    locale: TranslationLocale
  ): HTML

  """Is the confidentiality using Jodit Wysiwyg."""
  confidentialityUsingJoditWysiwyg: Boolean!
  translations: [ContactFormTranslation!]!
}

"""A translation of a contactForm"""
type ContactFormTranslation {
  locale: String!

  """The translated title of the contact Form"""
  title: String!

  """The translated body of the contact Form"""
  body: String

  """The translated confidentiality text for the contact Form"""
  confidentiality: String
}

input ContactFormTranslationInput {
  id: ID
  locale: String!
  title: String!
  body: String
  confidentiality: String
  clientMutationId: String
}

input ContactProposalAuthorInput {
  """id of the proposal"""
  proposalId: ID!

  """the email of the viewer"""
  replyEmail: String!

  """the name of the viewer"""
  senderName: String!

  """the message to be sent"""
  message: String!

  """The captcha verification."""
  captcha: String!
  clientMutationId: String
}

type ContactProposalAuthorPayload {
  """the error message, if any"""
  error: String
  clientMutationId: String
}

"""A contribution with an author"""
interface Contribution {
  """The ID of an object"""
  id: ID!

  """
  Return the related contribution if the contribution is related to another.
  """
  related: Contribution

  """Url of the contribution"""
  url: URI!
}

"""A connection to a list of items."""
type ContributionConnection {
  totalCount: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [ContributionEdge]
}

"""An edge in a connection."""
type ContributionEdge {
  """The item at the end of the edge."""
  node: Contribution!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Ways in which lists of contributions can be ordered upon return."""
input ContributionOrder {
  field: ContributionOrderField! = POSITION
  direction: OrderDirection! = DESC
}

"""Ordering options for contributions connections."""
enum ContributionOrderField {
  """Allows ordering a list of contributions by when they were created."""
  CREATED_AT

  """Allows ordering a list of contributions by there number of comments."""
  COMMENT_COUNT

  """Allows ordering a list of contributions by there number of votes ok."""
  POPULAR

  """Allows ordering a list of contributions by there position."""
  POSITION

  """Allows ordering a list of contributions by when they were published."""
  PUBLISHED_AT

  """Allows ordering a list of contributions randomly."""
  RANDOM

  """Allows ordering a list of contributions by there number of votes."""
  VOTE_COUNT
}

"""The origin of a contribution"""
enum ContributionOrigin {
  """Created on the platform"""
  INTERNAL

  """Created through a widget"""
  WIDGET

  """Created through email"""
  MAIL
}

"""Different contribution type"""
enum ContributionType {
  """Get contributions that are an opnion"""
  OPINION

  """Get contributions that are an opnion version"""
  OPINIONVERSION

  """Get contributions that are a comment"""
  COMMENT

  """Get contributions that are an argument"""
  ARGUMENT

  """Get contributions that are a source"""
  SOURCE

  """Get contributions that are a proposal"""
  PROPOSAL

  """Get contributions that are a reply"""
  REPLY

  """Get contributions that are debate argument."""
  DEBATEARGUMENT

  """Get contributions that are debate anonymous argument."""
  DEBATEANONYMOUSARGUMENT

  """Get contributions that are a reply anonymous"""
  REPLY_ANONYMOUS
}

"""A contribution with an author"""
interface ContributionWithAuthor {
  """The author of the contribution."""
  author: User!
}

"""Fetches an object given its ID"""
interface Contributor {
  """The ID of an object"""
  id: ID!
  email: String
  firstname: String
  lastname: String
  phone: String
  phoneConfirmed: Boolean!
  postalAddress: GoogleMapsAddress
  dateOfBirth: DateTime

  """The contributor identification code value"""
  userIdentificationCode: String

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  votes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """The id of the contribuable entity (Project, Step)"""
    contribuableId: ID
  ): VoteConnection!
}

"""A connection to a list of items."""
type ContributorConnection {
  totalCount: Int!

  """
  Identifies the total count of anonymous items in the connection. (Not fetched from connection)
  """
  anonymousCount: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [ContributorEdge]
}

"""An edge in a connection."""
type ContributorEdge {
  """The item at the end of the edge."""
  node: Contributor!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Way in which users with role can be ordered."""
input ContributorOrder {
  """The field in which to order nodes by."""
  field: ContributorOrderField!

  """The direction in which to order nodes."""
  direction: OrderDirection! = DESC
}

"""Property by which contributors can be ordered"""
enum ContributorOrderField {
  """Allows ordering a list of users by there last login."""
  LAST_LOGIN
}

"""Search contributors config"""
input ContributorSearchInput {
  """Fields to search by."""
  fields: [ContributorsSearchField]!

  """Filter by term based on fields."""
  term: String
}

"""Roles by which contributors can be classify"""
enum ContributorsRole {
  """Allows classify a list of contributors by role super admin."""
  ROLE_SUPER_ADMIN

  """Allows classify a list of contributors by role admin."""
  ROLE_ADMIN

  """Allows classify a list of contributors by role organization."""
  ORGANIZATION

  """Allows classify a list of contributors by role user."""
  ROLE_USER
}

"""Fields by which contributors can be searched."""
enum ContributorsSearchField {
  """Allows classify a list of contributors by role super admin."""
  id

  """Allows classify a list of contributors by role super admin."""
  email

  """Allows classify a list of contributors by role super admin."""
  username
}

"""Associates a value with a count."""
type Counter {
  """The value to be count."""
  value: String!

  """The count."""
  counter: Int!
}

input CreateAlphaProjectInput {
  """The project title"""
  title: String!

  """The project authors IDs"""
  authors: [ID!]!

  """
  ID of the owner of the project, user or organization. If null, fallback on the viewer.
  """
  owner: ID

  """The project type ID"""
  projectType: ID

  """The project cover"""
  cover: ID

  """Is the split view enabled"""
  isProposalStepSplitViewEnabled: Boolean

  """The project video link"""
  video: String

  """The project themes IDs"""
  themes: [ID!]!

  """The global districts IDs"""
  districts: [ID!]!

  """The project metadescription"""
  metaDescription: String

  """Is the project external"""
  isExternal: Boolean!

  """The project external link"""
  externalLink: String

  """The project external participants count"""
  externalParticipantsCount: Int

  """The project external contributions count"""
  externalContributionsCount: Int

  """The project external votes count"""
  externalVotesCount: Int

  """The project publication date"""
  publishedAt: DateTime!

  """The project visibility"""
  visibility: ProjectVisibility!
  opinionCanBeFollowed: Boolean!
  steps: [ProjectStepInput!]!
  headerType: ProjectHeaderType
  coverFilterOpacityPercent: Int

  """The locale id of the project. Null if visible by all languages"""
  locale: ID

  """Groups id."""
  restrictedViewerGroups: [ID!]

  """if it is archived"""
  archived: Boolean!

  """The project address, geocoded by google"""
  address: String
  clientMutationId: String
}

type CreateAlphaProjectPayload {
  """The created project"""
  project: Project
  clientMutationId: String
}

input CreateCASSSOConfigurationInput {
  """The name of configured SSO."""
  name: String!

  """Version of CAS used."""
  casVersion: CasVersion!

  """URL of the CAS server."""
  casServerUrl: URI!

  """Content of the certificate file."""
  casCertificate: String!
  clientMutationId: String
}

type CreateCASSSOConfigurationPayload {
  """The created cas configuration."""
  ssoConfiguration: CASSSOConfiguration
  clientMutationId: String
}

input CreateConsultationInput {
  """The consultation title."""
  title: String!

  """
  ID of the owner of the consultation, user or organization. If null, fallback on the viewer.
  """
  owner: ID
  clientMutationId: String
}

type CreateConsultationPayload {
  consultation: Consultation
  clientMutationId: String
}

"""Available errors for a `createDebateAnonymousArgument` mutation."""
enum CreateDebateAnonymousArgumentErrorCode {
  """No `Debate` match your id."""
  UNKNOWN_DEBATE

  """There already is an argument with that email."""
  ALREADY_HAS_ARGUMENT
}

input CreateDebateAnonymousArgumentInput {
  """The id of the `Debate` where the argument belongs."""
  debate: ID!

  """The body value of the argument."""
  body: String!

  """Whether the argument will be `FOR` or `AGAINST`."""
  type: ForOrAgainstValue!

  """
  The URL of widget from which the debate argument's vote was added, if any.
  """
  widgetOriginURI: URI = null

  """The email of the author"""
  email: Email! = 

  """The username of the author if no account"""
  username: String = null

  """Does consent to receive internal email."""
  consentInternalCommunication: Boolean = false
  clientMutationId: String
}

type CreateDebateAnonymousArgumentPayload {
  """The argument that had just been created."""
  debateArgument: DebateAnonymousArgument

  """An unsuccessful mutation will return an error."""
  errorCode: CreateDebateAnonymousArgumentErrorCode

  """The token of the argument."""
  token: String
  clientMutationId: String
}

"""Available errors for an `createDebateArgument` mutation."""
enum CreateDebateArgumentErrorCode {
  """No `Debate` match your id."""
  UNKNOWN_DEBATE

  """User has already created an argument."""
  ALREADY_HAS_ARGUMENT
}

input CreateDebateArgumentInput {
  """The id of the `Debate` where the argument belongs."""
  debate: ID!

  """The body value of the argument."""
  body: String!

  """Whether the argument will be `FOR` or `AGAINST`."""
  type: ForOrAgainstValue!

  """
  The URL of widget from which the debate argument's vote was added, if any.
  """
  widgetOriginURI: URI = null
  clientMutationId: String
}

type CreateDebateArgumentPayload {
  """The argument that had just been created."""
  debateArgument: DebateArgument

  """An unsuccessful mutation will return an error."""
  errorCode: CreateDebateArgumentErrorCode
  clientMutationId: String
}

"""Available errors on campaign creation"""
enum CreateEmailingCampaignErrorCode {
  """No mailing list match your id"""
  ID_NOT_FOUND_MAILING_LIST

  """No group match your id"""
  ID_NOT_FOUND_GROUP

  """No project match your id"""
  ID_NOT_FOUND_PROJECT

  """A campaign cannot have both group, project, internal and organic list"""
  DOUBLE_LIST
}

input CreateEmailingCampaignInput {
  """Optional. The mailing list to build the campaign."""
  mailingList: ID

  """Optional. The users group to build the campaign."""
  emailingGroup: ID

  """Optional. The project to build the campaign."""
  project: ID

  """
  ID of the owner of the campaign, user or organization. If null, fallback on the viewer.
  """
  owner: ID
  clientMutationId: String
}

type CreateEmailingCampaignPayload {
  """The campaign created"""
  emailingCampaign: EmailingCampaign

  """The error code, if any"""
  error: CreateEmailingCampaignErrorCode
  clientMutationId: String
}

input CreateGlobalDistrictInput {
  geojson: GeoJSON
  displayedOnMap: Boolean = false
  border: BorderStyleInput
  background: BackgroundStyleInput
  translations: [DistrictTranslationInput!]!

  """The district cover."""
  cover: ID
}

type CreateGlobalDistrictPayload {
  district: GlobalDistrict

  """The edge from the global district connection."""
  districtEdge: GlobalDistrictEdge

  """An unsuccessful mutation will return one or more `UserError` objects."""
  userErrors: [UserError!]!
  clientMutationId: String
}

input CreateGroupInput {
  """The description of the group"""
  description: String

  """
  This option is useful if you want to test your emails list. Set it to true if you want to actually perform the import.
  """
  dryRun: Boolean!

  """A list of email(s)."""
  emails: [Email!]!

  """The title of the group"""
  title: String!
  clientMutationId: String
}

type CreateGroupPayload {
  group: Group!

  """List of imported users."""
  importedUsers: [User]!

  """List of emails that didn't match an existing user."""
  notFoundEmails: [Email]!

  """
  If an email from your list is already associated to a user who is in the chosen group, it will be in this field.
  """
  alreadyImportedUsers: [User]!
  clientMutationId: String
}

input CreateMailingListInput {
  """The name of the list"""
  name: String!

  """The list of the users to put in the list"""
  userIds: [ID!]!

  """Optionnal. The list from which the list is built"""
  project: ID

  """
  ID of the owner of the project, user or organization. If null, fallback on the viewer.
  """
  owner: ID
  clientMutationId: String
}

type CreateMailingListPayload {
  """The mailing list created"""
  mailingList: MailingList

  """The error code, if any"""
  error: String
  clientMutationId: String
}

input CreateOauth2SSOConfigurationInput {
  """Client ID."""
  clientId: String!

  """Secret key."""
  secret: String!

  """Authorization URL."""
  authorizationUrl: URI!

  """Access token URL."""
  accessTokenUrl: URI!

  """User info URL."""
  userInfoUrl: URI!

  """Logout URL."""
  logoutUrl: URI

  """Profile URL on the SSO side."""
  profileUrl: URI

  """Specify if this SSO configuration is active or not."""
  enabled: Boolean!

  """The name of your SSO provider."""
  name: String!

  """Whether or not disconnect sso on logout."""
  disconnectSsoOnLogout: Boolean!
  clientMutationId: String
}

type CreateOauth2SSOConfigurationPayload {
  """The created oauth2 configuration."""
  ssoConfiguration: Oauth2SSOConfiguration
  clientMutationId: String
}

"""Available errors on opinion creation"""
enum CreateOpinionErrorCode {
  """this opinionType is not enabled"""
  OPINION_TYPE_NOT_ENABLED

  """the step is unknown"""
  UNKNOWN_STEP

  """the step is not contribuable"""
  STEP_NOT_CONTRIBUABLE

  """the viewer does not meet requirements"""
  REQUIREMENTS_NOT_MET

  """the viewer contributed too many times"""
  CONTRIBUTED_TOO_MANY_TIMES

  """the form is invalid"""
  INVALID_FORM

  """this opinionType is not found"""
  OPINION_TYPE_NOT_FOUND

  """this project is not found"""
  PROJECT_NOT_FOUND
}

input CreateOpinionInput {
  """the project id"""
  projectId: ID!

  """the step id"""
  stepId: ID!

  """the opinionType id"""
  opinionTypeId: ID!

  """the opinion title"""
  title: String!

  """the opinion body"""
  body: HTML!

  """Is the body using Jodit Wysiwyg."""
  bodyUsingJoditWysiwyg: Boolean

  """the opinion appendices"""
  appendices: [AppendixInput]!
  clientMutationId: String
}

type CreateOpinionPayload {
  """the created opinion"""
  opinion: Opinion

  """available errors if mutation fails"""
  errorCode: CreateOpinionErrorCode
  clientMutationId: String
}

"""
Available errors for an `createOrUpdateCarrouselConfiguration` mutation.
"""
enum CreateOrUpdateCarrouselConfigurationErrorCode {
  """The form is not valid"""
  INVALID_FORM

  """Limit of carrousel items that can be displayed"""
  TOO_MANY_CARROUSEL_ITEMS
}

input CreateOrUpdateCarrouselConfigurationInput {
  """Section type."""
  type: String!

  """The title of the section."""
  title: String

  """The position of the section in the homepage."""
  position: Int

  """Whether it is published or not."""
  enabled: Boolean

  """Whether the legend is enabled on the image or not."""
  isLegendEnabledOnImage: Boolean

  """The carrousel elements of the section."""
  carrouselElements: [CarrouselElementInput!]!
  clientMutationId: String
}

type CreateOrUpdateCarrouselConfigurationPayload {
  """the created or updated carrouselConfiguration"""
  carrouselConfiguration: CarrouselConfiguration

  """An unsuccessful mutation will return an error."""
  errorCode: CreateOrUpdateCarrouselConfigurationErrorCode
  clientMutationId: String
}

input CreateOrUpdateConsultationInput {
  """List of consultations to create or update."""
  consultations: [ConsultationInput]!

  """If given determines if the consultations should be edited or copied"""
  stepId: ID

  """
  ID of the owner of the consultation, user or organization. If null, fallback on the viewer.
  """
  owner: ID
  clientMutationId: String
}

type CreateOrUpdateConsultationPayload {
  """List of created or updated consultations."""
  consultations: [Consultation]!
  clientMutationId: String
}

"""Available errors on createPost mutation"""
enum CreatePostErrorCode {
  """Submitted form is invalid"""
  INVALID_FORM

  """
  Submitted owner is invalid : unknown, different user or organization not belonging.
  """
  INVALID_OWNER
}

input CreatePostInput {
  translations: [CreatePostTranslationInput!]

  """post authors"""
  authors: [ID!]!

  """post customCode"""
  customCode: String

  """related projects related to the post"""
  projects: [ID]!

  """proposals related to the post"""
  proposals: [ID]!

  """themes related to the post"""
  themes: [ID]!

  """Whether or not the post should be displayed on blog"""
  displayedOnBlog: Boolean!

  """When the post should be pusblished"""
  publishedAt: DateTime!

  """Whether or not the post should be published"""
  isPublished: Boolean!

  """Whether or not the post should be commentable"""
  commentable: Boolean!

  """The media attached to the post"""
  media: ID

  """
  ID of the owner of the post, user or organization. If null, fallback on the viewer.
  """
  owner: ID
  clientMutationId: String
}

type CreatePostPayload {
  """The created post"""
  post: Post

  """Available errorCode for createPost mutation"""
  errorCode: CreatePostErrorCode
  clientMutationId: String
}

input CreatePostTranslationInput {
  """post title"""
  title: String!

  """post body"""
  body: HTML!

  """post abstract"""
  abstract: String

  """post metadescription"""
  metaDescription: String

  """the locale of the translation"""
  locale: TranslationLocale!
  clientMutationId: String
}

input CreateProjectInput {
  """The project's title"""
  title: String!

  """The project's authors, accept IDs of User"""
  authors: [ID!]!

  """The project's type"""
  projectType: String

  """The uuid of the locale of this project, null if none"""
  locale: ID

  """
  ID of the owner of the project, user or organization. If null, fallback on the viewer.
  """
  owner: ID
  clientMutationId: String
}

type CreateProjectPayload {
  """The created project"""
  project: Project
  clientMutationId: String
}

input CreateProposalAnalysisCommentInput {
  """The proposalAnalysis linked to the comment."""
  proposalAnalysisId: ID!

  """The body of the comment."""
  body: String!
  clientMutationId: String
}

type CreateProposalAnalysisCommentPayload {
  comment: Comment
  clientMutationId: String
}

input CreateProposalFormInput {
  """The proposal form title"""
  title: String!

  """
  ID of the owner of the proposalForm, user or organization. If null, fallback on the viewer.
  """
  owner: ID
  clientMutationId: String
}

type CreateProposalFormPayload {
  proposalForm: ProposalForm!
  clientMutationId: String
}

input CreateProposalFromBackOfficeInput {
  """Link of Web page."""
  webPageUrl: URI

  """Link of Facebook page."""
  facebookUrl: URI

  """Link of Twitter page."""
  twitterUrl: URI

  """Link of Instagram page."""
  instagramUrl: URI

  """Link of LinkedIn profile."""
  linkedInUrl: URI

  """Link of Youtube channel."""
  youtubeUrl: URI

  """The id of the form form proposal"""
  proposalFormId: ID!

  """If true will create a draft proposal, otherwise a published proposal."""
  draft: Boolean

  """The proposal title"""
  title: String

  """The proposal body"""
  body: HTML

  """Is the body using Jodit Wysiwyg."""
  bodyUsingJoditWysiwyg: Boolean

  """The proposal summary"""
  summary: String

  """The theme id (feature themes must be enabled)"""
  theme: ID

  """The category id"""
  category: ID

  """The district id (feature districts must be enabled)"""
  district: ID

  """The address geocoded by google"""
  address: String

  """The responses to the form questions"""
  responses: [ResponseInput]

  """The media id to illustrate"""
  media: ID
  clientMutationId: String

  """The proposal author"""
  author: ID!

  """The proposal published date"""
  publishedAt: DateTime!
}

input CreateProposalFusionInput {
  """Proposal ids from which the fusion is created"""
  fromProposals: [ID!]!

  """Proposal title for newly created proposal"""
  title: String!

  """Proposal body for newly created proposal"""
  description: String
  clientMutationId: String
}

type CreateProposalFusionPayload {
  proposal: Proposal
  clientMutationId: String
}

input CreateProposalInput {
  """Link of Web page."""
  webPageUrl: URI

  """Link of Facebook page."""
  facebookUrl: URI

  """Link of Twitter page."""
  twitterUrl: URI

  """Link of Instagram page."""
  instagramUrl: URI

  """Link of LinkedIn profile."""
  linkedInUrl: URI

  """Link of Youtube channel."""
  youtubeUrl: URI

  """The id of the form form proposal"""
  proposalFormId: ID!

  """If true will create a draft proposal, otherwise a published proposal."""
  draft: Boolean

  """The proposal title"""
  title: String

  """The proposal body"""
  body: HTML

  """Is the body using Jodit Wysiwyg."""
  bodyUsingJoditWysiwyg: Boolean

  """The proposal summary"""
  summary: String

  """The theme id (feature themes must be enabled)"""
  theme: ID

  """The category id"""
  category: ID

  """The district id (feature districts must be enabled)"""
  district: ID

  """The address geocoded by google"""
  address: String

  """The responses to the form questions"""
  responses: [ResponseInput]

  """The media id to illustrate"""
  media: ID
  clientMutationId: String
}

type CreateProposalPayload {
  """The created proposal, if everything goes well !"""
  proposal: Proposal

  """An unsuccessful mutation will return one or more `UserError` objects."""
  userErrors: [UserError!]
  clientMutationId: String
}

input CreateQuestionnaireInput {
  """The questionnaire form title"""
  title: String!

  """The questionnaire type"""
  type: QuestionnaireType! = QUESTIONNAIRE

  """
  ID of the owner of the questionnaire, user or organization. If null, fallback on the viewer.
  """
  owner: ID
  clientMutationId: String
}

type CreateQuestionnairePayload {
  questionnaire: Questionnaire
  clientMutationId: String
}

"""Possible errors on createSenderEmailDomain mutation."""
enum CreateSenderEmailDomainErrorCode {
  """There is already a SenderEmailDomain matching service and value."""
  ALREADY_EXIST
}

input CreateSenderEmailDomainInput {
  """The service used by the domain."""
  service: SenderEmailDomainService!

  """The domain, eg cap-collectif.com"""
  value: String!
  clientMutationId: String
}

type CreateSenderEmailDomainPayload {
  """The created SenderEmailDomain."""
  senderEmailDomain: SenderEmailDomain

  """The error generated, if any."""
  errorCode: CreateSenderEmailDomainErrorCode
  clientMutationId: String
}

"""Possible errors on createSenderDomain mutation."""
enum CreateSenderEmailErrorCode {
  """There is already a SenderEmail matching locale and domain."""
  ALREADY_EXIST

  """The domain is not in the list of domains."""
  INVALID_DOMAIN
}

input CreateSenderEmailInput {
  """The first part of the address, before the @."""
  locale: String!

  """The second part of the address, after the @."""
  domain: String!
  clientMutationId: String
}

type CreateSenderEmailPayload {
  """The created SenderEmail."""
  senderEmail: SenderEmail

  """The error generated, if any."""
  errorCode: CreateSenderEmailErrorCode
  clientMutationId: String
}

input CreateSmsOrderInput {
  """The sms credit amount ordered."""
  amount: Int!
  clientMutationId: String
}

type CreateSmsOrderPayload {
  smsOrder: SmsOrder!
  clientMutationId: String
}

input CreateUserIdentificationCodeListInput {
  """Name of the list to create."""
  name: String!

  """Data for the codes creation."""
  data: [CreateUserIdentificationCodeListInputDatum!]!
  codeLength: Int
  clientMutationId: String
}

"""A person for whom a code must be created."""
input CreateUserIdentificationCodeListInputDatum {
  """The title of the person : m, mme, mlle, me, dr..."""
  title: String!

  """The firstname of the person."""
  firstname: String!

  """The lastname of the person."""
  lastname: String!

  """The address of the person."""
  address1: String!

  """Complementary address, if needed."""
  address2: String

  """Complementary address, if needed."""
  address3: String

  """Zip code of the person."""
  zipCode: String!

  """City of the person."""
  city: String!

  """Country of the person."""
  country: String!

  """email of the person."""
  email: String
}

type CreateUserIdentificationCodeListPayload {
  """The successfully created list"""
  userIdentificationCodeList: UserIdentificationCodeList
  clientMutationId: String
}

input CreateUserInput {
  """The user's username"""
  username: String!

  """The user's email"""
  email: String!

  """The user's password"""
  plainPassword: String

  """Unattended roles as array."""
  roles: [UserRole]
  locked: Boolean
  vip: Boolean
  enabled: Boolean
  clientMutationId: String
}

type CreateUserPayload {
  """The created user, if everything goes well !"""
  user: User
  clientMutationId: String
}

input CropMediaInput {
  """The media id."""
  mediaId: ID!

  """An object containing the size and start options for cropping a media."""
  filters: CroppingOptionInput!
  clientMutationId: String
}

type CropMediaPayload {
  """The cropped media."""
  media: Media!
  clientMutationId: String
}

"""The required values to apply a cropping on a media."""
input CroppingOptionInput {
  """
  Sets the crop size as an integer array containing the dimensions as width and height values.
  """
  size: CroppingSizeOptionInput!

  """
  Sets the top, left-post anchor coordinates where the crop operation starts.
  """
  start: CroppingStartOptionInput!
}

"""An object containing the width and height of the media."""
input CroppingSizeOptionInput {
  """The width of the media."""
  width: Int!

  """The height of the media."""
  height: Int!
}

"""An object containing the coordinates for media cropping."""
input CroppingStartOptionInput {
  """The x (left) coordinates for media cropping."""
  x: Int!

  """The y (top) coordinates for media cropping."""
  y: Int!
}

"""A string containing CSS."""
scalar CssJSON

"""A requirement where data can be collected by france connect"""
interface DataCollectedByFranceConnectRequirement {
  """Wether or not the data is collected by france connect."""
  isCollectedByFranceConnect: Boolean
}

"""Require a date of birth"""
type DateOfBirthRequirement implements Node & Requirement & DataCollectedByFranceConnectRequirement {
  """The ID of an object"""
  id: ID!

  """Does the viewer meets the requirement ?"""
  viewerMeetsTheRequirement: Boolean!

  """Does the participant meets the requirement ?"""
  participantMeetsTheRequirement(
    """The token associated to the Participant."""
    token: String!
  ): Boolean!

  """The requirement type sent to the api."""
  type: RequirementType!

  """Wether or not the data is collected by france connect."""
  isCollectedByFranceConnect: Boolean

  """The date of birth of the viewer."""
  viewerDateOfBirth: DateTime

  """The date of birth of the participant."""
  participantDateOfBirth(
    """The token associated to the Participant."""
    token: String!
  ): DateTime
}

"""A string containing a datetime."""
scalar DateTime

"""A debate on a subject."""
type Debate implements Node {
  """The ID of an object."""
  id: ID!

  """The opinions from experts of the debate."""
  opinions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
  ): DebateOpinionConnection!

  """The arguments from non-experts of the debate, in alternate way."""
  alternateArguments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """
    (ROLE_ADMIN only) True to see only published arguments, false to see only unpublished, null to see both.
    """
    isPublished: Boolean = null

    """
    (ROLE_ADMIN only) True to see only trashed arguments, false to not see trashed, null to see both.
    """
    isTrashed: Boolean = false

    """Order by."""
    orderBy: DebateArgumentOrder = {field: PUBLISHED_AT, direction: DESC}
  ): DebateArgumentAlternateConnection!

  """The arguments from non-experts of the debate."""
  arguments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """Filter by an argument's stand."""
    value: ForOrAgainstValue = null

    """
    (ROLE_ADMIN only) True to see only published arguments, false to see only unpublished, null to see both.
    """
    isPublished: Boolean = null

    """
    (ROLE_ADMIN only) True to see only trashed arguments, false to not see trashed, null to see both.
    """
    isTrashed: Boolean = null

    """Order by."""
    orderBy: DebateArgumentOrder = {field: PUBLISHED_AT, direction: DESC}
  ): DebateArgumentConnection!

  """True if the viewer has created an argument."""
  viewerHasArgument: Boolean!

  """The votes from contributors of the debate."""
  votes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """Filter by a vote's type."""
    type: ForOrAgainstValue = null

    """
    (ROLE_ADMIN only) `true` to see only published votes, `false` to see only unpublished, `null` to see both.
    """
    isPublished: Boolean = null

    """The ordering options for votes."""
    orderBy: DebateVoteOrder = {field: PUBLISHED_AT, direction: DESC}
  ): DebateVoteConnection!

  """True if the viewer has upvoted the argument."""
  viewerHasVote: Boolean!

  """True if the viewer has upvoted the argument."""
  viewerVote: DebateVote

  """The associated articles of the debate."""
  articles(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
  ): DebateArticleConnection!

  """The url of the debate"""
  url: URI!

  """The viewer's unpublished votes."""
  viewerUnpublishedVotes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
  ): DebateVoteConnection!

  """The viewer's unpublished argument."""
  viewerUnpublishedArgument: DebateArgument

  """The step of the debate."""
  step: DebateStep!
}

"""A debate argument from anonymous."""
type DebateAnonymousArgument implements Node & AbstractDebateArgument & Trashable & Contribution {
  """The ID of an object."""
  id: ID!

  """Whether or not the contribution is trashed."""
  trashed: Boolean!

  """Identifies the trashed visibility."""
  trashedStatus: TrashableStatus

  """Identifies the moment the moderator trashed the contribution."""
  trashedAt: DateTime

  """Identifies the reason why the moderator trashed the contribution."""
  trashedReason: String

  """Whether or not the entity is published."""
  published: Boolean!

  """Identifies when the entity can no more be published."""
  publishableUntil: DateTime

  """Identifies when the entity was published at."""
  publishedAt: DateTime

  """Reason that the entity is not published."""
  notPublishedReason: NotPublishedReason

  """True if the viewer has reported the argument."""
  viewerHasReport: Boolean!

  """The reportings related to the reportable."""
  reportings(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
    orderBy: ReportingOrder = {field: CREATED_AT, direction: DESC}
  ): ReportingConnection!

  """Check if a user can report"""
  viewerCanReport: Boolean!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!

  """
  Return the related contribution if the contribution is related to another.
  """
  related: Contribution

  """The url of the debate"""
  url: URI!

  """The content of the argument."""
  body: String!

  """The debate related to the argument."""
  debate: Debate!

  """Whether the argument is for or against."""
  type: ForOrAgainstValue!

  """IP of the author"""
  ipAddress: IP

  """The origin of a debate's argument"""
  origin: ContributionOrigin!

  """The URL of widget from which the debate's argument was added, if any."""
  widgetOriginUrl: URI

  """The formatted geolocalization informations."""
  geoip: FormattedGeolocalization

  """True if the viewer has upvoted the argument."""
  viewerHasVote: Boolean!

  """The upvotes on the argument."""
  votes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """Order by."""
    orderBy: DebateArgumentVoteOrder = {field: PUBLISHED_AT, direction: DESC}
  ): DebateArgumentVoteConnection!

  """Did the viewer author this entity."""
  viewerDidAuthor: Boolean

  """Email"""
  email: Email!

  """Username (not mandatory)"""
  username: String

  """
  Whether or not the author of the argument consents to receive emails from us.
  """
  consentInternalCommunication: Boolean!
}

"""An anonymous debate vote."""
type DebateAnonymousVote implements Node & AbstractDebateVote {
  """The ID of an object."""
  id: ID!

  """The date of the vote."""
  createdAt: DateTime!

  """Whether or not the vote is published."""
  published: Boolean!

  """The date when the vote was published at."""
  publishedAt: DateTime

  """The value of the vote."""
  type: ForOrAgainstValue!

  """The debate of the vote."""
  debate: Debate!

  """IP of the voter"""
  ipAddress: IP

  """The origin of a debate argument's vote"""
  origin: ContributionOrigin!

  """
  The URL of widget from which the debate argument's vote was added, if any.
  """
  widgetOriginUrl: URI

  """Navigator of the voter"""
  navigator: String

  """The formatted geolocalization informations."""
  geoip: FormattedGeolocalization
}

"""A debate argument from non expert."""
type DebateArgument implements Node & AbstractDebateArgument & Trashable & Contribution {
  """The ID of an object."""
  id: ID!

  """Whether or not the contribution is trashed."""
  trashed: Boolean!

  """Identifies the trashed visibility."""
  trashedStatus: TrashableStatus

  """Identifies the moment the moderator trashed the contribution."""
  trashedAt: DateTime

  """Identifies the reason why the moderator trashed the contribution."""
  trashedReason: String

  """Whether or not the entity is published."""
  published: Boolean!

  """Identifies when the entity can no more be published."""
  publishableUntil: DateTime

  """Identifies when the entity was published at."""
  publishedAt: DateTime

  """Reason that the entity is not published."""
  notPublishedReason: NotPublishedReason

  """True if the viewer has reported the argument."""
  viewerHasReport: Boolean!

  """The reportings related to the reportable."""
  reportings(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
    orderBy: ReportingOrder = {field: CREATED_AT, direction: DESC}
  ): ReportingConnection!

  """Check if a user can report"""
  viewerCanReport: Boolean!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!

  """
  Return the related contribution if the contribution is related to another.
  """
  related: Contribution

  """The url of the debate"""
  url: URI!

  """The content of the argument."""
  body: String!

  """The debate related to the argument."""
  debate: Debate!

  """Whether the argument is for or against."""
  type: ForOrAgainstValue!

  """IP of the author"""
  ipAddress: IP

  """The origin of a debate's argument"""
  origin: ContributionOrigin!

  """The URL of widget from which the debate's argument was added, if any."""
  widgetOriginUrl: URI

  """The formatted geolocalization informations."""
  geoip: FormattedGeolocalization

  """True if the viewer has upvoted the argument."""
  viewerHasVote: Boolean!

  """The upvotes on the argument."""
  votes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """Order by."""
    orderBy: DebateArgumentVoteOrder = {field: PUBLISHED_AT, direction: DESC}
  ): DebateArgumentVoteConnection!

  """Did the viewer author this entity."""
  viewerDidAuthor: Boolean

  """The non-expert giving his argument."""
  author: User!
}

"""Two debate arguments from non expert, one for and one against."""
type DebateArgumentAlternate {
  """The FOR argument."""
  for: AbstractDebateArgument

  """The AGAINST argument."""
  against: AbstractDebateArgument
}

"""A connection to a list of items."""
type DebateArgumentAlternateConnection {
  totalCount: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [DebateArgumentAlternateEdge]
}

"""An edge in a connection."""
type DebateArgumentAlternateEdge {
  """The item at the end of the edge."""
  node: DebateArgumentAlternate!

  """A cursor for use in pagination."""
  cursor: String!
}

"""A connection to a list of items."""
type DebateArgumentConnection {
  totalCount: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [DebateArgumentEdge]
}

"""An edge in a connection."""
type DebateArgumentEdge {
  """The item at the end of the edge."""
  node: AbstractDebateArgument!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Ways in which lists of arguments can be ordered upon return."""
input DebateArgumentOrder {
  """The field to order arguments by."""
  field: DebateArgumentOrderField! = PUBLISHED_AT

  """The ordering direction."""
  direction: OrderDirection! = DESC
}

"""Ordering options for arguments returned from the connection."""
enum DebateArgumentOrderField {
  PUBLISHED_AT
  VOTE_COUNT
}

"""A debate vote."""
type DebateArgumentVote implements Node & Publishable & Vote & Contribution {
  """The ID of an object."""
  id: ID!

  """Whether or not the entity is published."""
  published: Boolean!

  """Identifies when the entity can no more be published."""
  publishableUntil: DateTime

  """Identifies when the entity was published at."""
  publishedAt: DateTime

  """Reason that the entity is not published."""
  notPublishedReason: NotPublishedReason

  """The date of the vote."""
  createdAt: DateTime!

  """The author of the vote."""
  author: User!

  """
  Return the related contribution if the contribution is related to another.
  """
  related: Contribution

  """Returns Type of vote"""
  kind: String!

  """Returns if vote is accounted or not"""
  isAccounted: Boolean!

  """The participant of the contribution."""
  participant: Participant

  """Url of the contribution"""
  url: URI!

  """The debate of the vote."""
  debateArgument: AbstractDebateArgument!

  """IP of the voter"""
  ipAddress: IP

  """The origin of a debate argument's vote"""
  origin: ContributionOrigin!

  """
  The URL of widget from which the debate argument's vote was added, if any.
  """
  widgetOriginUrl: URI
}

"""A connection to a list of items."""
type DebateArgumentVoteConnection {
  totalCount: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [DebateArgumentVoteEdge]
}

"""An edge in a connection."""
type DebateArgumentVoteEdge {
  """The item at the end of the edge."""
  node: DebateArgumentVote

  """A cursor for use in pagination."""
  cursor: String!
}

"""Ways in which lists of votes can be ordered upon return."""
input DebateArgumentVoteOrder {
  """The field to order votes by."""
  field: DebateArgumentVoteOrderField! = PUBLISHED_AT

  """The ordering direction."""
  direction: OrderDirection! = DESC
}

"""Ordering options for votes returned from the connection."""
enum DebateArgumentVoteOrderField {
  PUBLISHED_AT
}

"""A debate article."""
type DebateArticle implements Node {
  """The ID of an object."""
  id: ID!

  """The url of the article."""
  url: URI!

  """The title of the article."""
  title: String

  """The description of the article."""
  description: String

  """The url of the article's cover."""
  coverUrl: URI

  """The origin of the article."""
  origin: String

  """The article publication date."""
  publishedAt: DateTime

  """Whether or not the article has been successfully crawled."""
  hasBeenCrawled: Boolean!

  """The debate related to the article."""
  debate: Debate!
}

"""A connection to a list of items."""
type DebateArticleConnection {
  totalCount: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [DebateArticleEdge]
}

"""An edge in a connection."""
type DebateArticleEdge {
  """The item at the end of the edge."""
  node: DebateArticle!

  """A cursor for use in pagination."""
  cursor: String!
}

input DebateArticleInput {
  id: ID
  url: URI!
}

"""A debate opinion."""
type DebateOpinion implements Node {
  """The ID of an object."""
  id: ID!

  """The title of the opinion."""
  title: String!

  """The content of the opinion."""
  body: HTML!

  """Is the body using Jodit Wysiwyg."""
  bodyUsingJoditWysiwyg: Boolean!

  """The expert giving his opinion."""
  author: User!

  """The debate related to the opinion."""
  debate: Debate!

  """Whether the opinion is for or against."""
  type: ForOrAgainstValue!
}

"""A connection to a list of items."""
type DebateOpinionConnection {
  totalCount: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [DebateOpinionEdge]
}

"""An edge in a connection."""
type DebateOpinionEdge {
  """The item at the end of the edge."""
  node: DebateOpinion!

  """A cursor for use in pagination."""
  cursor: String!
}

"""A step with a debate."""
type DebateStep implements Step & Node {
  """The ID of an object."""
  id: ID!

  """The URL to this resource."""
  url: URI!

  """When the time interval begins or ends."""
  timeRange: TimeRange!

  """The title of the step."""
  title: String!

  """Identifies the current state of the step."""
  state: StepState!

  """The kind of the step"""
  kind: String! @deprecated(reason: "Please, use `__typename` instead.")

  """The type of the step"""
  type: String @deprecated(reason: "Please, use `__typename` instead.")

  """Does the step have a end date ?"""
  timeless: Boolean

  """The introduction text of the step."""
  body: HTML

  """Is the body using Jodit Wysiwyg."""
  bodyUsingJoditWysiwyg: Boolean!

  """Is the step enabled or not"""
  enabled: Boolean!

  """The label of the step"""
  label: String!

  """The step's metadescription"""
  metaDescription: String

  """The step's custom code"""
  customCode: String

  """The step's slug"""
  slug: String

  """Events linked to the step"""
  events(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
    orderBy: EventOrder! = {field: START_AT, direction: DESC}

    """If non-null, filters events by comparing the start date with present."""
    isFuture: Boolean
  ): EventConnection!
  project: Project
  exportStepUrl: URI
  exportContributorsUrl: URI
  adminUrl(operationType: StepAdminUrlOperationType): URI!

  """Mediators assigned to this step."""
  mediators(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """Filter mediators by user username."""
    username: String
  ): MediatorConnection

  """The debate of the step."""
  debate: Debate!

  """A list of contributor associated with the step."""
  contributors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
  ): UserConnection!

  """the type of the debate"""
  debateType: DebateType!

  """the content of the debate"""
  debateContent: HTML

  """Is the debateContent using Jodit Wysiwyg."""
  debateContentUsingJoditWysiwyg: Boolean!

  """Does the debate allow anonymous users to participate?"""
  isAnonymousParticipationAllowed: Boolean!
}

enum DebateType {
  """
  add a wysiwyg to allow the author to add additional content to the debate
  """
  WYSIWYG

  """remove the wysiwyg to only let the face to face debate"""
  FACE_TO_FACE
}

"""A debate vote."""
type DebateVote implements Node & AbstractDebateVote & Vote & Publishable {
  """The ID of an object."""
  id: ID!

  """The date of the vote."""
  createdAt: DateTime!

  """Whether or not the entity is published."""
  published: Boolean!

  """Identifies when the entity was published at."""
  publishedAt: DateTime

  """The value of the vote."""
  type: ForOrAgainstValue!

  """The debate of the vote."""
  debate: Debate!

  """IP of the voter"""
  ipAddress: IP

  """The origin of a debate's vote"""
  origin: ContributionOrigin!

  """The URL of widget from which the debate's vote was added, if any."""
  widgetOriginUrl: URI

  """The author of the vote."""
  author: User!

  """The contribution that was voted."""
  related: Contribution

  """Returns Type of vote"""
  kind: String!

  """Returns if vote is accounted or not"""
  isAccounted: Boolean!

  """The participant of the contribution."""
  participant: Participant

  """Identifies when the entity can no more be published."""
  publishableUntil: DateTime

  """Reason that the entity is not published."""
  notPublishedReason: NotPublishedReason

  """The formatted geolocalization informations."""
  geoip: FormattedGeolocalization
}

"""A connection to a list of items."""
type DebateVoteConnection {
  totalCount: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [DebateVoteEdge]
}

"""An edge in a connection."""
type DebateVoteEdge {
  """The item at the end of the edge."""
  node: AbstractDebateVote

  """A cursor for use in pagination."""
  cursor: String!
}

"""Ways in which lists of votes can be ordered upon return."""
input DebateVoteOrder {
  """The field to order votes by."""
  field: DebateVoteOrderField! = PUBLISHED_AT

  """The ordering direction."""
  direction: OrderDirection! = DESC
}

"""Ordering options for votes returned from the connection."""
enum DebateVoteOrderField {
  PUBLISHED_AT
  CREATED_AT
}

"""Available errors on DeleteAccountByEmail mutation."""
enum DeleteAccountByEmailErrorCode {
  """The given email does not correspond to an existing user."""
  NON_EXISTING_EMAIL

  """You can't delete a user that has role 'ROLE_SUPER_ADMIN'."""
  DELETION_DENIED
}

input DeleteAccountByEmailInput {
  """The user's email to delete"""
  email: String!
  clientMutationId: String
}

type DeleteAccountByEmailPayload {
  """The deleted user's email."""
  email: String

  """Contains the error code if one occurred."""
  errorCode: DeleteAccountByEmailErrorCode
  clientMutationId: String
}

"""Available errors for a `DeleteAccount` mutation."""
enum DeleteAccountErrorCode {
  """Cannot delete super admin account !"""
  CANNOT_DELETE_SUPER_ADMIN
}

input DeleteAccountInput {
  """You must chose a strategy to delete your account"""
  type: DeleteAccountType!

  """The user to delete"""
  userId: ID
  clientMutationId: String
}

type DeleteAccountPayload {
  """user id"""
  userId: ID!

  """possible errors for delete account."""
  errorCode: DeleteAccountErrorCode
  clientMutationId: String
}

"""Differents strategies to delete an account"""
enum DeleteAccountType {
  """Anonymize the user and delete his content only on active steps"""
  SOFT

  """Anonymize the user and delete his content"""
  HARD
}

input DeleteAnonymousReplyInput {
  """The hashed token of the reply"""
  hashedToken: String!
  clientMutationId: String
}

type DeleteAnonymousReplyPayload {
  questionnaire: Questionnaire!
  replyId: ID!
  clientMutationId: String
}

input DeleteArgumentInput {
  argumentId: ID!
  clientMutationId: String
}

type DeleteArgumentPayload {
  deletedArgumentId: ID
  argumentable: Argumentable!
  clientMutationId: String
}

"""Available errors for a `DeleteCarrouselElement` mutation."""
enum DeleteCarrouselElementErrorCode {
  """Global ID doesn't exist."""
  GLOBAL_ID_NOT_EXIST
}

input DeleteCarrouselElementInput {
  """The ID of the carrousel element."""
  id: ID!
  clientMutationId: String
}

type DeleteCarrouselElementPayload {
  """The ID of the deleted CarrouselConfiguration."""
  deletedCarrouselElementId: ID!

  """
  Global ID doesn't exist or user doesn't have the permission to delete the CarrouselConfiguration.
  """
  errorCode: DeleteCarrouselElementErrorCode
  clientMutationId: String
}

input DeleteCommentInput {
  """The ID of the comment to delete."""
  id: ID!
  clientMutationId: String
}

type DeleteCommentPayload {
  deletedCommentId: ID
  commentable: Commentable

  """An unsuccessful mutation will return one or more `UserError` objects."""
  userErrors: [UserError]
  clientMutationId: String
}

input DeleteConsultationInput {
  """The global id of the Consultation to delete"""
  id: ID!
  clientMutationId: String
}

type DeleteConsultationPayload {
  """The deleted consultation id"""
  deletedConsultationId: ID
  clientMutationId: String
}

"""Available errors for an `updateCustomDomain` mutation."""
enum DeleteCustomDomainErrorCode {
  """Error occured while deleting the custom domain."""
  ERROR_DEPLOYER_API
}

input DeleteCustomDomainInput {
  clientMutationId: String
}

type DeleteCustomDomainPayload {
  siteSettings: SiteSettings

  """The available errors if any."""
  errorCode: DeleteCustomDomainErrorCode
  clientMutationId: String
}

"""Available errors for an `deleteDebateAnonymousArgument` mutation."""
enum DeleteDebateAnonymousArgumentErrorCode {
  """No `Debate` match your `id`."""
  UNKNOWN_DEBATE

  """The debate is closed and removing an argument cannot be done."""
  CLOSED_DEBATE

  """The given hash is not valid."""
  INVALID_HASH

  """The user has no argument on this debate."""
  UNKNOWN_DEBATE_ARGUMENT
}

input DeleteDebateAnonymousArgumentInput {
  """The Node ID of the `Debate` to remove the argument on."""
  debate: ID!

  """The cookie hash needed to remove anonymous argument."""
  hash: String!
  clientMutationId: String
}

type DeleteDebateAnonymousArgumentPayload {
  """The id that had just been deleted."""
  deletedDebateAnonymousArgumentId: ID

  """An unsuccessful mutation will return an error."""
  errorCode: DeleteDebateAnonymousArgumentErrorCode

  """The deleted argument associated debate."""
  debate: Debate
  clientMutationId: String
}

"""Available errors for an `deleteDebateArgument` mutation."""
enum DeleteDebateArgumentErrorCode {
  """No `DebateArgument` match your `id`."""
  UNKNOWN_DEBATE_ARGUMENT

  """You are neither an admin nor the author of the `DebateArgument`."""
  CANNOT_DELETE_DEBATE_ARGUMENT
}

input DeleteDebateArgumentInput {
  """The Node ID of the `DebateArgument`."""
  id: ID!
  clientMutationId: String
}

type DeleteDebateArgumentPayload {
  """The id that had just been deleted."""
  deletedDebateArgumentId: ID

  """An unsuccessful mutation will return an error."""
  errorCode: DeleteDebateArgumentErrorCode

  """The deleted argument associated debate."""
  debate: Debate
  clientMutationId: String
}

"""Available errors for an `deleteDebateOpinion` mutation."""
enum DeleteDebateOpinionErrorCode {
  """No `DebateOpinion` match your `debateOpinionId`."""
  UNKNOWN_DEBATE_OPINION
}

input DeleteDebateOpinionInput {
  """The Node ID of the `DebateOpinion`."""
  debateOpinionId: ID!
  clientMutationId: String
}

type DeleteDebateOpinionPayload {
  """The id just deleted."""
  deletedDebateOpinionId: ID

  """The debate of the deleted opinion."""
  debate: Debate

  """An unsuccessful mutation will return an error."""
  errorCode: DeleteDebateOpinionErrorCode
  clientMutationId: String
}

"""Available errors on campaign deletion"""
enum DeleteEmailingCampaignsErrorCode {
  """No campaign match your id"""
  ID_NOT_FOUND

  """No campaign in request"""
  EMPTY
}

input DeleteEmailingCampaignsInput {
  """The campaigns to delete"""
  ids: [ID!]!
  clientMutationId: String
}

type DeleteEmailingCampaignsPayload {
  """The mailing lists deleted"""
  deletedIds: [ID!]!

  """The mailing lists archived"""
  archivedIds: [ID!]!

  """The error code, if any"""
  error: DeleteEmailingCampaignsErrorCode
  clientMutationId: String
}

input DeleteEventInput {
  """The ID of the event to delete."""
  eventId: ID!
  clientMutationId: String
}

type DeleteEventPayload {
  deletedEventId: ID

  """The event."""
  event: Event
  clientMutationId: String
}

input DeleteFontInput {
  """The ID of the font to delete."""
  id: ID!
  clientMutationId: String
}

type DeleteFontPayload {
  deletedFontId: ID
  bodyFont: Font!
  headingFont: Font!

  """An unsuccessful mutation will return one or more `UserError` objects."""
  userErrors: [UserError]
  clientMutationId: String
}

input DeleteGlobalDistrictInput {
  id: ID!
}

type DeleteGlobalDistrictPayload {
  deletedDistrictId: ID

  """An unsuccessful mutation will return one or more `UserError` objects."""
  userErrors: [UserError!]!
  clientMutationId: String
}

input DeleteGroupInput {
  """The group id"""
  groupId: ID!
  clientMutationId: String
}

type DeleteGroupPayload {
  deletedGroupId: ID!
  clientMutationId: String
}

input DeleteMailingListInput {
  """The mailing lists list to delete"""
  ids: [ID!]!
  clientMutationId: String
}

type DeleteMailingListPayload {
  """The mailing lists deleted"""
  deletedIds: [ID!]!

  """The error code, if any"""
  error: String
  clientMutationId: String
}

input DeleteMediaAdminInput {
  """List of media ID to delete."""
  ids: [ID]!

  """Delete all medias bypassing given ids"""
  all: Boolean! = false
}

type DeleteMediaAdminPayload {
  deletedMediaIds: [ID]!

  """An unsuccessful mutation will return one or more `UserError` objects."""
  userErrors: [UserError!]!
  clientMutationId: String
}

input DeleteMediatorInput {
  """The mediator ID to delete"""
  mediatorId: ID!
  clientMutationId: String
}

type DeleteMediatorPayload {
  deletedMediatorId: ID!
  clientMutationId: String
}

"""Available errors on OfficialResponse removal"""
enum DeleteOfficialResponseErrorCode {
  """No OfficialResponse match your id"""
  ID_NOT_FOUND
}

input DeleteOfficialResponseInput {
  """The id of the OfficialResponse to delete."""
  id: ID!
  clientMutationId: String
}

type DeleteOfficialResponsePayload {
  """The id of the OfficialResponse who just have been deleted."""
  id: ID

  """The error, if any."""
  error: DeleteOfficialResponseErrorCode
  clientMutationId: String
}

input DeleteOpinionInput {
  """The opinion id"""
  opinionId: ID!
  clientMutationId: String
}

type DeleteOpinionPayload {
  """The deleted ID."""
  deletedOpinionId: ID
  clientMutationId: String
}

"""Available errors for an `deleteOrganization` mutation."""
enum DeleteOrganizationErrorCode {
  """No `Organization` match your `organizationId`."""
  ORGANIZATION_NOT_FOUND

  """The given organization has already been anonymized."""
  ORGANIZATION_ALREADY_ANONYMIZED
}

input DeleteOrganizationInput {
  """The id of the organization to delete"""
  organizationId: ID!
  clientMutationId: String
}

"""Available errors for an `deleteOrganizationInvitionInput` mutation."""
enum DeleteOrganizationInvitationErrorCode {
  """The invitation for the given ID is not found."""
  INVITATION_NOT_FOUND
}

input DeleteOrganizationInvitationInput {
  """The invitation id to delete."""
  invitationId: ID!
  clientMutationId: String
}

type DeleteOrganizationInvitationPayload {
  """The deleted invitation id."""
  invitationId: ID

  """The available errors for deleteOrganizationInvitation mutation."""
  errorCode: DeleteOrganizationInvitationErrorCode
  clientMutationId: String
}

type DeleteOrganizationPayload {
  """The deleted organization."""
  deletedOrganization: Organization

  """Errors for deleteOrganization mutation."""
  errorCode: DeleteOrganizationErrorCode
  clientMutationId: String
}

input DeleteParticipantInput {
  """Token of the participant."""
  participantToken: ID!

  """ID of the mediator."""
  mediatorId: ID!
  clientMutationId: String
}

type DeleteParticipantPayload {
  """The ID of the deleted participant."""
  deletedParticipantId: ID!
  clientMutationId: String
}

input DeletePostInput {
  """The id of the post to delete"""
  id: ID!
  clientMutationId: String
}

type DeletePostPayload {
  """The deleted post id"""
  deletedPostId: ID
  clientMutationId: String
}

input DeleteProjectInput {
  """The id of the project to delete"""
  id: ID!
  clientMutationId: String
}

type DeleteProjectPayload {
  """The deleted project id"""
  deletedProjectId: ID
  clientMutationId: String
}

input DeleteProposalFormInput {
  """The id of the `ProposalForm` to delete."""
  id: ID!
  clientMutationId: String
}

type DeleteProposalFormPayload {
  """The deleted `ProposalForm` id."""
  deletedProposalFormId: ID
  clientMutationId: String
}

input DeleteProposalInput {
  """The proposal id"""
  proposalId: ID!
  clientMutationId: String
}

input DeleteProposalNewsInput {
  """The Node ID of the proposal news."""
  postId: ID!
  clientMutationId: String
}

type DeleteProposalNewsPayload {
  """The Node ID of the proposal news."""
  postId: ID

  """The url of proposal to be redirect."""
  proposalUrl: URI

  """An unsuccessful mutation will return an error message"""
  errorCode: ProposalNewsErrorCode
  clientMutationId: String
}

type DeleteProposalPayload {
  proposal: Proposal!
  step: CollectStep!
  clientMutationId: String
}

input DeleteQuestionnaireInput {
  """The id of the Questionnaire to delete"""
  id: ID!
  clientMutationId: String
}

type DeleteQuestionnairePayload {
  """The deleted questionnaire id"""
  deletedQuestionnaireId: ID
  clientMutationId: String
}

input DeleteRepliesInput {
  """The list of replies ID to delete"""
  replyIds: [ID!]!
  clientMutationId: String
}

type DeleteRepliesPayload {
  replyIds: [ID!]!
  clientMutationId: String
}

input DeleteSSOConfigurationInput {
  """The ID of SSO Configuration that needs to be deleted."""
  id: ID!
  clientMutationId: String
}

type DeleteSSOConfigurationPayload {
  deletedSsoConfigurationId: ID
  userErrors: [UserError]
  clientMutationId: String
}

"""Possible errors on createSenderEmailDomain mutation."""
enum DeleteSenderEmailDomainErrorCode {
  """No SenderEmailDomain match your id"""
  NOT_FOUND

  """SenderEmailDomain is used by a SenderEmail"""
  DOMAIN_USED
}

input DeleteSenderEmailDomainInput {
  """The SenderEmailDomain to delete."""
  id: ID!
  clientMutationId: String
}

type DeleteSenderEmailDomainPayload {
  """The deleted SenderEmailDomain."""
  deletedId: ID

  """The error generated, if any."""
  errorCode: DeleteSenderEmailDomainErrorCode
  clientMutationId: String
}

"""Available errors for an `deleteSmsOrder` mutation."""
enum DeleteSmsOrderErrorCode {
  """No `SmsOrder` match your `id`."""
  SMS_ORDER_NOT_FOUND
}

input DeleteSmsOrderInput {
  """The id of the smsOrder to delete."""
  id: ID!
  clientMutationId: String
}

type DeleteSmsOrderPayload {
  """The deleted sms order global id."""
  deletedSmsOrderId: ID!

  """The error generated, if any."""
  errorCode: DeleteSmsOrderErrorCode
  clientMutationId: String
}

input DeleteSourceInput {
  """The ID to delete."""
  sourceId: ID!
  clientMutationId: String
}

type DeleteSourcePayload {
  """The deleted ID."""
  deletedSourceId: ID

  """The parent of the deleted source."""
  sourceable: Sourceable
  clientMutationId: String
}

input DeleteStepInput {
  """The step ID to delete."""
  stepId: ID!

  """
  If true also delete the related proposal form/questionnaire/consultation
  """
  deleteRelatedResource: Boolean! = false
  clientMutationId: String
}

type DeleteStepPayload {
  """The deleted step ID."""
  stepId: ID!
  clientMutationId: String
}

"""Available errors in deleteUserIdentificationCodeList mutation."""
enum DeleteUserIdentificationCodeListErrorCode {
  """No UserIdentificationCodeList match the given global id."""
  NOT_FOUND
}

input DeleteUserIdentificationCodeListInput {
  """Global id of the list to delete."""
  id: ID!
  clientMutationId: String
}

type DeleteUserIdentificationCodeListPayload {
  """The id of the list just deleted, if successful."""
  deletedUserIdentificationCodeListId: ID

  """The error code, if failing."""
  errorCode: DeleteUserIdentificationCodeListErrorCode
  clientMutationId: String
}

input DeleteUserInGroupInput {
  """The user id"""
  userId: ID!

  """The group id"""
  groupId: ID!
  clientMutationId: String
}

type DeleteUserInGroupPayload {
  group: Group!
  clientMutationId: String
}

input DeleteUserReplyInput {
  """The id of the reply"""
  id: ID!
  clientMutationId: String
}

type DeleteUserReplyPayload {
  questionnaire: Questionnaire!
  replyId: ID!
  clientMutationId: String
}

input DeleteVersionInput {
  """The version id"""
  versionId: ID!
  clientMutationId: String
}

type DeleteVersionPayload {
  """The deleted ID."""
  deletedVersionId: ID

  """The parent of the deleted `Version`."""
  opinion: Opinion
  clientMutationId: String
}

"""A district"""
interface District {
  """The ID of an object"""
  id: ID!
  name(
    """The locale to translate content (eg: FR_FR)."""
    locale: TranslationLocale
  ): String!
  slug(
    """The locale to translate content (eg: FR_FR)."""
    locale: TranslationLocale
  ): String!
  titleOnMap(
    """The locale to translate content (eg: FR_FR)."""
    locale: TranslationLocale
  ): String
  description(
    """The locale to translate content (eg: FR_FR)."""
    locale: TranslationLocale
  ): String
  geojson: GeoJSON
  geojsonStyle: CssJSON
  displayedOnMap: Boolean!
  border: Style
  background: Style
  translations: [DistrictTranslation!]!
  translationBySlug(slug: String!): DistrictTranslation!
}

input DistrictInput {
  id: ID

  """A GeoJSON format to display in map after."""
  geojson: GeoJSON

  """Should I display this on map?"""
  displayedOnMap: Boolean = false

  """The border style attached to this district."""
  border: BorderStyleInput

  """The background style attached to this district."""
  background: BackgroundStyleInput

  """The names of the district for each language"""
  translations: [DistrictTranslationInput!]!
}

"""Ordering options for districts returned from the connection."""
enum DistrictOrderField {
  """Allows ordering a list of districts in an alphabetical order."""
  ALPHABETICAL

  """Allows ordering a list of districts by when they were created."""
  CREATED_AT
}

"""A translation of a District."""
type DistrictTranslation {
  locale: String!
  name: String!
  slug: String!
  titleOnMap: String

  """The description of the district."""
  description: String
}

input DistrictTranslationInput {
  id: ID
  locale: String!
  name: String
  titleOnMap: String
  description: String
}

"""Entities that can be drafted."""
interface Draftable {
  """The ID of an object"""
  id: ID!

  """Whether or not the entity is a draft."""
  draft: Boolean!

  """Identifies when the entity was undraft at."""
  undraftAt: DateTime
}

input DuplicateProjectInput {
  id: ID!
  clientMutationId: String
}

type DuplicateProjectPayload {
  """The old project."""
  oldProject: Project

  """The new cloned project."""
  newProject: Project
  clientMutationId: String
}

"""Available errors on duplicateProposalForm mutation."""
enum DuplicateProposalFormErrorCode {
  """
  The requested `ProposalForm` does not exist or you have no rights on it.
  """
  NOT_FOUND
}

input DuplicateProposalFormInput {
  """The id of the `ProposalForm` to duplicate."""
  id: ID!
  clientMutationId: String
}

type DuplicateProposalFormPayload {
  """Available errors on duplicateProposalForm mutation."""
  error: DuplicateProposalFormErrorCode

  """The cloned `ProposalForm`."""
  duplicatedProposalForm: ProposalForm
  clientMutationId: String
}

"""A contribution with an author"""
interface EditableContribution {
  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime
}

"""A string containing an email."""
scalar Email

"""Fetches an object given its ID"""
type EmailDomain implements Node {
  """The ID of an object"""
  id: ID!

  """The email domain value"""
  value: String!

  """The associated registration form for this email domain"""
  registrationForm: RegistrationForm
}

input EmailDomainInput {
  """The email domain value"""
  value: String!
}

"""A user, with or without account, who can receive email."""
type Emailable {
  """The user's public name."""
  username: String

  """The user's personal email."""
  email: Email
}

"""A connection to a list of items."""
type EmailableConnection {
  """Identifies the total count of items in the connection."""
  totalCount: Int!

  """
  Identifies the total count of refusing items in the connection. (Not fetched from connection)
  """
  refusingCount: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [EmailableEdge]
}

"""An edge in a connection."""
type EmailableEdge {
  """The item at the end of the edge."""
  node: Emailable!

  """A cursor for use in pagination."""
  cursor: String!
}

"""An emailing campaign"""
type EmailingCampaign implements Node {
  """uuid of the emailing campaign"""
  id: ID!

  """The user that created the resource."""
  creator: User

  """name of the emailing campaign"""
  name: String!

  """the email of the sender"""
  senderEmail: Email!

  """the name displayed of the sender"""
  senderName: String!

  """the object of the email"""
  object: String!

  """the content of the email"""
  content: HTML!

  """Unlayer configuration in json format."""
  unlayerConf: JSON

  """the list of users who shall receive the email"""
  mailingList: MailingList

  """the group of users who shall receive the email"""
  emailingGroup: Group

  """an internal list used instead of a mailing list"""
  mailingInternal: EmailingCampaignInternalList

  """the project whose participants shall receive the email"""
  project: Project

  """the date when the email has been sent or shall be"""
  sendAt: DateTime

  """the status of the campaign"""
  status: EmailingCampaignStatus!

  """preview of the email"""
  preview: HTML

  """The owner of the emailing campaign."""
  owner: EmailingCampaignOwner
}

"""The affiliation of a user to an emailing campaign"""
enum EmailingCampaignAffiliation {
  """Emailing campaigns that are owned by the authenticated user."""
  OWNER
}

"""A connection to a list of items."""
type EmailingCampaignConnection {
  totalCount: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [EmailingCampaignEdge]
}

"""An edge in a connection."""
type EmailingCampaignEdge {
  """The item at the end of the edge."""
  node: EmailingCampaign!

  """A cursor for use in pagination."""
  cursor: String!
}

"""The available automated emailing lists"""
enum EmailingCampaignInternalList {
  """All users registered."""
  REGISTERED

  """Users registered but with email not confirmed."""
  NOT_CONFIRMED

  """Only confirmed users."""
  CONFIRMED
}

"""Ways in which lists of campaigns can be ordered upon return."""
input EmailingCampaignOrder {
  """The field to order users by."""
  field: EmailingCampaignOrderField! = SEND_AT

  """The ordering direction."""
  direction: OrderDirection! = DESC
}

"""Properties by which campaigns can be ordered"""
enum EmailingCampaignOrderField {
  """
  Allows ordering a list of campaign by when they have been sent or shall be sent.
  """
  SEND_AT
}

"""Represent an owner of an emailing campaign."""
interface EmailingCampaignOwner {
  """User ID"""
  id: ID!

  """User username"""
  username: String

  """Get all emailing campaigns."""
  emailingCampaigns(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """optional filter by status"""
    status: EmailingCampaignStatusFilter

    """The ordering direction for sending date"""
    orderBy: EmailingCampaignOrder = {field: SEND_AT, direction: DESC}

    """
    Array of viewer's affiliation options for mailing campaigns returned from
                                the connection. For example, OWNER will include only mailing lists that the
                                current viewer owns.
                                
    """
    affiliations: [EmailingCampaignAffiliation!]

    """If provided, filter campaigns by name"""
    term: String
  ): EmailingCampaignConnection!
}

"""The possible status of an emailing campaign"""
enum EmailingCampaignStatus {
  """not scheduled"""
  DRAFT

  """currently sending"""
  SENDING

  """already sent"""
  SENT

  """scheduled"""
  PLANNED

  """archived"""
  ARCHIVED
}

"""3 possible values"""
enum EmailingCampaignStatusFilter {
  """campaigns not scheduled"""
  DRAFT

  """campaigns already sent"""
  SENT

  """campaigns scheduled"""
  PLANNED
}

input EvaluateProposalAssessmentInput {
  """The id of the proposal to evaluate."""
  proposalId: ID!

  """The proposal assessment's body."""
  body: String

  """The estimated budget for the proposal."""
  estimatedCost: Int

  """The proposal assessment's official response."""
  officialResponse: String!
  clientMutationId: String

  """The decision about the proposal assessment."""
  decision: ProposalAssessmentDecision!
}

type EvaluateProposalAssessmentPayload {
  """The evaluated proposal."""
  assessment: ProposalAssessment

  """Contains the error code if one occurred."""
  errorCode: ProposalStatementErrorCode
  clientMutationId: String
}

"""A Evaluation form (question)"""
type EvaluationForm {
  """The ID of an object"""
  id: ID! @deprecated(reason: "\"This type belongs to our legacy evaluation tool.\", \"EvaluationForm\" will be removed, Use TODO\"})")

  """The title of evaluation form (question)"""
  title: String! @deprecated(reason: "\"This type belongs to our legacy evaluation tool.\", \"EvaluationForm\" will be removed, Use TODO\"})")

  """The description of evaluation form"""
  description: String @deprecated(reason: "\"This type belongs to our legacy evaluation tool.\", \"EvaluationForm\" will be removed, Use TODO\"})")

  """List of questions in the evaluation form"""
  questions: [Question!]! @deprecated(reason: "\"This type belongs to our legacy evaluation tool.\", \"EvaluationForm\" will be remov, Use  \"TODO\"})")
}

"""An event."""
type Event implements Node & UniformResourceLocatable & Commentable & Contribution {
  """Expose Primary Key, do not use it, except for testing purpose."""
  _id: ID!

  """The user that created the resource."""
  creator: User

  """The ID of an object."""
  id: ID!

  """
  Return the related contribution if the contribution is related to another.
  """
  related: Contribution

  """The url of the event"""
  url: URI!

  """The comments related to the commentable."""
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
    orderBy: CommentOrder = {field: PUBLISHED_AT, direction: DESC}
  ): CommentConnection!

  """The comments not yet approved by moderators."""
  viewerNotApprovedByModeratorComments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
    orderBy: CommentOrder = {field: PUBLISHED_AT, direction: DESC}
  ): CommentConnection

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!

  """When the time interval begins or ends."""
  timeRange: TimeRange!

  """Did the viewer author this entity."""
  viewerDidAuthor: Boolean

  """Identifies the author of the event."""
  author: Author

  """The start date of the event."""
  startAt: DateTime! @deprecated(reason: "Field \"startAt\" will be removed Use \"timeRange.startAt\" instead.")

  """The end date of the event."""
  endAt: DateTime @deprecated(reason: "Field \"endAt\" will be removed Use \"timeRange.endAt\" instead.")

  """Whether or not this event is published."""
  enabled: Boolean!

  """Identifies the latitude of the event."""
  lat: Float @deprecated(reason: "Field \"lat\" will be removed, Use \"googleMapsAddress.lat\" instead.")

  """Identifies the longitude of the event."""
  lng: Float @deprecated(reason: "reason: \"This field use our legacy address format Field \"lng\" will be removed, Use \"googleMapsAddress.lng\" instead.")

  """Identifies the zip code of the event."""
  zipCode: String @deprecated(reason: "reason: \"This field use our legacy address format Field \"zipCode\" will be removed, Use \"googleMapsAddress.zipCode\" instead.")

  """Identifies the address of the event."""
  fullAddress: String @deprecated(reason: "reason:\"will be deleted\"")

  """Identifies the address of the event in google Maps format."""
  googleMapsAddress: GoogleMapsAddress

  """The translations availables for this event"""
  translations: [EventTranslation!]!

  """Identifies the title of the event."""
  title: String!

  """Identifies the body of the event."""
  body: HTML!

  """Identifies the registration link of the event."""
  link: URI

  """The event admin edit url"""
  adminUrl: URI!

  """A list of Users that are participating to the event."""
  participants(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
  ): EventParticipantConnection!
  themes: [Theme!]!
  projects: [Project!]!
  commentable: Boolean!
  media: Media
  address: String @deprecated(reason: "reason:\"will be deleted\"")
  addressJson: String
  guestListEnabled: Boolean!
  customCode: String
  city: String @deprecated(reason: "reason:\"will be deleted\"")
  country: String @deprecated(reason: "reason:\"will be deleted\"")

  """User submitted events must be reviewed by an admin"""
  review: EventReview

  """The delete date."""
  deletedAt: DateTime

  """Is the body using Jodit Wysiwyg."""
  bodyUsingJoditWysiwyg: Boolean!

  """The jitsi room name available on remote events only."""
  roomName: String

  """The slug of event"""
  slug: String!
  metaDescription: String

  """Author of event agree to use personal data for event only"""
  authorAgreeToUsePersonalDataForEventOnly: Boolean

  """Admin authorize data transfer"""
  adminAuthorizeDataTransfer: Boolean

  """Show if user is already participating at event"""
  isViewerParticipatingAtEvent: Boolean!

  """The steps corresponding to this event."""
  steps: [Step!]!

  """Whether or not registration is enabled on this event."""
  isRegistrationPossible: Boolean!

  """
  Whether or not registration is enabled on this event and event is complete.
  """
  isCompleteAndRegistrationPossibleResolver: Boolean!

  """Wheter or not the viewer can join the room before it starts."""
  viewerIsRoomAnimator: Boolean!

  """The owner of the event."""
  owner: EventOwner

  """The event status."""
  reviewStatus: EventReviewStatus

  """The url to export participants"""
  exportParticipantsUrl: URI

  """The remaining number of possible registrations"""
  availableRegistration: Int

  """Whether or not registration is complete"""
  isEventRegistrationComplete: Boolean!

  """Whether or not registration is measurable"""
  isMeasurable: Boolean!

  """The number of max registration available"""
  maxRegistrations: Int

  """Events districts."""
  districts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
  ): GlobalDistrictConnection
}

"""The affiliation of a user to a event"""
enum EventAffiliation {
  """Events that are owned by the authenticated user."""
  OWNER
}

"""A connection to a list of items."""
type EventConnection {
  totalCount: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [EventEdge]
}

"""An edge in a connection."""
type EventEdge {
  """The item at the end of the edge."""
  node: Event!

  """A cursor for use in pagination."""
  cursor: String!
}

input EventInput {
  startAt: String
  endAt: String
  authorEmail: String!
  themes: [String!]!
  projects: [String!]!
  districts: [String!]!
  guestListEnabled: Boolean!
  enabled: Boolean!
  commentable: Boolean!
  zipCode: String
  address: String
  customCode: String
  city: String
  country: String
  translations: [EventTranslationInput]
  title: String
  body: HTML
  link: URI
  metaDescription: String

  """Whether or not this event is registrations measurable."""
  measurable: Boolean! = false

  """If measurable what is the max allowed registrations"""
  maxRegistrations: Int
}

"""Ways in which lists of events can be ordered upon return."""
input EventOrder {
  """The field in which to order nodes by."""
  field: EventOrderField! = START_AT

  """The direction in which to order nodes."""
  direction: OrderDirection! = DESC
}

"""Ordering options for events returned from the connection."""
enum EventOrderField {
  """Order by the end date of the time range."""
  END_AT

  """Order by the start date of the time range."""
  START_AT
}

"""Represent an owner of a Event."""
interface EventOwner {
  """User ID"""
  id: ID!

  """User username"""
  username: String

  """Get all events that the user owns."""
  events(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """
    Array of viewer's affiliation options for events returned from the connection.
                                For example, OWNER will include only events that the current viewer owns.
                                
    """
    affiliations: [EventAffiliation!]

    """the search query"""
    search: String

    """The ordering direction for events."""
    orderBy: EventOrder = {field: START_AT, direction: DESC}

    """Filter events by a given status."""
    status: EventStatus = null

    """only fetch where user is author"""
    onlyWhenAuthor: Boolean = false
  ): EventConnection!
}

"""A connection to a list of items."""
type EventParticipantConnection {
  """Identifies the total count of items in the connection."""
  totalCount: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [EventParticipantEdge]
}

"""An edge in a connection."""
type EventParticipantEdge {
  registeredAt: DateTime!
  registeredAnonymously: Boolean!

  """The item at the end of the edge."""
  node: UserOrNotRegistered!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Type of refused event reason"""
enum EventRefusedReason {
  """The associated event review has been flagged as sexual content"""
  SEX

  """The associated event review has been flagged as offending content"""
  OFFENDING

  """The associated event review has been flagged as spam"""
  SPAM

  """The associated event review has been flagged as syntax error"""
  SYNTAX_ERROR

  """The associated event review has been flagged as wrong content"""
  WRONG_CONTENT

  """The associated event review has been flagged as off topic"""
  OFF_TOPIC

  """The associated event review has not been flagged"""
  NONE
}

"""A Review on an event."""
type EventReview {
  """Expose Primary Key, do not use it, except for testing purpose."""
  _id: ID!

  """The ID of an object."""
  id: ID!

  """Identifies the user who review"""
  reviewer: User

  """The details of reason why the review is refused"""
  comment: String

  """Kind of review is refused."""
  refusedReason: EventRefusedReason

  """The status of review."""
  status: EventReviewStatus!

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!

  """Identifies the date and time when the object was updated."""
  updatedAt: DateTime
}

"""Event Review status"""
enum EventReviewStatus {
  """The review is in approved status."""
  APPROVED

  """The review is in awaiting status."""
  AWAITING

  """The review is in refused status."""
  REFUSED

  """The event is published"""
  PUBLISHED

  """The event is not published"""
  NOT_PUBLISHED

  """The event deleted"""
  DELETED
}

"""List of available filters to filter `Event`"""
enum EventStatus {
  """Filter by approved status."""
  APPROVED

  """Filter by awaiting status."""
  AWAITING

  """Filter by refused status."""
  REFUSED

  """Filter by deleted status."""
  DELETED
}

"""Translation of an event."""
type EventTranslation {
  """IETF code of the translation of the event."""
  locale: TranslationLocale!
  title: String!

  """Identifies the body of the event."""
  body: HTML!

  """Identifies the registration link of the event."""
  link: URI

  """The slug of event"""
  slug: String!
  metaDescription: String
}

input EventTranslationInput {
  """the id of the event"""
  id: ID

  """the locale of the translation"""
  locale: TranslationLocale!

  """the translated title of the event"""
  title: String

  """the translated body of the event"""
  body: HTML!

  """the localized link of the event"""
  link: URI
  metaDescription: String
}

"""A configuration of an external service used by platform"""
type ExternalServiceConfiguration {
  """type of the configuration."""
  type: ExternalServiceConfigurationType!

  """value of the configuration."""
  value: String!
}

"""possible types for ExternalServiceConfiguration."""
enum ExternalServiceConfigurationType {
  """Choice of the external mailer client : mandrill or mailjet."""
  MAILER

  """Twilio verify service sid."""
  TWILIO_VERIFY_SERVICE_SID

  """Twilio verify service name."""
  TWILIO_VERIFY_SERVICE_NAME

  """Twilio subaccount sid."""
  TWILIO_SUBACCOUNT_SID

  """Twilio subaccount auth token."""
  TWILIO_SUBACCOUNT_AUTH_TOKEN
}

"""Extra data"""
type ExtraData implements Node {
  """The ID of an object."""
  id: ID!

  """When the carrouselElement start."""
  startAt: String

  """When the carrouselElement end."""
  endAt: String
}

input ExtraDataInput {
  id: ID

  """When the carrouselElement start."""
  startAt: String

  """When the carrouselElement end."""
  endAt: String
}

"""Facebook SSO Configuration."""
type FacebookSSOConfiguration implements Node & SSOConfiguration {
  """The ID of an object."""
  id: ID!

  """The name of configured SSO."""
  name: String!

  """Does this configuration is enabled?"""
  enabled: Boolean!

  """Profile URL on the SSO side."""
  profileUrl: URI

  """Whether or not disconnect sso on logout."""
  disconnectSsoOnLogout: Boolean!

  """Client ID."""
  clientId: String

  """Secret key."""
  secret: String
}

"""A feature flag."""
type FeatureFlag {
  type: FeatureFlagType!
  enabled: Boolean!
}

"""The possible types for a feature flag."""
enum FeatureFlagType {
  graphql_query_analytics
  questionnaire_result
  blog
  calendar
  captcha

  """Whether to use Turnstile captcha instead of Google Recaptcha"""
  turnstile_captcha
  consent_external_communication
  developer_documentation
  public_api
  graphql_introspection
  login_facebook
  privacy_policy
  members_list
  newsletter
  profiles
  projects_form
  project_trash
  search
  share_buttons
  shield_mode
  registration
  restrict_registration_via_email_domain
  themes
  export
  districts
  user_type
  votes_evolution
  server_side_rendering
  zipcode_at_register
  indexation
  consultation_plan
  consent_internal_communication
  oauth2_switch_user
  sso_by_pass_auth
  allow_users_to_propose_events
  login_franceconnect
  restrict_connection
  secure_password
  read_more
  remind_user_account_confirmation
  display_pictures_in_depository_proposals_list
  display_pictures_in_event_list
  external_project
  sentry_log
  multilangue
  http_redirects
  report_browers_errors_to_sentry
  login_saml
  login_cas
  login_openid
  phone_confirmation
  reporting
  display_map
  votes_min
  emailing
  emailing_parameters
  emailing_group
  proposal_revisions

  """Whether or not the new project card is active."""
  new_project_card

  """Secret export of users."""
  export_legacy_users

  """Whether or not admin can mass import proposals in BO."""
  import_proposals

  """Whether or not the analytics page is visible in BO."""
  analytics_page

  """Whether or not admin can use the project administrator feature."""
  project_admin

  """Whether or not profiles can be indexed."""
  noindex_on_profiles

  """Whether or not admin can create anonymous questionnaire."""
  anonymous_questionnaire

  """Whether or not the twilio service is enabled."""
  twilio

  """Whether or not the paper vote is enabled."""
  paper_vote
  versions

  """Whether or not the Helpscout beacon is enabled"""
  helpscout_beacon

  """Whether or not the Sendiblue API is enabled"""
  api_sendinblue

  """Whether or not proposal sms vote is enabled"""
  proposal_sms_vote

  """Whether or not organizations are enabled"""
  organizations

  """Whether or not comment moderation is enabled"""
  moderation_comment

  """Whether or not project create rework is enabled"""
  unstable__new_create_project

  """Whether or not new voting step is enabled"""
  new_vote_step

  """Whether or not votes can be added by mediators"""
  mediator

  """Whether or not the custom online help is enabled"""
  online_help

  """Whether or not full data display is enabled on the proposal card"""
  full_proposal_card

  """Whether or not the multi consultations are enabled"""
  multi_consultations

  """Whether or not collect proposals by email is enabled"""
  collect_proposals_by_email
}

"""Require a firstname"""
type FirstnameRequirement implements Node & Requirement & DataCollectedByFranceConnectRequirement {
  """The ID of an object"""
  id: ID!

  """Does the viewer meets the requirement ?"""
  viewerMeetsTheRequirement: Boolean!

  """Does the participant meets the requirement ?"""
  participantMeetsTheRequirement(
    """The token associated to the Participant."""
    token: String!
  ): Boolean!

  """The requirement type sent to the api."""
  type: RequirementType!

  """Wether or not the data is collected by france connect."""
  isCollectedByFranceConnect: Boolean

  """The firstname of the viewer."""
  viewerValue: String

  """The firstname of the participant."""
  participantValue(
    """The token associated to the Participant."""
    token: String!
  ): String
}

input FollowGlobalDistrictInput {
  """The global district id"""
  globalDistrictId: ID!

  """The type of notification"""
  notifiedOf: SubscriptionTypeValue!
  clientMutationId: String
}

type FollowGlobalDistrictPayload {
  globalDistrict: GlobalDistrict
  followerEdge: FollowerEdge
  errorCode: GlobalDistrictErrorCode
  clientMutationId: String
}

input FollowOpinionInput {
  """The opinion id"""
  opinionId: ID!

  """The type of notification"""
  notifiedOf: SubscriptionTypeValue!
  clientMutationId: String
}

type FollowOpinionPayload {
  opinion: OpinionOrVersion
  followerEdge: FollowerEdge
  clientMutationId: String
}

input FollowProposalInput {
  """The proposal id"""
  proposalId: ID!

  """The type of notification"""
  notifiedOf: SubscriptionTypeValue!
  clientMutationId: String
}

type FollowProposalPayload {
  proposal: Proposal
  followerEdge: FollowerEdge
  clientMutationId: String
}

"""A follower"""
type Follower {
  proposal: Proposal
  opinion: Opinion
  user: User!
  notifiedOf: SubscriptionTypeValue
}

"""A connection to a list of items."""
type FollowerConnection {
  totalCount: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [FollowerEdge]
}

"""An edge in a connection."""
type FollowerEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Ways in which follower connections can be ordered."""
input FollowerOrder {
  """The field in which to order nodes by."""
  field: FollowerOrderField!

  """The direction in which to order nodes."""
  direction: OrderDirection! = ASC
}

"""Properties by which follower connections can be ordered"""
enum FollowerOrderField {
  """Allows ordering a list of followers namely."""
  NAME

  """Allows ordering a list of followers by when they were followed."""
  FOLLOWED_AT

  """Allows ordering a list of followers randomly."""
  RANDOM
}

"""Fetches an object given its ID"""
type Font {
  """The ID of an object."""
  id: ID!

  """The font name"""
  name: String!

  """The associated font file"""
  file: Media

  """Is the font used for headings?"""
  useAsHeading: Boolean!

  """Is the font used for body?"""
  useAsBody: Boolean!

  """Is the font uploaded by user?"""
  isCustom: Boolean!
  weight: String
  style: String
}

"""An object containing footer data."""
type Footer {
  socialNetworks: [FooterSocialNetworks]
  links: [FooterLinks]
  legals: FooterLegals
  cookiesPath: String
  legalPath: String
  privacyPath: String
}

"""An object containing footer legals data."""
type FooterLegals {
  cookies: Boolean!
  legal: Boolean!
  privacy: Boolean!
}

"""An object containing footer links data."""
type FooterLinks {
  name: String!
  url: URI!
}

"""An object containing footer social networks data."""
type FooterSocialNetworks {
  title: String!
  link: URI!
  style: String!
}

"""For or against."""
enum ForOrAgainstValue {
  """An against value"""
  AGAINST

  """A for value"""
  FOR
}

"""Geolocalization formatted informations."""
type FormattedGeolocalization {
  """The author country name."""
  countryName: String

  """The author region name."""
  regionName: String

  """The author city name."""
  cityName: String
}

"""Many possible values"""
enum FranceConnectAllowedData {
  """Fields firstname"""
  given_name

  """Fields lastname"""
  family_name

  """Fields birth date"""
  birthdate

  """Fields birth place"""
  birthplace

  """Fields birth country"""
  birthcountry

  """Fields gender"""
  gender

  """Fields email"""
  email

  """Fields username"""
  preferred_username
}

"""Require France Connect authentication"""
type FranceConnectRequirement implements Node & Requirement {
  """The ID of an object"""
  id: ID!

  """Does the viewer meets the requirement ?"""
  viewerMeetsTheRequirement: Boolean!

  """Does the participant meets the requirement ?"""
  participantMeetsTheRequirement(
    """The token associated to the Participant."""
    token: String!
  ): Boolean!

  """The requirement type sent to the api."""
  type: RequirementType!

  """The viewer's france connect id"""
  viewerValue: String
}

"""France Connect SSO Configuration."""
type FranceConnectSSOConfiguration implements Node & SSOConfiguration {
  """The ID of an object."""
  id: ID!

  """The name of configured SSO."""
  name: String!

  """Does this configuration is enabled?"""
  enabled: Boolean!

  """Profile URL on the SSO side."""
  profileUrl: URI

  """Whether or not disconnect sso on logout."""
  disconnectSsoOnLogout: Boolean!

  """Client ID."""
  clientId: String

  """Secret key."""
  secret: String

  """Authorization URL."""
  authorizationUrl: URI!

  """Access token URL."""
  accessTokenUrl: URI!

  """User info URL."""
  userInfoUrl: URI!

  """Logout URL."""
  logoutUrl: URI

  """Environment mode."""
  environment: SSOEnvironment!

  """Redirect URI callback."""
  redirectUri: URI!

  """Unattended DataChoice as array."""
  allowedData: [FranceConnectAllowedData!]!

  """Is France Connect completely configured"""
  isCompletelyConfigured: Boolean!
}

"""3 possible values"""
enum GenderValue {
  MALE
  FEMALE
  OTHER
}

"""A geo bounding box"""
input GeoBoundingBox {
  """The topleft coordinate to set the box."""
  topLeft: Location!

  """The bottomRight coordinate to set the box."""
  bottomRight: Location!
}

"""A string containing GeoJSON code."""
scalar GeoJSON

"""A global district"""
type GlobalDistrict implements District & Node & NodeSlug {
  """The ID of an object"""
  id: ID!
  name(
    """The locale to translate content (eg: FR_FR)."""
    locale: TranslationLocale
  ): String!
  slug(
    """The locale to translate content (eg: FR_FR)."""
    locale: TranslationLocale
  ): String!
  titleOnMap(
    """The locale to translate content (eg: FR_FR)."""
    locale: TranslationLocale
  ): String
  description(
    """The locale to translate content (eg: FR_FR)."""
    locale: TranslationLocale
  ): String
  geojson: GeoJSON
  geojsonStyle: CssJSON
  displayedOnMap: Boolean!
  border: Style
  background: Style
  translations: [DistrictTranslation!]!
  translationBySlug(slug: String!): DistrictTranslation!

  """The list of followers of the district"""
  followers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """Ordering options for followers returning from the connection"""
    orderBy: FollowerOrder = {field: FOLLOWED_AT, direction: DESC}
  ): UserConnection!

  """Identifies the viewer following configuration on the entity."""
  viewerFollowingConfiguration: SubscriptionTypeValue

  """Identifies if the viewer is following the entity."""
  viewerIsFollowing: Boolean!

  """The list of projects in district"""
  projects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
  ): ProjectConnection
  projectDistrictPositioners: [ProjectDistrictPositioner]
  cover: Media

  """Expose Primary Key, do not use it, except for testing purpose."""
  _id: ID!
}

"""A connection to a list of items."""
type GlobalDistrictConnection {
  totalCount: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [GlobalDistrictEdge]
}

"""An edge in a connection."""
type GlobalDistrictEdge {
  """The item at the end of the edge."""
  node: GlobalDistrict

  """A cursor for use in pagination."""
  cursor: String!
}

"""Available errors on proposal news mutation"""
enum GlobalDistrictErrorCode {
  """The given district is not found"""
  DISTRICT_NOT_FOUND

  """The given follower is not found"""
  FOLLOWER_NOT_FOUND
}

"""An address from Google Maps."""
type GoogleMapsAddress {
  """The raw response from the Google Maps API that describes an address"""
  json: String!

  """A human-readable address string."""
  formatted: String

  """
  The available types for this address. A type indicate the accuracy of the address on Google Maps.
  """
  types: [GoogleMapsAddressType!]!

  """The latitude of this address."""
  lat: Float!

  """The longitude of this address."""
  lng: Float!
}

"""A list of possible types for a given address from Google Maps."""
enum GoogleMapsAddressType {
  """Returns only the addresses that are characterized as approximate"""
  APPROXIMATE

  """
  Returns only geometric centers of a location such as a polyline (for example, a street) or polygon (region).
  """
  GEOMETRIC_CENTER

  """
  Returns only the addresses that reflect an approximation (usually on a road)
  interpolated between two precise points (such as intersections). An
  interpolated range generally indicates that rooftop geocodes are unavailable
  for a street address.
  """
  RANGE_INTERPOLATED

  """
  Returns only the addresses for which Google has location information accurate down to street address precision.
  """
  ROOFTOP
}

"""A group of User"""
type Group implements Node {
  """The ID of an object."""
  id: ID!

  """Identifies the group name."""
  title: String

  """Identifies the description of the group."""
  description: String

  """Get all users of the group."""
  users(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """Filter the list by email confirmation"""
    emailConfirmed: Boolean = true

    """Filter the list by consent to internal communication"""
    consentInternalCommunication: Boolean = null
  ): UserConnection!

  """Get all users and pending invitations"""
  members(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """Filter by email or username"""
    term: String
  ): GroupMemberConnection!
  createdAt: DateTime!
  updatedAt: DateTime

  """Get all userInvite who are still pending"""
  pendingInvitations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
  ): UserInviteConnection!

  """Whether or not group is used in emailing campaign"""
  isUsedInEmailing: Boolean!
}

"""A connection to a list of items."""
type GroupConnection {
  totalCount: Int!
  totalUserCount: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [GroupEdge]
}

"""An edge in a connection."""
type GroupEdge {
  """The item at the end of the edge."""
  node: Group!

  """A cursor for use in pagination."""
  cursor: String!
}

"""A user invitation"""
type GroupMember {
  """The id of the user when they have an account"""
  userId: String

  """The user username if already registered otherwise empty string."""
  username: String!

  """The user or pending user email."""
  email: String!

  """Member or invitation."""
  type: String!
}

"""A connection to a list of items."""
type GroupMemberConnection {
  totalCount: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [GroupMemberEdge]
}

"""An edge in a connection."""
type GroupMemberEdge {
  """The item at the end of the edge."""
  node: GroupMember

  """A cursor for use in pagination."""
  cursor: String!
}

"""A string containing HTML code."""
scalar HTML

input HandleProposalFormCategoryImageInput {
  """Id of the image media."""
  mediaId: ID!

  """ADD or DELETE"""
  action: ProposalFormCategoryImageMutationAction!
  clientMutationId: String
}

type HandleProposalFormCategoryImagePayload {
  categoryImage: CategoryImage
  deletedCategoryImageId: ID
  clientMutationId: String
}

"""Section projects map page in admin"""
type HomePageProjectsMapSectionConfiguration {
  """The ID of an object."""
  id: ID!

  """The title of the section"""
  title: String

  """The subtitle of the section"""
  teaser: String

  """The position of the section in the homepage"""
  position: Int!

  """Whether it is published or not"""
  enabled: Boolean!

  """The latitude of the center of map."""
  centerLatitude: Float

  """The longitude of the center of map."""
  centerLongitude: Float

  """The level of zoom of the map."""
  zoomMap: Int
}

input HomePageProjectsMapSectionConfigurationTranslationInput {
  """The title of the section"""
  title: String!

  """The subtitle of the section"""
  teaser: String

  """the locale of the translation"""
  locale: TranslationLocale!
  clientMutationId: String
}

"""Section projects page in admin"""
type HomePageProjectsSectionConfiguration {
  """The ID of an object."""
  id: ID!

  """The title of the section"""
  title: String

  """The subtitle of the section"""
  teaser: String

  """The position of the section in the homepage"""
  position: Int!

  """How to display the proposals"""
  displayMode: HomePageProjectsSectionConfigurationDisplayMode!

  """Number of objects to display"""
  nbObjects: Int!

  """Whether it is published or not"""
  enabled: Boolean!
  projects: ProjectConnection!
}

enum HomePageProjectsSectionConfigurationDisplayMode {
  """
  display the most recents projects in the projects section of the homepage
  """
  MOST_RECENT

  """
  allow the admin to choose which projects to display in the projects section of the homepage
  """
  CUSTOM
}

input HomePageProjectsSectionConfigurationTranslationInput {
  """The title of the section"""
  title: String!

  """The subtitle of the section"""
  teaser: String

  """the locale of the translation"""
  locale: String!
  clientMutationId: String
}

"""A string containing an IP address."""
scalar IP

"""Requires an identification code"""
type IdentificationCodeRequirement implements Node & Requirement {
  """The ID of an object"""
  id: ID!

  """Does the viewer meets the requirement ?"""
  viewerMeetsTheRequirement: Boolean!

  """Does the participant meets the requirement ?"""
  participantMeetsTheRequirement(
    """The token associated to the Participant."""
    token: String!
  ): Boolean!

  """The requirement type sent to the api."""
  type: RequirementType!

  """The viewer's identification code"""
  viewerValue: String

  """The identification code of the participant."""
  participantValue(
    """The token associated to the Participant."""
    token: String!
  ): String
}

"""An imap configuration"""
type ImapConfig {
  """The imap configuration ID."""
  id: ID

  """The imap server url to connect to."""
  serverUrl: String

  """Which email folder to retreive the emails."""
  folder: String

  """The email to authenticate to the mailbox."""
  email: String

  """The password to authenticate to the mailbox."""
  password: String
}

"""Available errors for an `inviteOrganizationMember` mutation."""
enum InviteOrganizationMemberErrorCode {
  """No `Organization` match your `organizationId`."""
  ORGANIZATION_NOT_FOUND

  """The invited user is already a member of the organization."""
  USER_ALREADY_MEMBER

  """The invited user is already invited."""
  USER_ALREADY_INVITED

  """The invited user is not only regular user."""
  USER_NOT_ONLY_ROLE_USER

  """The invited user is already member of another organization."""
  USER_ALREADY_MEMBER_OF_ANOTHER_ORGANIZATION
}

input InviteOrganizationMemberInput {
  """The organization to which the user is invited."""
  organizationId: ID!

  """The invited user email."""
  email: Email!

  """The given role to the invited user."""
  role: OrganizationMemberRole!
  clientMutationId: String
}

type InviteOrganizationMemberPayload {
  """The created organization invite."""
  invitation: PendingOrganizationInvitation

  """The available errors for inviteOrganizationMember mutation."""
  errorCode: InviteOrganizationMemberErrorCode
  clientMutationId: String
}

input InviteUsersInput {
  """Set the maximum results to return"""
  maxResults: Int = 100

  """The list of emails to invite"""
  emails: [String!]!

  """The newly invited users role"""
  role: InviteUsersRole!

  """Users will be invited to join these groups"""
  groups: [ID]!

  """The custom message of the invitation"""
  message: String

  """the URL to which the user will be redirected"""
  redirectionUrl: URI
  clientMutationId: String
}

type InviteUsersPayload {
  """The newly added user invitations edge"""
  newInvitations: [UserInviteEdge!]!

  """The updated user invitations edge"""
  updatedInvitations: [UserInviteEdge!]!
  clientMutationId: String
}

"""Available roles for an `inviteUsers` mutation."""
enum InviteUsersRole {
  """Give the user the `ROLE_USER` role."""
  ROLE_USER

  """Give the user the `ROLE_ADMIN` role."""
  ROLE_ADMIN

  """Give the user the `ROLE_PROJECT_ADMIN` role."""
  ROLE_PROJECT_ADMIN
}

"""A string containing JSON code."""
scalar JSON

"""Ways in which a question jump can be ordered."""
input JumpsOrder {
  """The field in which to order jumps by."""
  field: JumpsOrderField

  """The direction in which to order jumps."""
  direction: OrderDirection
}

"""Properties by which question jumps can be ordered"""
enum JumpsOrderField {
  """Allows ordering a list of question jumps by its position."""
  POSITION
}

"""Available errors for an `kickFromOrganization` mutation."""
enum KickFromOrganizationErrorCode {
  """Organization not found or not admin."""
  ORGANIZATION_NOT_FOUND

  """User not found or not a member of the organization."""
  USER_NOT_MEMBER
}

input KickFromOrganizationInput {
  """The organization from which the user is kicked."""
  organizationId: ID!

  """The kicked user id."""
  userId: ID!
  clientMutationId: String
}

type KickFromOrganizationPayload {
  """The deleted membership ID."""
  deletedMemberShipId: ID

  """The available errors for kickFromOrganization mutation."""
  errorCode: KickFromOrganizationErrorCode
  clientMutationId: String
}

"""Requires a lastname"""
type LastnameRequirement implements Node & Requirement & DataCollectedByFranceConnectRequirement {
  """The ID of an object"""
  id: ID!

  """Does the viewer meets the requirement ?"""
  viewerMeetsTheRequirement: Boolean!

  """Does the participant meets the requirement ?"""
  participantMeetsTheRequirement(
    """The token associated to the Participant."""
    token: String!
  ): Boolean!

  """The requirement type sent to the api."""
  type: RequirementType!

  """Wether or not the data is collected by france connect."""
  isCollectedByFranceConnect: Boolean

  """The lastname of the viewer."""
  viewerValue: String

  """The lastname of the participant."""
  participantValue(
    """The token associated to the Participant."""
    token: String!
  ): String
}

"""Available errors on leave organization mutation."""
enum LeaveOrganizationErrorCode {
  """The given organization does not exist."""
  ORGANIZATION_NOT_FOUND
}

input LeaveOrganizationInput {
  """The organization ID to leave."""
  organizationId: ID!
  clientMutationId: String
}

type LeaveOrganizationPayload {
  """The user's organizations."""
  organizations: [Organization]
  errorCode: LeaveOrganizationErrorCode
  clientMutationId: String
}

"""An available locale"""
type Locale {
  """uuid of the locale"""
  id: ID!

  """The key for translations of the title"""
  traductionKey: String!

  """The IETF reference code for the locale"""
  code: TranslationLocale!

  """True if admins can use this locale"""
  isEnabled: Boolean!

  """True if users can use this locale"""
  isPublished: Boolean!

  """True if the locale is used by default"""
  isDefault: Boolean!
}

"""A connection to a list of items."""
type LocaleConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [LocaleEdge]
}

"""An edge in a connection."""
type LocaleEdge {
  """The item at the end of the edge."""
  node: Locale

  """A cursor for use in pagination."""
  cursor: String!
}

input LocaleStatusInput {
  """locale ID."""
  id: ID!

  """Whether or not this locale is enabled"""
  isEnabled: Boolean

  """Whether or not this locale is published"""
  isPublished: Boolean
  clientMutationId: String
}

"""A location lat/lng."""
input Location {
  """The latitude of this address."""
  lat: Float!

  """The longitude of this address."""
  lng: Float!
}

"""A logic jump in a question."""
type LogicJump {
  id: ID!

  """Return the question that trigger this logic jump."""
  origin: Question!

  """Return the question which this logic jump leads to."""
  destination: Question!

  """
  Return the necessited conditions that needs to be fullfiled to trigger this logic jump.
  """
  conditions: [MultipleChoiceQuestionLogicJumpCondition!]!

  """Return the position of this logic jump."""
  position: Int!
}

"""A particular condition in a logic jump."""
interface LogicJumpCondition {
  id: ID!

  """Return the operator for this condition."""
  operator: LogicJumpConditionOperator!

  """
  Return the question which is going to be tested against the condition.
  """
  question: Question!
}

"""A particular condition in a logic jump."""
input LogicJumpConditionInput {
  id: ID

  """The operator used to check the condition"""
  operator: LogicJumpConditionOperator!

  """The id of the question you want to have a condition"""
  question: ID!

  """The answer the selected question should have to trigger the condition"""
  value: String
}

"""Possible operator for a logic jump condition"""
enum LogicJumpConditionOperator {
  """Allows to test an equality."""
  IS

  """Allows to test the opposite of an equality test."""
  IS_NOT
}

input LogicJumpInput {
  id: ID
  always: Boolean

  """The id of the question where the logic jump start"""
  origin: ID!

  """
  The id of the question where the logic jump end if the conditions are fulfilled
  """
  destination: ID!

  """
  A collection of conditions that you have to fulfill for displaying the destination question
  """
  conditions: [LogicJumpConditionInput]
}

"""A list of users to send email"""
type MailingList implements Node {
  """uuid of the mailing list"""
  id: ID!

  """The user that created the resource."""
  creator: User

  """name of the mailing list"""
  name: String!

  """users in the mailing list"""
  users(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """Filter the list by consent to internal communication"""
    consentInternalCommunicationOnly: Boolean = false
  ): UserConnection!

  """the project from which the list has been built, if any"""
  project: Project

  """false if used in a planned or sent email campaign"""
  isDeletable: Boolean

  """The owner of the mailing list."""
  owner: MailingListOwner
}

"""The affiliation of a user to a mailing list"""
enum MailingListAffiliation {
  """Mailing lists that are owned by the authenticated user."""
  OWNER
}

"""A connection to a list of items."""
type MailingListConnection {
  totalCount: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [MailingListEdge]
}

"""An edge in a connection."""
type MailingListEdge {
  """The item at the end of the edge."""
  node: MailingList!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Represent an owner of a mailing list."""
interface MailingListOwner {
  """User ID"""
  id: ID!

  """User username"""
  username: String

  """Get all mailingLists that the user owns."""
  mailingLists(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """
    Array of viewer's affiliation options for mailing campaigns returned from
                                the connection. For example, OWNER will include only mailing lists that the
                                current viewer owns.
                                
    """
    affiliations: [MailingListAffiliation!]

    """If provided, filter lists by name"""
    term: String
  ): MailingListConnection!
}

"""The main view : GRID, LIST or MAP"""
enum MainView {
  """View proposals as GRID"""
  GRID

  """View proposals as LIST"""
  LIST

  """View proposals as MAP"""
  MAP
}

"""Data corresponding to one majority question choice"""
type MajorityChoice {
  choice: MajorityChoiceType!
  count: Int!
}

"""Majority choice type"""
enum MajorityChoiceType {
  """The review is in approved status."""
  VERY_WELL

  """The review is in awaiting status."""
  WELL

  """The review is in refused status."""
  WELL_ENOUGH

  """The review is in refused status."""
  PASSABLE

  """The review is in refused status."""
  NOT_PASSABLE

  """The review is in refused status."""
  REJECTED
}

"""A majority question"""
type MajorityQuestion implements Question & Node {
  """The ID of an object."""
  id: ID!

  """Identifies the question title."""
  title: String!

  """Return responses on this questions."""
  responses(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """Get responses with user not confirmed"""
    withNotConfirmedUser: Boolean = false

    """Get responses in which the term appears."""
    term: String

    """Get responses matching given category."""
    iaCategory: String = null

    """Get responses matching given sentiment."""
    iaSentiment: CivicIASentiment = null

    """If true, get only responses starred by viewer."""
    hasViewerStarred: Boolean = false

    """Ordering options for responses."""
    orderBy: ResponsesOrder = {field: CREATED_AT, direction: DESC}
  ): ResponseConnection!
  number: Int!
  type: QuestionTypeValue!

  """The position of the question"""
  position: Int!
  private: Boolean!
  required: Boolean!
  helpText: String
  description: HTML

  """Is the description using Jodit Wysiwyg."""
  descriptionUsingJoditWysiwyg: Boolean!
  kind: String!
  slug: String!

  """Return users who answered the question"""
  participants(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """Get participant with user not confirmed"""
    withNotConfirmedUser: Boolean = false
  ): EventParticipantConnection!

  """The associated logic jumps to this question."""
  jumps(
    """Ordering options for question jumps."""
    orderBy: JumpsOrder = {field: POSITION, direction: ASC}
  ): [LogicJump!]!

  """The jumps of which this question is the destination"""
  destinationJumps: [LogicJump!]!

  """The destination of the always jump (the else case) of this question."""
  alwaysJumpDestinationQuestion: Question

  """Boolean to decide whether the question will be rendered or not"""
  hidden: Boolean!

  """Most used categories of responses, detected by CivicIA."""
  iaCategories(
    """If given, will limit the number of categories returned."""
    limit: Int
  ): [Counter!]!

  """
  Return an array of MajorityCategories containing the total of responses for each choices.
  """
  responsesByChoice: [MajorityChoice!]!

  """Return the total of votes."""
  totalVotesCount: Int!
}

"""A map token used for connecting external services with our maps"""
type MapToken implements Node {
  """The ID of an object"""
  id: ID!

  """Expose Primary Key, do not use it, except for testing purpose."""
  _id: ID!

  """The public token"""
  publicToken: String!

  """The secret token"""
  secretToken: String

  """The corresponding provider in which belongs the token"""
  provider: MapTokenProvider

  """
  The style id associated to this map token (available only if a style is applied)
  """
  styleId: ID

  """
  The style owner associated to this map token (available only if a style is applied)
  """
  styleOwner: String

  """The available styles associated to this map token"""
  styles(
    """Filter the styles by its visibility"""
    visibility: MapTokenStyleVisibility
  ): [MapTokenStyle]
  createdAt: DateTime!
  updatedAt: DateTime
}

"""The provider for a map token"""
enum MapTokenProvider {
  """Used for Mapbox service provider"""
  MAPBOX
}

"""A map token style"""
type MapTokenStyle {
  id: ID!

  """The name of the style"""
  name: String!
  createdAt: DateTime!
  updatedAt: DateTime

  """The version of the style"""
  version: Int!

  """The preview url of the style"""
  previewUrl: URI!

  """Does the style is the current one applied to the whole website?"""
  isCurrent: Boolean!

  """The owner of the style"""
  owner: String!

  """The visibility of the style"""
  visibility: MapTokenStyleVisibility!
}

"""The visibility of a style for a map token"""
enum MapTokenStyleVisibility {
  """The style is public"""
  PUBLIC

  """The style is private"""
  PRIVATE
}

"""A media"""
type Media implements UniformResourceLocatable {
  """The URL to this resource."""
  url(
    """The format of the media"""
    format: String
  ): URI!

  """The id of the media."""
  id: ID!
  name: String!
  size: String!
  enabled: Boolean!
  authorName: String
  description: String
  copyright: String
  contentType: String!
  providerReference: String!
  height: Int
  width: Int

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
}

"""A connection to a list of items."""
type MediaConnection {
  totalCount: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [MediaEdge]
}

"""An edge in a connection."""
type MediaEdge {
  """The item at the end of the edge."""
  node: Media!

  """A cursor for use in pagination."""
  cursor: String!
}

"""A media question."""
type MediaQuestion implements Question & Node {
  """The ID of an object."""
  id: ID!

  """Identifies the question title."""
  title: String!

  """Return responses on this questions."""
  responses(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """Get responses with user not confirmed"""
    withNotConfirmedUser: Boolean = false

    """Get responses in which the term appears."""
    term: String

    """Get responses matching given category."""
    iaCategory: String = null

    """Get responses matching given sentiment."""
    iaSentiment: CivicIASentiment = null

    """If true, get only responses starred by viewer."""
    hasViewerStarred: Boolean = false

    """Ordering options for responses."""
    orderBy: ResponsesOrder = {field: CREATED_AT, direction: DESC}
  ): ResponseConnection!
  number: Int!
  type: QuestionTypeValue!

  """The position of the question"""
  position: Int!
  private: Boolean!
  required: Boolean!
  helpText: String
  description: HTML

  """Is the description using Jodit Wysiwyg."""
  descriptionUsingJoditWysiwyg: Boolean!
  kind: String!
  slug: String!

  """Return users who answered the question"""
  participants(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """Get participant with user not confirmed"""
    withNotConfirmedUser: Boolean = false
  ): EventParticipantConnection!

  """The associated logic jumps to this question."""
  jumps(
    """Ordering options for question jumps."""
    orderBy: JumpsOrder = {field: POSITION, direction: ASC}
  ): [LogicJump!]!

  """The jumps of which this question is the destination"""
  destinationJumps: [LogicJump!]!

  """The destination of the always jump (the else case) of this question."""
  alwaysJumpDestinationQuestion: Question

  """Boolean to decide whether the question will be rendered or not"""
  hidden: Boolean!

  """Most used categories of responses, detected by CivicIA."""
  iaCategories(
    """If given, will limit the number of categories returned."""
    limit: Int
  ): [Counter!]!
}

"""A response"""
type MediaResponse implements Response {
  """The ID of an object."""
  id: ID!

  """Identifies the question of the response."""
  question: Question!

  """Identifies the reply of the response."""
  reply: Reply

  """True if the viewer has starred the response."""
  hasViewerStarred: Boolean!

  """Medias"""
  medias: [Media!]!
}

"""
User assigned to a project who can add votes in behalf of offline users.
"""
type Mediator implements Node {
  """The ID of an object"""
  id: ID!

  """The user who has a mediator role."""
  user: User!

  """Participants who are added by the mediator"""
  participants(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """Filter participants by fullname."""
    fullname: String
    orderBy: ParticipantOrder = {field: CREATED_AT, direction: DESC}
  ): ParticipantConnection

  """The votes added by the mediator."""
  votes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
  ): VoteConnection

  """The total of participants who have all their votes accounted."""
  totalParticipantsAccounted: Int

  """The total of participants who have filled in their email."""
  totalParticipantsOptIn: Int
}

"""A connection to a list of items."""
type MediatorConnection {
  """Identifies the total count of items in the connection."""
  totalCount: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [MediatorEdge]
}

"""An edge in a connection."""
type MediatorEdge {
  """The item at the end of the edge."""
  node: Mediator!

  """A cursor for use in pagination."""
  cursor: String!
}

"""A menu item."""
type MenuItem implements Node {
  """The ID of an object."""
  id: ID!

  """The position of the item in the menu."""
  position: Int!

  """The menu item title applied to the current locale"""
  title: String

  """The menu item link applied to the current locale"""
  link: String

  """The sub menus if the current item contains sub menus"""
  children: [MenuItem]!

  """The available translations for the menu item."""
  translations: [MenuItemTranslation!]!
}

"""Translation of a menu item."""
type MenuItemTranslation {
  """IETF code of the translation of the event."""
  locale: String!

  """The title of the menu item."""
  title: String

  """The link of the menu item."""
  link: URI
}

"""A multiple choice question"""
type MultipleChoiceQuestion implements Question & Node {
  """The ID of an object."""
  id: ID!

  """Identifies the question title."""
  title: String!

  """Return responses on this questions."""
  responses(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """Get responses with user not confirmed"""
    withNotConfirmedUser: Boolean = false

    """Get responses in which the term appears."""
    term: String

    """Get responses matching given category."""
    iaCategory: String = null

    """Get responses matching given sentiment."""
    iaSentiment: CivicIASentiment = null

    """If true, get only responses starred by viewer."""
    hasViewerStarred: Boolean = false

    """Ordering options for responses."""
    orderBy: ResponsesOrder = {field: CREATED_AT, direction: DESC}
  ): ResponseConnection!
  number: Int!
  type: QuestionTypeValue!

  """The position of the question"""
  position: Int!
  private: Boolean!
  required: Boolean!
  helpText: String
  description: HTML

  """Is the description using Jodit Wysiwyg."""
  descriptionUsingJoditWysiwyg: Boolean!
  kind: String!
  slug: String!

  """Return users who answered the question"""
  participants(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """Get participant with user not confirmed"""
    withNotConfirmedUser: Boolean = false
  ): EventParticipantConnection!

  """The associated logic jumps to this question."""
  jumps(
    """Ordering options for question jumps."""
    orderBy: JumpsOrder = {field: POSITION, direction: ASC}
  ): [LogicJump!]!

  """The jumps of which this question is the destination"""
  destinationJumps: [LogicJump!]!

  """The destination of the always jump (the else case) of this question."""
  alwaysJumpDestinationQuestion: Question

  """Boolean to decide whether the question will be rendered or not"""
  hidden: Boolean!

  """Most used categories of responses, detected by CivicIA."""
  iaCategories(
    """If given, will limit the number of categories returned."""
    limit: Int
  ): [Counter!]!
  isOtherAllowed: Boolean!

  """Responses of the `other` question choice."""
  otherResponses(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
  ): ResponseConnection!
  choices(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 9999

    """The searched term in multiple question choices."""
    term: String

    """
    If the question has `randomQuestionChoices: true` will return choices in a random order.
    """
    allowRandomize: Boolean = false
  ): QuestionChoiceConnection!
  validationRule: MultipleChoiceQuestionValidationRule
  randomQuestionChoices: Boolean!

  """
  When the question is of type button, do we disable the colors for the responses
  """
  responseColorsDisabled: Boolean!

  """
  When the question is of type button, do we show the responses in a compact bar instead
  """
  groupedResponsesEnabled: Boolean!

  """
  Return array containing object with number of occurrences by response's keywords.
  """
  tagCloud(
    """Defines the number of aggregation for the tag cloud."""
    size: Int = 20
  ): [TagCloudItem!]!
}

"""A particular condition in a logic jump in a multiple choice question."""
type MultipleChoiceQuestionLogicJumpCondition implements LogicJumpCondition {
  id: ID!

  """Return the operator for this condition."""
  operator: LogicJumpConditionOperator!

  """
  Return the question which is going to be tested against the condition.
  """
  question: Question!

  """
  The value that the condition should meet to be fullfiled (depending on the operator).
  """
  value: QuestionChoice!
}

"""Multiple Choice Question Validation Rule"""
type MultipleChoiceQuestionValidationRule {
  type: MultipleChoiceQuestionValidationRulesTypes!
  number: Int!
}

input MultipleChoiceQuestionValidationRuleInput {
  type: MultipleChoiceQuestionValidationRulesTypes!
  number: Int!
}

"""Available types of validation rules"""
enum MultipleChoiceQuestionValidationRulesTypes {
  MIN
  EQUAL
  MAX
}

"""This is the entry point into performing writes in the schema."""
type Mutation {
  addEvent(input: AddEventInput!): AddEventPayload
  changeEvent(input: ChangeEventInput!): ChangeEventPayload
  deleteEvent(input: DeleteEventInput!): DeleteEventPayload
  deleteAccountByEmail(input: DeleteAccountByEmailInput!): DeleteAccountByEmailPayload
  changeMapProviderToken(input: ChangeMapProviderTokenInput!): ChangeMapProviderTokenPayload
  changeMapStyle(input: ChangeMapStyleInput!): ChangeMapStylePayload
  removeSiteFavicon(input: RemoveSiteFaviconInput!): RemoveSiteFaviconPayload
  changeSiteFavicon(input: ChangeSiteFaviconInput!): ChangeSiteFaviconPayload
  reviewEvent(input: ReviewEventInput!): ReviewEventPayload
  addEvents(input: AddEventsInput!): AddEventsPayload
  addComment(input: AddCommentInput!): AddCommentPayload
  addSourceVote(input: AddSourceVoteInput!): AddSourceVotePayload
  addCommentVote(input: AddCommentVoteInput!): AddCommentVotePayload
  addOrganization(input: AddOrganizationInput!): AddOrganizationPayload
  leaveOrganization(input: LeaveOrganizationInput!): LeaveOrganizationPayload
  deleteOrganization(input: DeleteOrganizationInput!): DeleteOrganizationPayload
  addArgument(input: AddArgumentInput!): AddArgumentPayload
  addArgumentVote(input: AddArgumentVoteInput!): AddArgumentVotePayload
  addSource(input: AddSourceInput!): AddSourcePayload
  addVersion(input: AddVersionInput!): AddVersionPayload
  changeArgument(input: ChangeArgumentInput!): ChangeArgumentPayload
  changeVersion(input: ChangeVersionInput!): ChangeVersionPayload
  changeSource(input: ChangeSourceInput!): ChangeSourcePayload
  deleteArgument(input: DeleteArgumentInput!): DeleteArgumentPayload
  deleteComment(input: DeleteCommentInput!): DeleteCommentPayload
  deleteSource(input: DeleteSourceInput!): DeleteSourcePayload
  deleteOpinion(input: DeleteOpinionInput!): DeleteOpinionPayload
  deleteVersion(input: DeleteVersionInput!): DeleteVersionPayload
  addUserReply(input: AddUserReplyInput!): AddUserReplyPayload
  updateOrganization(input: UpdateOrganizationInput!): UpdateOrganizationPayload
  updateUserReply(input: UpdateUserReplyInput!): UpdateUserReplyPayload
  deleteUserReply(input: DeleteUserReplyInput!): DeleteUserReplyPayload
  addAnonymousReply(input: AddAnonymousReplyInput!): AddAnonymousReplyPayload
  updateAnonymousReply(input: UpdateAnonymousReplyInput!): UpdateAnonymousReplyPayload
  deleteAnonymousReply(input: DeleteAnonymousReplyInput!): DeleteAnonymousReplyPayload
  deleteReplies(input: DeleteRepliesInput!): DeleteRepliesPayload
  changeUserNotificationsConfiguration(input: ChangeUserNotificationsConfigurationInput!): ChangeUserNotificationsConfigurationPayload
  addOpinionVote(input: AddOpinionVoteInput!): AddOpinionVotePayload
  removeOpinionVote(input: RemoveOpinionVoteInput!): RemoveOpinionVotePayload
  removeArgumentVote(input: RemoveArgumentVoteInput!): RemoveArgumentVotePayload
  removeCommentVote(input: RemoveCommentVoteInput!): RemoveCommentVotePayload
  removeSourceVote(input: RemoveSourceVoteInput!): RemoveSourceVotePayload
  addProposalVote(input: AddProposalVoteInput!): AddProposalVotePayload
  removeProposalVote(input: RemoveProposalVoteInput!): RemoveProposalVotePayload
  updateProposalVotes(input: UpdateProposalVotesInput!): UpdateProposalVotesPayload
  changeProposalAssessment(input: ChangeProposalAssessmentInput!): ChangeProposalAssessmentPayload
  evaluateProposalAssessment(input: EvaluateProposalAssessmentInput!): EvaluateProposalAssessmentPayload
  changeProposalDecision(input: ChangeProposalDecisionInput!): ChangeProposalDecisionPayload
  changeProposalAnalysis(input: ChangeProposalAnalysisInput!): ChangeProposalAnalysisPayload
  analyseProposalAnalysis(input: AnalyseProposalAnalysisInput!): AnalyseProposalAnalysisPayload
  requestUserArchive(input: RequestUserArchiveInput!): RequestUserArchivePayload
  changeProposalPublicationStatus(input: ChangeProposalPublicationStatusInput!): ChangeProposalPublicationStatusPayload
  changeProposalContent(input: ChangeProposalContentInput!): ChangeProposalContentPayload
  createProposal(input: CreateProposalInput!): CreateProposalPayload
  addProposalsFromCsv(input: AddProposalsFromCsvInput!): AddProposalsFromCsvPayload
  createProposalFusion(input: CreateProposalFusionInput!): CreateProposalFusionPayload
  updateProposalFusion(input: UpdateProposalFusionInput!): UpdateProposalFusionPayload
  changeProposalNotation(input: ChangeProposalNotationInput!): ChangeProposalNotationPayload
  followProposal(input: FollowProposalInput!): FollowProposalPayload
  followOpinion(input: FollowOpinionInput!): FollowOpinionPayload
  updateFollowProposal(input: UpdateFollowProposalInput!): UpdateFollowProposalPayload
  updateFollowOpinion(input: UpdateFollowOpinionInput!): UpdateFollowOpinionPayload
  unfollowProposal(input: UnfollowProposalInput!): UnfollowProposalPayload
  unfollowOpinion(input: UnfollowOpinionInput!): UnfollowOpinionPayload
  followGlobalDistrict(input: FollowGlobalDistrictInput!): FollowGlobalDistrictPayload
  unfollowGlobalDistrict(input: UnfollowGlobalDistrictInput!): UnfollowGlobalDistrictPayload
  selectProposal(input: SelectProposalInput!): SelectProposalPayload
  unselectProposal(input: UnselectProposalInput!): UnselectProposalPayload
  changeSelectionStatus(input: ChangeSelectionStatusInput!): ChangeSelectionStatusPayload
  changeCollectStatus(input: ChangeCollectStatusInput!): ChangeCollectStatusPayload
  changeProposalProgressSteps(input: ChangeProposalProgressStepsInput!): ChangeProposalProgressStepsPayload
  addProposalsToSteps(input: AddProposalsToStepsInput!): AddProposalsToStepsPayload
  removeProposalsFromSteps(input: RemoveProposalsFromStepsInput!): RemoveProposalsFromStepsPayload
  applyProposalStatus(input: ApplyProposalStatusInput!): ApplyProposalStatusPayload
  deleteProposal(input: DeleteProposalInput!): DeleteProposalPayload
  updateRegistrationForm(input: UpdateRegistrationFormQuestionsInput!): UpdateRegistrationFormQuestionsPayload
  updateRegistrationFormCommunication(input: UpdateRegistrationFormCommunicationInput!): UpdateRegistrationFormCommunicationPayload
  contactProposalAuthor(input: ContactProposalAuthorInput!): ContactProposalAuthorPayload
  changeDistrict(input: ChangeDistrictInput!): ChangeDistrictPayload
  createProposalForm(input: CreateProposalFormInput!): CreateProposalFormPayload
  updateProposalForm(input: UpdateProposalFormInput!): UpdateProposalFormPayload
  deleteProposalForm(input: DeleteProposalFormInput!): DeleteProposalFormPayload
  duplicateProposalForm(input: DuplicateProposalFormInput!): DuplicateProposalFormPayload
  updateProposalFormNotificationsConfiguration(input: UpdateProposalFormNotificationsConfigurationInput!): UpdateProposalFormNotificationsConfigurationPayload
  updateQuestionnaireNotificationsConfiguration(input: UpdateQuestionnaireNotificationConfigurationInput!): UpdateQuestionnaireNotificationConfigurationPayload
  setEvaluationFormInProposalForm(input: SetEvaluationFormInProposalFormInput!): SetEvaluationFormInProposalFormPayload
  updateContactPage(input: UpdateContactPageInput!): UpdateContactPagePayload
  updateRegistrationPage(input: UpdateRegistrationPageInput!): UpdateRegistrationPagePayload
  sendContactForm(input: SendContactFormInput!): SendContactFormPayload
  addContactForm(input: AddContactFormInput!): AddContactFormPayload
  removeContactForm(input: RemoveContactFormInput!): RemoveContactFormPayload
  updateContactForm(input: UpdateContactFormInput!): UpdateContactFormPayload
  createGroup(input: CreateGroupInput!): CreateGroupPayload
  updateGroup(input: UpdateGroupInput!): UpdateGroupPayload
  deleteGroup(input: DeleteGroupInput!): DeleteGroupPayload
  deleteUserInGroup(input: DeleteUserInGroupInput!): DeleteUserInGroupPayload
  updateUsername(input: UpdateUsernameInput!): UpdateUsernamePayload
  updateProfilePassword(input: UpdateProfilePasswordInput!): UpdateProfilePasswordPayload
  updateProfilePersonalData(input: UpdateProfilePersonalDataInput!): UpdateProfilePersonalDataPayload
  updateProfilePublicData(input: UpdateProfilePublicDataInput!): UpdateProfilePublicDataPayload
  deleteAccount(input: DeleteAccountInput!): DeleteAccountPayload
  updateRequirement(input: UpdateRequirementInput!): UpdateRequirementPayload
  updateParticipantRequirement(input: UpdateParticipantRequirementInput!): UpdateParticipantRequirementPayload
  createUser(input: CreateUserInput!): CreateUserPayload
  updateUserAccount(input: UpdateUserAccountInput!): UpdateUserAccountPayload
  addUsersToGroupFromEmail(input: AddUsersToGroupFromEmailInput!): AddUsersToGroupFromEmailPayload
  createQuestionnaire(input: CreateQuestionnaireInput!): CreateQuestionnairePayload
  updateQuestionnaireParameters(input: UpdateQuestionnaireParametersInput!): UpdateQuestionnaireParametersPayload
  updateQuestionnaireConfiguration(input: UpdateQuestionnaireConfigurationInput!): UpdateQuestionnaireConfigurationPayload
  deleteQuestionnaire(input: DeleteQuestionnaireInput!): DeleteQuestionnairePayload
  createProject(input: CreateProjectInput!): CreateProjectPayload
  createAlphaProject(input: CreateAlphaProjectInput!): CreateAlphaProjectPayload
  updateAlphaProject(input: UpdateAlphaProjectInput!): UpdateAlphaProjectPayload
  preConfigureProject(input: PreConfigureProjectInput!): PreConfigureProjectPayload
  duplicateProject(input: DuplicateProjectInput!): DuplicateProjectPayload
  updateProject(input: UpdateProjectInput!): UpdateProjectPayload
  deleteProject(input: DeleteProjectInput!): DeleteProjectPayload
  createGlobalDistrict(input: CreateGlobalDistrictInput!): CreateGlobalDistrictPayload
  deleteGlobalDistrict(input: DeleteGlobalDistrictInput!): DeleteGlobalDistrictPayload
  updateGlobalDistrict(input: UpdateGlobalDistrictInput!): CreateGlobalDistrictPayload
  deleteMediaAdmin(input: DeleteMediaAdminInput!): DeleteMediaAdminPayload
  updateShieldAdminForm(input: UpdateShieldAdminFormInput!): UpdateShieldAdminFormPayload
  createOauth2SSOConfiguration(input: CreateOauth2SSOConfigurationInput!): CreateOauth2SSOConfigurationPayload
  updateOauth2SSOConfiguration(input: UpdateOauth2SSOConfigurationInput!): UpdateOauth2SSOConfigurationPayload
  createCASSSOConfiguration(input: CreateCASSSOConfigurationInput!): CreateCASSSOConfigurationPayload
  updateCASSSOConfiguration(input: UpdateCASSSOConfigurationInput!): UpdateCASSSOConfigurationPayload
  deleteSSOConfiguration(input: DeleteSSOConfigurationInput!): DeleteSSOConfigurationPayload
  toggleSSOConfigurationStatus(input: ToggleSSOConfigurationStatusInput!): ToggleSSOConfigurationStatusPayload
  updateFranceConnectSSOConfiguration(input: UpdateFranceConnectSSOConfigurationInput!): UpdateFranceConnectSSOConfigurationPayload
  updateFacebookSSOConfiguration(input: UpdateFacebookSSOConfigurationInput!): UpdateFacebookSSOConfigurationPayload
  updateLocaleStatus(input: UpdateLocaleStatusInput!): UpdateLocaleStatusPayload
  setDefaultLocale(input: SetDefaultLocaleInput!): SetDefaultLocalePayload
  setUserDefaultLocale(input: SetUserDefaultLocaleInput!): SetUserDefaultLocalePayload
  cropMedia(input: CropMediaInput!): CropMediaPayload
  changeFont(input: ChangeFontInput!): ChangeFontPayload
  deleteFont(input: DeleteFontInput!): DeleteFontPayload
  assignSupervisorToProposals(input: AssignSupervisorToProposalsInput!): AssignSupervisorToProposalsPayload
  assignDecisionMakerToProposals(input: AssignDecisionMakerToProposalsInput!): AssignDecisionMakerToProposalsPayload
  configureAnalysis(input: ConfigureAnalysisInput!): ConfigureAnalysisPayload
  updateRedirectIOKey(input: UpdateRedirectIOProjectIdInput!): UpdateRedirectIOProjectIdPayload
  revokeAnalystsToProposals(input: RevokeAnalystsToProposalsInput!): RevokeAnalystsToProposalsPayload
  assignAnalystsToProposals(input: AssignAnalystsToProposalsInput!): AssignAnalystsToProposalsPayload
  subscribeToEventAsNonRegistered(input: SubscribeToEventAsNonRegisteredInput!): SubscribeToEventAsNonRegisteredPayload
  subscribeToEventAsRegistered(input: SubscribeToEventAsRegisteredInput!): SubscribeToEventAsRegisteredPayload
  unsubscribeToEventAsRegistered(input: UnsubscribeToEventAsRegisteredInput!): UnsubscribeToEventAsRegisteredPayload
  updateProfileAccountEmail(input: UpdateProfileAccountEmailInput!): UpdateProfileAccountEmailPayload
  updateProfileAccountLocale(input: UpdateProfileAccountLocaleInput!): UpdateProfileAccountLocalePayload

  """Invite users in the application"""
  inviteUsers(input: InviteUsersInput!): InviteUsersPayload

  """Cancel user invitation in the application"""
  cancelUserInvitations(input: CancelUserInvitationsInput!): CancelUserInvitationsPayload

  """Relaunch invitations for the given users."""
  relaunchUserInvitations(input: RelaunchUserInvitationsInput!): RelaunchUserInvitationsPayload

  """Reset password"""
  resetPassword(input: ResetPasswordInput!): ResetPasswordPayload
  removeSso(input: RemoveSsoInput!): RemoveSsoPayload
  createMailingList(input: CreateMailingListInput!): CreateMailingListPayload
  deleteMailingList(input: DeleteMailingListInput!): DeleteMailingListPayload
  createEmailingCampaign(input: CreateEmailingCampaignInput!): CreateEmailingCampaignPayload
  deleteEmailingCampaigns(input: DeleteEmailingCampaignsInput!): DeleteEmailingCampaignsPayload
  updateEmailingCampaign(input: UpdateEmailingCampaignInput!): UpdateEmailingCampaignPayload
  sendEmailingCampaign(input: SendEmailingCampaignInput!): SendEmailingCampaignPayload
  testEmailingCampaign(input: TestEmailingCampaignInput!): TestEmailingCampaignPayload
  cancelEmailingCampaign(input: CancelEmailingCampaignInput!): CancelEmailingCampaignPayload
  updateOfficialResponse(input: UpdateOfficialResponseInput!): UpdateOfficialResponsePayload
  deleteOfficialResponse(input: DeleteOfficialResponseInput!): DeleteOfficialResponsePayload
  addDebateOpinion(input: AddDebateOpinionInput!): AddDebateOpinionPayload
  updateDebateOpinion(input: UpdateDebateOpinionInput!): UpdateDebateOpinionPayload
  deleteDebateOpinion(input: DeleteDebateOpinionInput!): DeleteDebateOpinionPayload
  addDebateVote(input: AddDebateVoteInput!): AddDebateVotePayload

  """
  Delete a debate vote from the current user, will also delete the debate argument, if any.
  """
  removeDebateVote(input: RemoveDebateVoteInput!): RemoveDebateVotePayload
  createDebateArgument(input: CreateDebateArgumentInput!): CreateDebateArgumentPayload
  updateDebateArgument(input: UpdateDebateArgumentInput!): UpdateDebateArgumentPayload
  deleteDebateArgument(input: DeleteDebateArgumentInput!): DeleteDebateArgumentPayload
  createDebateAnonymousArgument(input: CreateDebateAnonymousArgumentInput!): CreateDebateAnonymousArgumentPayload
  deleteDebateAnonymousArgument(input: DeleteDebateAnonymousArgumentInput!): DeleteDebateAnonymousArgumentPayload
  sendConfirmationEmailDebateAnonymousArgument(input: SendConfirmationEmailDebateAnonymousArgumentInput!): SendConfirmationEmailDebateAnonymousArgumentPayload
  addDebateArgumentVote(input: AddDebateArgumentVoteInput!): AddDebateArgumentVotePayload
  removeDebateArgumentVote(input: RemoveDebateArgumentVoteInput!): RemoveDebateArgumentVotePayload
  askProposalRevision(input: AskProposalRevisionInput!): AskProposalRevisionPayload
  report(input: ReportInput!): ReportPayload
  trash(input: TrashInput!): TrashPayload
  untrash(input: UnTrashInput!): UnTrashPayload
  addProposalNews(input: AddProposalNewsInput!): AddProposalNewsPayload
  updateProposalNews(input: UpdateProposalNewsInput!): UpdateProposalNewsPayload
  deleteProposalNews(input: DeleteProposalNewsInput!): DeleteProposalNewsPayload
  addDebateAnonymousVote(input: AddDebateAnonymousVoteInput!): AddDebateAnonymousVotePayload
  removeDebateAnonymousVote(input: RemoveDebateAnonymousVoteInput!): RemoveDebateAnonymousVotePayload

  """Subscribe to newsletter"""
  subscribeNewsletter(input: SubscribeNewsletterInput!): SubscribeNewsletterPayload

  """Edit projects section in admin"""
  updateHomePageProjectsSectionConfiguration(input: UpdateHomePageProjectsSectionConfigurationInput!): UpdateHomePageProjectsSectionConfigurationPayload

  """Edit projects map section in admin"""
  updateHomePageProjectsMapSectionConfiguration(input: UpdateHomePageProjectsMapSectionConfigurationInput!): UpdateHomePageProjectsMapSectionConfigurationPayload

  """Create or Edit carrousel section in admin"""
  createOrUpdateCarrouselConfiguration(input: CreateOrUpdateCarrouselConfigurationInput!): CreateOrUpdateCarrouselConfigurationPayload

  """Delete carrousel elements"""
  deleteCarrouselElement(input: DeleteCarrouselElementInput!): DeleteCarrouselElementPayload

  """User registration"""
  register(input: RegisterInput!): RegisterPayload

  """Cancel email change"""
  cancelEmailChange: CancelEmailChangePayload

  """Re-send email confirmation"""
  resendEmailConfirmation: ResendEmailConfirmationPayload

  """Toggle a feature"""
  toggleFeature(input: ToggleFeatureInput!): ToggleFeaturePayload

  """Register email domains"""
  registerEmailDomains(input: RegisterEmailDomainsInput!): RegisterEmailDomainsPayload

  """Create new Opinion"""
  createOpinion(input: CreateOpinionInput!): CreateOpinionPayload

  """Update Opinion"""
  updateOpinion(input: UpdateOpinionInput!): UpdateOpinionPayload

  """Update an external service configuration."""
  updateExternalServiceConfiguration(input: UpdateExternalServiceConfigurationInput!): UpdateExternalServiceConfigurationPayload

  """Create a senderEmailDomain."""
  createSenderEmailDomain(input: CreateSenderEmailDomainInput!): CreateSenderEmailDomainPayload

  """Delete a senderEmailDomain."""
  deleteSenderEmailDomain(input: DeleteSenderEmailDomainInput!): DeleteSenderEmailDomainPayload

  """Add an email to address to send emails."""
  createSenderEmail(input: CreateSenderEmailInput!): CreateSenderEmailPayload

  """select a senderEmail as the one to send emails"""
  selectSenderEmail(input: SelectSenderEmailInput!): SelectSenderEmailPayload

  """update a SiteParameter."""
  updateSiteParameter(input: UpdateSiteParameterInput!): UpdateSiteParameterPayload

  """Create blog post"""
  createPost(input: CreatePostInput!): CreatePostPayload

  """Update blog post"""
  updatePost(input: UpdatePostInput!): UpdatePostPayload

  """Delete blog post"""
  deletePost(input: DeletePostInput!): DeletePostPayload

  """Update social networks on a proposal"""
  updateProposalSocialNetworks(input: UpdateProposalSocialNetworksInput!): UpdateProposalSocialNetworksPayload

  """Create a proposal from back office"""
  createProposalFromBackOffice(input: CreateProposalFromBackOfficeInput!): CreateProposalPayload

  """Update illustration on a proposal"""
  updateProposalIllustration(input: UpdateProposalIllustrationInput!): UpdateProposalIllustrationPayload
  checkIdentificationCode(input: CheckIdentificationCodeInput!): CheckIdentificationCodePayload
  deleteUserIdentificationCodeList(input: DeleteUserIdentificationCodeListInput!): DeleteUserIdentificationCodeListPayload
  createUserIdentificationCodeList(input: CreateUserIdentificationCodeListInput!): CreateUserIdentificationCodeListPayload
  updateTwilioVerifyService(input: UpdateTwilioVerifyServiceInput!): UpdateTwilioVerifyServicePayload
  sendSmsPhoneValidationCode(input: SendSmsPhoneValidationCodeInput!): SendSmsPhoneValidationCodePayload
  updateProposalStepPaperVoteCounter(input: UpdateProposalStepPaperVoteCounterInput!): UpdateProposalStepPaperVoteCounterPayload
  verifyUserPhoneNumber(input: VerifyUserPhoneNumberInput!): VerifyUserPhoneNumberPayload
  updateCustomDomain(input: UpdateCustomDomainInput!): UpdateCustomDomainPayload
  deleteCustomDomain(input: DeleteCustomDomainInput!): DeleteCustomDomainPayload
  createSmsOrder(input: CreateSmsOrderInput!): CreateSmsOrderPayload
  deleteSmsOrder(input: DeleteSmsOrderInput!): DeleteSmsOrderPayload
  addSmsCredit(input: AddSmsCreditInput!): AddSmsCreditPayload
  updatePaperVote(input: UpdatePaperVoteInput!): UpdatePaperVotePayload
  updateProjectSlug(input: UpdateProjectSlugInput!): UpdateProjectSlugPayload
  updateCivicIA(input: UpdateCivicIAInput!): UpdateCivicIAPayload
  starResponse(input: StarResponseInput!): StarResponsePayload
  unstarResponse(input: UnstarResponseInput!): UnstarResponsePayload
  addProposalSmsVote(input: AddProposalSmsVoteInput!): AddProposalSmsVotePayload
  removeProposalSmsVote(input: RemoveProposalSmsVoteInput!): RemoveProposalSmsVotePayload
  sendSmsProposalVote(input: SendSmsProposalVoteInput!): SendSmsProposalVotePayload
  verifySmsVotePhoneNumber(input: VerifySmsVotePhoneNumberInput!): VerifySmsVotePhoneNumberPayload
  inviteOrganizationMember(input: InviteOrganizationMemberInput!): InviteOrganizationMemberPayload
  kickFromOrganization(input: KickFromOrganizationInput!): KickFromOrganizationPayload
  deleteOrganizationInvitation(input: DeleteOrganizationInvitationInput!): DeleteOrganizationInvitationPayload
  createProposalAnalysisComment(input: CreateProposalAnalysisCommentInput!): CreateProposalAnalysisCommentPayload
  addCollectStep(input: AddStepInput!): AddStepPayload
  addDebateStep(input: AddStepInput!): AddStepPayload
  addQuestionnaireStep(input: AddStepInput!): AddStepPayload
  addConsultationStep(input: AddStepInput!): AddStepPayload
  addAnalysisStep(input: AddStepInput!): AddStepPayload
  addResultStep(input: AddStepInput!): AddStepPayload
  addVoteAndSelectionStep(input: AddStepInput!): AddStepPayload
  addOtherStep(input: AddStepInput!): AddStepPayload
  updateOtherStep(input: UpdateOtherStepInput!): UpdateOtherStepPayload
  deleteStep(input: DeleteStepInput!): DeleteStepPayload
  updateDebateStep(input: UpdateDebateStepInput!): UpdateDebateStepPayload
  updateQuestionnaireStep(input: UpdateQuestionnaireStepInput!): UpdateQuestionnaireStepPayload
  updateCollectStep(input: UpdateCollectStepInput!): UpdateCollectStepPayload
  updateSelectionStep(input: UpdateSelectionStepInput!): UpdateSelectionStepPayload
  updateNewProject(input: UpdateNewProjectInput!): UpdateNewProjectPayload
  updateLocale(input: UpdateLocaleInput!): UpdateLocalePayload
  updateConsultationStep(input: UpdateConsultationStepInput!): UpdateConsultationStepPayload
  createOrUpdateConsultation(input: CreateOrUpdateConsultationInput!): CreateOrUpdateConsultationPayload
  deleteConsultation(input: DeleteConsultationInput!): DeleteConsultationPayload
  createConsultation(input: CreateConsultationInput!): CreateConsultationPayload
  addMediators(input: AddMediatorsInput!): AddMediatorsPayload
  deleteMediator(input: DeleteMediatorInput!): DeleteMediatorPayload
  addMediatorVotes(input: AddMediatorVotesInput!): AddMediatorVotesPayload
  updateMediatorVotes(input: UpdateMediatorVotesInput!): UpdateMediatorVotesPayload
  deleteParticipant(input: DeleteParticipantInput!): DeleteParticipantPayload
  updateVotesVisibility(input: UpdateVotesVisibilityInput!): UpdateVotesVisibilityPayload
  handleProposalFormCategoryImage(input: HandleProposalFormCategoryImageInput!): HandleProposalFormCategoryImagePayload
  updateUser(input: UpdateUserInput!): UpdateUserPayload
  saveImapConfig(input: SaveImapConfigInput!): SaveImapConfigPayload
}

"""A connection to a list of items."""
type NewsConnection {
  totalCount: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [NewsEdge]
}

"""An edge in a connection."""
type NewsEdge {
  """The item at the end of the edge."""
  node: Post!

  """A cursor for use in pagination."""
  cursor: String!
}

input NewsTranslationInput {
  title: String!
  body: HTML!

  """abstract of proposal news"""
  abstract: String

  """the locale of the translation"""
  locale: TranslationLocale!
}

"""Fetches an object given its ID"""
interface Node {
  """The ID of an object"""
  id: ID!
}

"""A object that has a slug."""
interface NodeSlug {
  slug: String!
}

"""Possible reason that a `Publishable` is not published."""
enum NotPublishedReason {
  """Author account was confirmed after the step has ended."""
  AUTHOR_CONFIRMED_TOO_LATE

  """Author account isn't confirmed and the step has ended."""
  AUTHOR_NOT_CONFIRMED

  """Author account isn't confirmed yet."""
  WAITING_AUTHOR_CONFIRMATION
}

"""A user without account."""
type NotRegistered {
  """Email of the user."""
  email: String

  """Username of the user."""
  username: String
}

"""A notifications configuration"""
type NotificationsConfiguration {
  onCreate: Boolean!
  onUpdate: Boolean!
  onDelete: Boolean!
  onCommentCreate: Boolean!
  onCommentUpdate: Boolean!
  onCommentDelete: Boolean!
  onProposalNewsCreate: Boolean!
  onProposalNewsUpdate: Boolean!
  onProposalNewsDelete: Boolean!
  email: Email
}

"""Oauth2 SSO Configuration."""
type Oauth2SSOConfiguration implements Node & SSOConfiguration {
  """The ID of an object."""
  id: ID!

  """The name of configured SSO."""
  name: String!

  """Does this configuration is enabled?"""
  enabled: Boolean!

  """Profile URL on the SSO side."""
  profileUrl: URI

  """Whether or not disconnect sso on logout."""
  disconnectSsoOnLogout: Boolean!

  """Client ID."""
  clientId: String

  """Secret key."""
  secret: String

  """Authorization URL."""
  authorizationUrl: URI!

  """Access token URL."""
  accessTokenUrl: URI!

  """User info URL."""
  userInfoUrl: URI!

  """Logout URL."""
  logoutUrl: URI

  """Redirect URI callback."""
  redirectUri: URI!
}

"""An official response"""
type OfficialResponse implements Node {
  """The ID of an object"""
  id: ID!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  body(
    """The locale to translate content (eg: FR_FR)."""
    locale: TranslationLocale
  ): HTML

  """if the response is published"""
  isPublished: Boolean!

  """Identifies the date and time when the object was or will be published"""
  publishedAt: DateTime

  """The response's authors."""
  authors: [Author!]!

  """The proposal linked to the official response"""
  proposal: Proposal!

  """Is the body using Jodit Wysiwyg."""
  bodyUsingJoditWysiwyg: Boolean!
}

"""A contribution"""
type Opinion implements Node & Contribution & Publishable & Argumentable & Sourceable & Reportable & Trashable & ContributionWithAuthor & EditableContribution {
  """The ID of an object"""
  id: ID!
  contribuable: Boolean!
  step: ConsultationStep!

  """The sources related to the sourceable."""
  sources(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
    orderBy: SourceOrder = {field: PUBLISHED_AT, direction: DESC}
  ): SourceConnection!

  """
  The viewer unpublished sources related to the sourceable (only visible by viewer).
  """
  viewerSourcesUnpublished(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
  ): SourceConnection!

  """The available sources categories of to the sourceable."""
  availableSourceCategories: [SourceCategory]

  """Does the viewer already submitted a report ?"""
  viewerHasReport: Boolean!

  """The reportings related to the reportable."""
  reportings(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
    orderBy: ReportingOrder = {field: CREATED_AT, direction: DESC}
  ): ReportingConnection!

  """Check if a user can report"""
  viewerCanReport: Boolean!

  """Whether or not the contribution is trashed."""
  trashed: Boolean!

  """Identifies the trashed visibility."""
  trashedStatus: TrashableStatus

  """Identifies the moment the moderator trashed the contribution."""
  trashedAt: DateTime

  """Identifies the reason why the moderator trashed the contribution."""
  trashedReason: String

  """The author of the contribution."""
  author: User!

  """Identifies the date and time when the object was updated."""
  updatedAt: DateTime

  """Followers connection"""
  followers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
    orderBy: FollowerOrder = {field: FOLLOWED_AT, direction: DESC}
  ): FollowerConnection

  """The following viewer confiuration configuration."""
  viewerFollowingConfiguration: SubscriptionTypeValue

  """Either or not the viewer is following the content."""
  viewerIsFollowing: Boolean!

  """
  Return the related contribution if the contribution is related to another.
  """
  related: Contribution

  """Url of the contribution"""
  url: URI!

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!

  """Whether or not the entity is published."""
  published: Boolean!

  """Identifies when the entity can no more be published."""
  publishableUntil: DateTime

  """Identifies when the entity was published at."""
  publishedAt: DateTime

  """Reason that the entity is not published."""
  notPublishedReason: NotPublishedReason

  """true if the contribution is pinned."""
  pinned: Boolean!

  """Identifies the contribution title."""
  title: String!

  """Identifies the body of the contribution."""
  body: HTML!

  """Identifies the body of the contribution rendered to text."""
  bodyText: String!

  """The related project."""
  project: Project

  """The arguments related to the argumentable."""
  arguments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
    orderBy: ArgumentOrder = {field: PUBLISHED_AT, direction: DESC}

    """If provided, returns the arguments of this particular type."""
    type: ArgumentValue

    """The connection will return the trashed results too."""
    includeTrashed: Boolean = false
  ): ArgumentConnection!

  """The unpublished arguments of to the viewer."""
  viewerArgumentsUnpublished(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """If provided, returns the arguments of this particular type."""
    type: ArgumentValue
  ): ArgumentConnection

  """The kind of description."""
  kind: String!

  """The viewer vote."""
  viewerVote: OpinionVote
  votes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
    orderBy: ProposalVoteOrder = {field: PUBLISHED_AT, direction: DESC}

    """Filters vote by value"""
    value: YesNoPairedVoteValue
  ): YesNoPairedVoteConnection!

  """Is the body using Jodit Wysiwyg."""
  bodyUsingJoditWysiwyg: Boolean!

  """The versions related to the contribution."""
  versions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
    orderBy: VersionOrder = {field: PUBLISHED_AT, direction: DESC}
  ): VersionConnection!

  """The viewer versions related to the contribution."""
  viewerVersionsUnpublished(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
    orderBy: VersionOrder = {field: PUBLISHED_AT, direction: DESC}
  ): VersionConnection!

  """Where the proposition has been placed."""
  section: Section!
  answer: Answer
  position: Int
  ranking: Int
  modals: [OpinionModal]
  appendices: [Appendix]
}

"""A connection to a list of items."""
type OpinionConnection {
  totalCount: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [OpinionEdge]
}

"""An edge in a connection."""
type OpinionEdge {
  """The item at the end of the edge."""
  node: Opinion!

  """A cursor for use in pagination."""
  cursor: String!
}

"""A contribution"""
type OpinionModal {
  """Identifies the contribution title."""
  key: String!

  """Identifies the contribution title."""
  after: String!

  """Identifies the contribution title."""
  before: String!
  title: String!
  diff: HTML
}

union OpinionOrVersion = Opinion | Version

"""Ways in which opinion connections can be ordered."""
input OpinionOrder {
  """The field in which to order nodes by."""
  field: OpinionOrderField!

  """The direction in which to order nodes."""
  direction: OrderDirection! = ASC
}

"""Properties by which opinion connections can be ordered"""
enum OpinionOrderField {
  """Allows ordering a list of opinions by position."""
  POSITIONS

  """Allows ordering a list of opinions randomly."""
  RANDOM

  """Allows ordering a list of opinions by when they were created."""
  PUBLISHED_AT

  """Allows ordering a list of opinions by the number of votes it have."""
  VOTES

  """Allows ordering a list of opinions by the number of votes OK it have."""
  VOTES_OK

  """Allows ordering a list of opinions by the number of comments it have."""
  COMMENTS
}

type OpinionType {
  """The title of the opinion type."""
  title: String!

  """The position of the opinion type."""
  position: Int!

  """Is the opinion type enabled or not."""
  isEnabled: Boolean!

  """Is the opinion type sourceable or not."""
  sourceable: Boolean!

  """Is the opinion type versionable or not."""
  versionable: Boolean!

  """The color of the opinion type."""
  color: String!

  """The default filter of the opinion type."""
  defaultFilter: String!
}

"""An OpinionType"""
input OpinionTypeInput {
  """If editing the corresponding id."""
  id: ID

  """The section title."""
  title: String!

  """The section description."""
  description: String

  """The section subtitle."""
  subtitle: String

  """Wether or not the section is contribuable."""
  contribuable: Boolean

  """Wether or not the section is sourceable."""
  sourceable: Boolean

  """Wether or not the section is versionable."""
  versionable: Boolean

  """The default section order."""
  defaultOrderBy: SectionOrderBy

  """The vote help text."""
  votesHelpText: String

  """The section position in the consultation."""
  position: Int!

  """The section color."""
  color: String!

  """The subsections attached to the section."""
  sections: [OpinionTypeInput]
}

"""Entities that can be published."""
type OpinionVote implements YesNoPairedVote & Publishable & Vote {
  """The ID of an object"""
  id: ID!

  """The date of the vote."""
  createdAt: DateTime!

  """The author of the contribution."""
  author: User

  """The contribution that was voted."""
  related: Contribution

  """Returns 'opinionVote'."""
  kind: String!

  """Returns if vote is accounted or not"""
  isAccounted: Boolean!

  """The participant of the contribution."""
  participant: Participant

  """Whether or not the entity is published."""
  published: Boolean!

  """Identifies when the entity can no more be published."""
  publishableUntil: DateTime

  """Identifies when the entity was published at."""
  publishedAt: DateTime

  """Reason that the entity is not published."""
  notPublishedReason: NotPublishedReason
  value: YesNoPairedVoteValue!
}

"""
Possible directions in which to order a list of items when provided an `orderBy` argument.
"""
enum OrderDirection {
  """Specifies an ascending order for a given `orderBy` argument."""
  ASC

  """Specifies a descending order for a given `orderBy` argument."""
  DESC
}

"""An organization."""
type Organization implements Node & Author & PostOwner & EventOwner & ProjectOwner & ProposalFormOwner & QuestionnaireOwner & MailingListOwner & EmailingCampaignOwner & ConsultationOwner & NodeSlug {
  """The ID of an object."""
  id: ID!

  """The organization's public name."""
  username: String!

  """Get all posts that the organization owns."""
  posts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """
    Array of viewer's affiliation options for posts returned from the connection.
                                For example, OWNER will include only posts that the current viewer owns.
                                
    """
    affiliations: [PostAffiliation!]

    """the search query"""
    query: String

    """The ordering direction for posts"""
    orderBy: PostOrder = {field: UPDATED_AT, direction: DESC}

    """Hide unpublished posts"""
    hideUnpublishedPosts: Boolean
  ): PostConnection!

  """Get all events that the organization owns."""
  events(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """
    Array of viewer's affiliation options for events returned from the connection.
                                For example, OWNER will include only events that the current viewer owns.
                                
    """
    affiliations: [EventAffiliation!]

    """the search query"""
    search: String

    """The ordering direction for events."""
    orderBy: EventOrder = {field: START_AT, direction: DESC}

    """Filter events by a given status."""
    status: EventStatus = null

    """only fetch where user is author"""
    onlyWhenAuthor: Boolean = false

    """Hide deleted events"""
    hideDeletedEvents: Boolean

    """Hide unpublished events"""
    hideUnpublishedEvents: Boolean

    """If non-null, filters events by comparing the start date with present."""
    isFuture: Boolean
  ): EventConnection!

  """The owner profile URL."""
  url: URI!

  """Get all projects that the organization owns."""
  projects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """
    Array of viewer's affiliation options for projects returned from the connection.
                                For example, OWNER will include only projects that the current viewer owns.
                                
    """
    affiliations: [ProjectAffiliation!]

    """the search query"""
    query: String

    """The search fields to search a project"""
    searchFields: [ProjectSearchFields]

    """The ordering direction for posts"""
    orderBy: ProjectOwnerProjectOrder = {direction: DESC, field: PUBLISHED_AT}

    """
    ID of a Status to filter by. If non-null, filter projects by statuses.
    """
    status: ID
  ): ProjectConnection!

  """Get all proposalForm that the organization owns."""
  proposalForms(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """Only available proposalForms will be returned."""
    availableOnly: Boolean = false

    """
    Array of viewer's affiliation options for proposalForms returned from the connection.
                                For example, OWNER will include only proposalForms that the current viewer owns.
                                
    """
    affiliations: [ProposalFormAffiliation!]

    """the search query"""
    query: String

    """The ordering direction for proposalForms"""
    orderBy: ProposalFormOrder = {field: CREATED_AT, direction: DESC}
  ): ProposalFormConnection!

  """Get all questionnaires that the organization owns."""
  questionnaires(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """
    Array of viewer's affiliation options for questionnaires returned from the connection.
                                For example, OWNER will include only questionnaires that the current viewer owns.
                                
    """
    affiliations: [QuestionnaireAffiliation!]

    """the search query"""
    query: String

    """The ordering direction for questionnaires"""
    orderBy: QuestionnaireOrder = {field: CREATED_AT, direction: DESC}

    """Filter by available questionnaires"""
    availableOnly: Boolean

    """Filter by types."""
    types: [QuestionnaireType]
  ): QuestionnaireConnection!

  """Get all mailingLists that the organization owns."""
  mailingLists(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """
    Array of viewer's affiliation options for mailing campaigns returned from
                                the connection. For example, OWNER will include only mailing lists that the
                                current viewer owns.
                                
    """
    affiliations: [MailingListAffiliation!]

    """If provided, filter lists by name"""
    term: String
  ): MailingListConnection!

  """Get all emailing campaigns that the organization owns."""
  emailingCampaigns(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """optional filter by status"""
    status: EmailingCampaignStatusFilter

    """The ordering direction for sending date"""
    orderBy: EmailingCampaignOrder = {field: SEND_AT, direction: DESC}

    """
    Array of viewer's affiliation options for mailing campaigns returned from
                                the connection. For example, OWNER will include only mailing lists that the
                                current viewer owns.
                                
    """
    affiliations: [EmailingCampaignAffiliation!]

    """If provided, filter campaigns by name"""
    term: String
  ): EmailingCampaignConnection!

  """Get all consultations that the organization owns."""
  consultations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """
    If omitted, returns all consultations. If provided, returns the consultation of the particular id.
    """
    id: ID

    """Filter consultation by a given query."""
    query: String

    """Order consultation by a given criterias."""
    orderBy: ConsultationOrder = {field: POSITION, direction: ASC}
  ): ConsultationConnection!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!

  """The author's public profile name."""
  displayName(
    """The locale to translate content (eg: FR_FR)."""
    locale: TranslationLocale
  ): String!

  """The author's slug"""
  slug(
    """The locale to translate content (eg: FR_FR)."""
    locale: TranslationLocale
  ): String!

  """The organization's logo file"""
  media: Media

  """Whether or not this user is the authenticated user."""
  isViewer: Boolean!
  biography(
    """The locale to translate content (eg: FR_FR)."""
    locale: TranslationLocale
  ): String

  """The author's public avatar URL."""
  avatarUrl: URI
  email: String
  isProjectAdmin: Boolean!
  userType: UserType

  """The organization's logo file"""
  logo: Media

  """The organization's banner file"""
  banner: Media
  body(
    """The locale to translate content (eg: FR_FR)."""
    locale: TranslationLocale
  ): String
  title(
    """The locale to translate content (eg: FR_FR)."""
    locale: TranslationLocale
  ): String!
  members(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
  ): OrganizationMemberConnection
  socialNetworks: OrganizationSocialNetworks

  """Get all pending invitations."""
  pendingOrganizationInvitations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
  ): PendingOrganizationInvitationConnection

  """The date when the organization was deleted."""
  deletedAt: DateTime
  translationBySlug(slug: String!): OrganizationTranslation!
}

"""The affiliation of a user to an Organization"""
enum OrganizationAffiliation {
  """Organizations that are administered by the viewer."""
  ADMIN

  """Organizations the viewer is member of."""
  USER
}

"""A connection to a list of items."""
type OrganizationConnection {
  totalCount: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [OrganizationEdge]
}

"""An edge in a connection."""
type OrganizationEdge {
  """The item at the end of the edge."""
  node: Organization!

  """A cursor for use in pagination."""
  cursor: String!
}

"""A member of an organization."""
type OrganizationMember {
  """The ID of an object."""
  id: ID!

  """The organization the member belongs to."""
  organization: Organization!

  """The member."""
  user: User!

  """The role of the member in the organization."""
  role: OrganizationMemberRole!
}

"""A connection to a list of items."""
type OrganizationMemberConnection {
  """Identifies the total count of items in the connection."""
  totalCount: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [OrganizationMemberEdge]
}

"""An edge in a connection."""
type OrganizationMemberEdge {
  """The item at the end of the edge."""
  node: OrganizationMember!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Available roles for organization member"""
enum OrganizationMemberRole {
  """Admin of the organization"""
  ADMIN

  """Member of the organization."""
  USER
}

"""The social networks of an organization"""
type OrganizationSocialNetworks {
  """Link of Web page."""
  webPageUrl: URI

  """Link of Facebook page."""
  facebookUrl: URI

  """Link of Twitter page."""
  twitterUrl: URI

  """Link of Instagram page."""
  instagramUrl: URI

  """Link of LinkedIn profile."""
  linkedInUrl: URI

  """Link of Youtube channel."""
  youtubeUrl: URI
}

"""A translation organization."""
type OrganizationTranslation implements NodeSlug {
  slug: String!
  locale: String!
  title: String!
  body: String!
  translatable: Organization
}

"""A step inside a project."""
type OtherStep implements Node & Step {
  """The ID of an object"""
  id: ID!

  """The URL to this resource."""
  url: URI!

  """When the time interval begins or ends."""
  timeRange: TimeRange!

  """The title of the step."""
  title: String!

  """Identifies the current state of the step."""
  state: StepState!

  """The kind of the step"""
  kind: String! @deprecated(reason: "Please, use `__typename` instead.")

  """The type of the step"""
  type: String @deprecated(reason: "Please, use `__typename` instead.")

  """Does the step have a end date ?"""
  timeless: Boolean

  """The introduction text of the step."""
  body: HTML

  """Is the body using Jodit Wysiwyg."""
  bodyUsingJoditWysiwyg: Boolean!

  """Is the step enabled or not"""
  enabled: Boolean!

  """The label of the step"""
  label: String!

  """The step's metadescription"""
  metaDescription: String

  """The step's custom code"""
  customCode: String

  """The step's slug"""
  slug: String

  """Events linked to the step"""
  events(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
    orderBy: EventOrder! = {field: START_AT, direction: DESC}

    """If non-null, filters events by comparing the start date with present."""
    isFuture: Boolean
  ): EventConnection!
  project: Project
  exportStepUrl: URI
  exportContributorsUrl: URI
  adminUrl(operationType: StepAdminUrlOperationType): URI!

  """Mediators assigned to this step."""
  mediators(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """Filter mediators by user username."""
    username: String
  ): MediatorConnection
}

"""A page."""
type Page implements NodeSlug & UniformResourceLocatable {
  slug: String!

  """The URL to this resource."""
  url: URI!

  """The ID of an object"""
  id: ID!
  title(
    """The locale to translate content (eg: FR_FR)."""
    locale: TranslationLocale
  ): String
  body(
    """The locale to translate content (eg: FR_FR)."""
    locale: TranslationLocale
  ): String
  translations: [PageTranslation!]!
  media: Media
  cover: Media
  metaDescription: String
  customCode: String
  translationBySlug(slug: String!): PageTranslation!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""A translation page."""
type PageTranslation {
  locale: String!
  title: String
  body: String
  metaDescription: String
}

"""One participant"""
type Participant implements Node & Contributor {
  """The ID of an object."""
  id: ID!
  email: String
  firstname: String
  lastname: String
  phone: String
  phoneConfirmed: Boolean!
  postalAddress: GoogleMapsAddress
  dateOfBirth: DateTime

  """The contributor identification code value"""
  userIdentificationCode: String

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  votes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """The id of the contribuable entity (Project, Step)"""
    contribuableId: ID

    """Filter votes created by a mediator"""
    mediatorId: ID
  ): VoteConnection!

  """The participant token."""
  token: String!
  replies(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
  ): ReplyConnection

  """If already registered, the user to add as participant."""
  user: User

  """Wether or not the participant meets the step requirement."""
  isMeetingRequirements(
    """The step containing requirements."""
    stepId: ID!
  ): Boolean
}

"""A connection to a list of items."""
type ParticipantConnection {
  """Identifies the total count of items in the connection."""
  totalCount: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [ParticipantEdge]
}

"""An edge in a connection."""
type ParticipantEdge {
  """The item at the end of the edge."""
  node: Participant!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Participant checkboxes requirements"""
input ParticipantInfosCheckbox {
  """The Node ID of the requirement to modify."""
  requirementId: ID!

  """The updated value of the requirement."""
  value: Boolean!
}

"""Infos Participant"""
input ParticipantInfosInput {
  email: String
  firstname: String
  lastname: String
  dateOfBirth: DateTime
  postalAddress: String
  phone: String
  checkboxes: [ParticipantInfosCheckbox]
}

"""Properties by which participant connections can be ordered."""
input ParticipantOrder {
  """The field in which to order nodes by."""
  field: ParticipantOrderField!

  """The direction in which to order nodes."""
  direction: OrderDirection! = ASC
}

"""Ordering options for participant votes connections."""
enum ParticipantOrderField {
  """Allows ordering a list of participant by createdAt."""
  CREATED_AT
}

"""Represent an invitation to join an organization."""
type PendingOrganizationInvitation {
  """The ID of an object."""
  id: ID!

  """If already registered, the user to invite."""
  user: User

  """If not already registered, the email to send the invite."""
  email: String

  """The role given to the invited user."""
  role: OrganizationMemberRole!

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!

  """The organization attached to the invite."""
  organization: Organization!
}

"""A connection to a list of items."""
type PendingOrganizationInvitationConnection {
  totalCount: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [PendingOrganizationInvitationEdge]
}

"""An edge in a connection."""
type PendingOrganizationInvitationEdge {
  """The item at the end of the edge."""
  node: PendingOrganizationInvitation!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Requires a phone"""
type PhoneRequirement implements Node & Requirement {
  """The ID of an object"""
  id: ID!

  """Does the viewer meets the requirement ?"""
  viewerMeetsTheRequirement: Boolean!

  """Does the participant meets the requirement ?"""
  participantMeetsTheRequirement(
    """The token associated to the Participant."""
    token: String!
  ): Boolean!

  """The requirement type sent to the api."""
  type: RequirementType!

  """The phone of the viewer."""
  viewerValue: String

  """The phone of the participant."""
  participantValue(
    """The token associated to the Participant."""
    token: String!
  ): String
}

"""Requires a validated phone number"""
type PhoneVerifiedRequirement implements Node & Requirement {
  """The ID of an object"""
  id: ID!

  """Does the viewer meets the requirement ?"""
  viewerMeetsTheRequirement: Boolean!

  """Does the participant meets the requirement ?"""
  participantMeetsTheRequirement(
    """The token associated to the Participant."""
    token: String!
  ): Boolean!

  """The requirement type sent to the api."""
  type: RequirementType!
}

"""Represent a set of analytics for a platform"""
type PlatformAnalytics {
  """Get the registrations analytics of the platform."""
  registrations: PlatformAnalyticsRegistrations

  """Get the votes analytics of the platform."""
  votes: PlatformAnalyticsVotes

  """Get the comments analytics of the platform."""
  comments: PlatformAnalyticsComments

  """Get the contributions analytics of the platform."""
  contributions: PlatformAnalyticsContributions

  """Get the followers analytics of the platform."""
  followers: PlatformAnalyticsFollowers

  """Get the visitors analytics of the platform."""
  visitors: PlatformAnalyticsVisitors

  """Get the page views analytics of the platform."""
  pageViews: PlatformAnalyticsPageViews

  """Get the traffic sources analytics of the platform."""
  trafficSources: PlatformAnalyticsTrafficSources

  """Get the most visited pages analytics of the platform."""
  mostVisitedPages: PlatformAnalyticsMostVisitedPages

  """Get the contributors analytics of the platform."""
  contributors: PlatformAnalyticsContributors

  """Get the anonymous contributors analytics of the platform."""
  anonymousContributors: PlatformAnalyticsAnonymousContributors

  """Get the top contributors analytics of the platform."""
  topContributors: [PlatformAnalyticsTopContributor!]

  """Get the most used proposal categories analytics of the platform."""
  mostUsedProposalCategories: PlatformAnalyticsMostUsedProposalCategories
}

"""Represent the anonymous contributors for a platform"""
type PlatformAnalyticsAnonymousContributors {
  totalCount: Int!
  values: [AggregatedResult!]!
}

"""Represent the comments analytics for a platform"""
type PlatformAnalyticsComments {
  totalCount: Int!
  values: [AggregatedResult!]!
}

"""Represent the contributions analytics for a platform"""
type PlatformAnalyticsContributions {
  totalCount: Int!
  values: [AggregatedResult!]!
}

"""Represent a contribution made by a contributor"""
type PlatformAnalyticsContributorContribution {
  """The related contribution type"""
  type: PlatformAnalyticsContributorContributionType!

  """The total count of the contribution type."""
  totalCount: Int!
}

"""Represent a type of a contributor contribution"""
enum PlatformAnalyticsContributorContributionType {
  """The contribution is a reply"""
  REPLY

  """The contribution is a proposal"""
  PROPOSAL

  """The contribution is a comment"""
  COMMENT

  """The contribution is an opinion"""
  OPINION

  """The contribution is an opinion version"""
  OPINION_VERSION

  """The contribution is an argument"""
  ARGUMENT

  """The contribution is a debate argument"""
  DEBATE_ARGUMENT

  """The contribution is a source"""
  SOURCE
}

"""Represent the contributors for a platform"""
type PlatformAnalyticsContributors {
  totalCount: Int!
  values: [AggregatedResult!]!
}

"""Represent the followers analytics for a platform"""
type PlatformAnalyticsFollowers {
  totalCount: Int!
  values: [AggregatedResult!]!
}

"""Represent the most used proposal categories for a platform"""
type PlatformAnalyticsMostUsedProposalCategories {
  """The total count of the most used proposal categories."""
  totalCount: Int!

  """The most used proposal categories with their total count."""
  values: [PlatformAnalyticsMostUsedProposalCategory!]!
}

"""Represent a proposal category and how much it has been used"""
type PlatformAnalyticsMostUsedProposalCategory {
  """The related category."""
  category: ProposalCategory!

  """How much this category has been used."""
  totalCount: Int!
}

"""Represent the most visited pages for a platform"""
type PlatformAnalyticsMostVisitedPages {
  totalCount: Int!
  values: [AggregatedResult!]!
}

"""Represent the page views for a platform"""
type PlatformAnalyticsPageViews {
  totalCount: Int!
  values: [AggregatedResult!]!
}

"""Represent the registrations analytics for a platform"""
type PlatformAnalyticsRegistrations {
  totalCount: Int!
  values: [AggregatedResult!]!
}

"""Represent a top contributor with it's contributions for a platform"""
type PlatformAnalyticsTopContributor {
  """The contributor."""
  user: User!

  """The associated contributions of the contributor."""
  contributions(first: Int = 2): [PlatformAnalyticsContributorContribution!]!
}

"""Represent a traffic source"""
type PlatformAnalyticsTrafficSource {
  """The related traffic source type."""
  type: PlatformAnalyticsTrafficSourceType!

  """The total count of this traffic source."""
  totalCount: Int!
}

"""Represent a type of a traffic source"""
enum PlatformAnalyticsTrafficSourceType {
  """The traffic source came from a search engine"""
  SEARCH_ENGINE

  """The traffic source came from a direct link"""
  DIRECT

  """The traffic source came from an external link"""
  EXTERNAL_LINK

  """The traffic source came from a social network"""
  SOCIAL_NETWORK

  """The traffic source came from an email"""
  EMAIL
}

"""Represent the different traffic sources for a platform"""
type PlatformAnalyticsTrafficSources {
  """The total count of all the traffic sources combined."""
  totalCount: Int!

  """The available traffic sources with their total count."""
  sources: [PlatformAnalyticsTrafficSource!]!
}

"""Represent the visitors analytics for a platform"""
type PlatformAnalyticsVisitors {
  totalCount: Int!
  values: [AggregatedResult!]!
}

"""Represent the votes analytics for a platform"""
type PlatformAnalyticsVotes {
  totalCount: Int!
  values: [AggregatedResult!]!
}

"""A contribution with an author"""
type Post implements Node & UniformResourceLocatable & UniformResourceAdminLocatable & Commentable & Contribution {
  """The ID of an object"""
  id: ID!

  """Url of the contribution"""
  url: URI!

  """The admin url for this post."""
  adminUrl: URI!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!

  """The post's title."""
  title(
    """The locale to translate content (eg: FR_FR)."""
    locale: TranslationLocale
  ): String

  """Identifies the date and time when the object was published."""
  publishedAt: DateTime

  """The post's authors."""
  authors: [Author!]!

  """The publication status for this post."""
  publicationStatus: PostPublicationStatus!

  """Wether or not the post is commentable."""
  commentable: Boolean!

  """Abstract of the post."""
  abstract(
    """The locale to translate content (eg: FR_FR)."""
    locale: TranslationLocale
  ): String!

  """The post's related media."""
  media: Media

  """The post's related themes."""
  themes: [Theme!]!
  body(
    """The locale to translate content (eg: FR_FR)."""
    locale: TranslationLocale
  ): HTML
  translations: [PostTranslation!]!

  """The comments related to the commentable."""
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
    orderBy: CommentOrder = {field: PUBLISHED_AT, direction: DESC}
  ): CommentConnection!

  """The comments not yet approved by moderators."""
  viewerNotApprovedByModeratorComments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
    orderBy: CommentOrder = {field: PUBLISHED_AT, direction: DESC}
  ): CommentConnection

  """The user that created the resource."""
  creator: User

  """
  Return the related contribution if the contribution is related to another.
  """
  related: Contribution
  displayedOnBlog: Boolean!
  relatedContent: [PostRelatedContent!]!
  viewerDidAuthor: Boolean!
  customCode: String
  isPublished: Boolean!
  metaDescription(
    """The locale to translate content (eg: FR_FR)."""
    locale: TranslationLocale
  ): String

  """The owner of the post."""
  owner: PostOwner

  """Is the body using Jodit Wysiwyg."""
  bodyUsingJoditWysiwyg: Boolean!
}

"""The affiliation of a user to a post"""
enum PostAffiliation {
  """Posts that are owned by the authenticated user."""
  OWNER
}

"""A connection to a list of items."""
type PostConnection {
  totalCount: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [PostEdge]
}

"""An edge in a connection."""
type PostEdge {
  """The item at the end of the edge."""
  node: Post!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Ways in which lists of posts can be ordered upon return."""
input PostOrder {
  """The field to order posts by."""
  field: PostOrderField! = UPDATED_AT

  """The ordering direction."""
  direction: OrderDirection! = DESC
}

"""Properties by which posts can be ordered"""
enum PostOrderField {
  """Allows ordering a list of posts by when they have been updated."""
  UPDATED_AT

  """Allows ordering a list of posts by when they have been created."""
  CREATED_AT
}

"""Represent an owner of a post."""
interface PostOwner {
  """User ID"""
  id: ID!

  """User username"""
  username: String

  """Get all posts that the user owns."""
  posts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """
    Array of viewer's affiliation options for posts returned from the connection.
                                For example, OWNER will include only posts that the current viewer owns.
                                
    """
    affiliations: [PostAffiliation!]

    """the search query"""
    query: String

    """The ordering direction for posts"""
    orderBy: PostOrder = {field: UPDATED_AT, direction: DESC}
  ): PostConnection!
}

"""Available publication statuses for a post."""
enum PostPublicationStatus {
  """Normal status, publicly visible"""
  PUBLISHED

  """Not publicly visible"""
  NOT_PUBLISHED
}

"""A related content for a post"""
union PostRelatedContent = Theme | Proposal | Project

"""A translation post."""
type PostTranslation {
  """The post translation related locale."""
  locale: TranslationLocale!

  """The title of the post translation."""
  title: String

  """The body of the post translation."""
  body: HTML

  """Abstract of the post translation."""
  abstract: String
  metaDescription: String
  slug: String
}

"""Requires a postal address"""
type PostalAddressRequirement implements Node & Requirement {
  """The ID of an object"""
  id: ID!

  """Does the viewer meets the requirement ?"""
  viewerMeetsTheRequirement: Boolean!

  """Does the participant meets the requirement ?"""
  participantMeetsTheRequirement(
    """The token associated to the Participant."""
    token: String!
  ): Boolean!

  """The requirement type sent to the api."""
  type: RequirementType!

  """The postal address of the viewer."""
  viewerAddress: GoogleMapsAddress

  """The postal address of the participant."""
  participantAddress(
    """The token associated to the Participant."""
    token: String!
  ): GoogleMapsAddress
}

input PreConfigureProjectInput {
  project: CreateAlphaProjectInput!
  questionnaires: [PreConfigureProjectQuestionnaireInput]
  proposalForms: [PreConfigureProjectProposalFormInput]
  analysisForm: ConfigureAnalysisInput
  clientMutationId: String
}

type PreConfigureProjectPayload {
  """The created project"""
  project: Project
  clientMutationId: String
}

input PreConfigureProjectProposalFormInput {
  title: String
  description: HTML

  """Is the description using Jodit Wysiwyg."""
  descriptionUsingJoditWysiwyg: Boolean
  summaryHelpText: String
  illustrationHelpText: String
  usingThemes: Boolean
  themeMandatory: Boolean
  themeHelpText: String
  usingDistrict: Boolean
  districtMandatory: Boolean
  commentable: Boolean
  costable: Boolean
  districtHelpText: String
  usingCategories: Boolean
  categoryMandatory: Boolean
  categoryHelpText: String
  usingAddress: Boolean
  proposalInAZoneRequired: Boolean
  titleHelpText: String
  descriptionHelpText: String
  addressHelpText: String

  """the json of the googleMapsAddress"""
  mapCenter: String
  zoomMap: Int
  categories: [ProposalCategoryInput!]
  districts: [DistrictInput!]
  questions: [QuestionnaireAbstractQuestionInput!]
  allowAknowledge: Boolean

  """Proposal form is type of Proposal or Question"""
  objectType: ProposalFormObjectType

  """Proposal form using description field"""
  usingDescription: Boolean

  """Proposal form using illustration field"""
  usingIllustration: Boolean

  """Proposal form using summary field"""
  usingSummary: Boolean
  suggestingSimilarProposals: Boolean

  """Proposal form is description field is mandatory or not"""
  descriptionMandatory: Boolean

  """can the viewer send a contact message to the proposals author"""
  canContact: Boolean

  """can the viewer see the proposals as a GRID"""
  isGridViewEnabled: Boolean

  """can the viewer see the proposals as a LIST"""
  isListViewEnabled: Boolean

  """can the viewer see the proposals as a MAP"""
  isMapViewEnabled: Boolean

  """Can proposal contain web site url"""
  usingWebPage: Boolean! = false

  """Can proposal contain facebook url"""
  usingFacebook: Boolean! = false

  """Can proposal contain twitter url"""
  usingTwitter: Boolean! = false

  """Can proposal contain instagram url"""
  usingInstagram: Boolean! = false

  """Can proposal contain youtube url"""
  usingYoutube: Boolean! = false

  """Can proposal contain linkedin url"""
  usingLinkedIn: Boolean! = false
  notifications: ProposalFormNotificationsInput
  clientMutationId: String
}

input PreConfigureProjectQuestionnaireInput {
  """The new title of the questionnaire."""
  title: String!

  """The new description of the questionnaire."""
  description: HTML

  """Is the description using Jodit Wysiwyg."""
  descriptionUsingJoditWysiwyg: Boolean

  """The new list of available questions for this questionnaire"""
  questions: [QuestionnaireAbstractQuestionInput!]!
  clientMutationId: String
}

"""A step inside a project."""
type PresentationStep implements Node & Step {
  """The ID of an object"""
  id: ID!

  """The URL to this resource."""
  url: URI!

  """When the time interval begins or ends."""
  timeRange: TimeRange!

  """The title of the step."""
  title: String!

  """Identifies the current state of the step."""
  state: StepState!

  """The kind of the step"""
  kind: String! @deprecated(reason: "Please, use `__typename` instead.")

  """The type of the step"""
  type: String @deprecated(reason: "Please, use `__typename` instead.")

  """Does the step have a end date ?"""
  timeless: Boolean

  """The introduction text of the step."""
  body: HTML

  """Is the body using Jodit Wysiwyg."""
  bodyUsingJoditWysiwyg: Boolean!

  """Is the step enabled or not"""
  enabled: Boolean!

  """The label of the step"""
  label: String!

  """The step's metadescription"""
  metaDescription: String

  """The step's custom code"""
  customCode: String

  """The step's slug"""
  slug: String

  """Events linked to the step"""
  events(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
    orderBy: EventOrder! = {field: START_AT, direction: DESC}

    """If non-null, filters events by comparing the start date with present."""
    isFuture: Boolean
  ): EventConnection!
  project: Project
  exportStepUrl: URI
  exportContributorsUrl: URI
  adminUrl(operationType: StepAdminUrlOperationType): URI!

  """Mediators assigned to this step."""
  mediators(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """Filter mediators by user username."""
    username: String
  ): MediatorConnection
}

"""A vote that can be anonymous."""
interface PrivatableVote {
  """Whether the author of the vote is anonymous or not."""
  private: Boolean @deprecated(reason: "reason: \"This field has been renamed, Field \"private\" will be removed, Use \"anonymous\" instead.")

  """Whether the author of the vote is anonymous or not."""
  anonymous: Boolean!
}

"""A budget contribution"""
type ProgressStep {
  id: ID!
  title: String!
  startAt: DateTime!
  endAt: DateTime
}

input ProgressStepInput {
  title: String!
  startAt: DateTime!
  endAt: DateTime
}

"""A participatory project."""
type Project implements Node & UniformResourceLocatable & UniformResourceAdminLocatable {
  """The URL to this resource."""
  url: URI!

  """The ID of an object"""
  id: ID!

  """Identifies the title of the project."""
  title: String!

  """Identifies when the project was published at."""
  publishedAt: DateTime!

  """A list of votes associated with the project."""
  votes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """Wether it retrieves anonymous votes or not."""
    anonymous: Boolean = null
  ): VoteConnection!

  """A list of contributors associated with the project."""
  contributors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """Ordering options for contributors returning from the connection."""
    orderBy: UserOrder = {field: CREATED_AT, direction: DESC}

    """The step in which the user has contributed."""
    step: ID

    """Does the user has verified his account."""
    vip: Boolean

    """The user type to filter by."""
    userType: ID

    """Set true to get only confirmed users."""
    emailConfirmed: Boolean = false

    """
    Set true to get only users consenting to receive internal communication.
    """
    consentInternalCommunication: Boolean = false

    """Search contributor by his email, username, lastname"""
    term: String
  ): ContributorConnection!

  """Count of contributions associated with the project."""
  contributionsCount: Int! @deprecated(reason: "reason: \"In preparation for an upcoming change to the way we expose counters, this field will only be available inside a connection, Field \"contributionsCount\" will be removed, Use \"contributions.totalCount\" instead when it will be published.")

  """Contributions associated with the project."""
  contributions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """Filter contributions by a specific type."""
    type: ContributionType
    orderBy: ContributionOrder = {field: CREATED_AT, direction: DESC}
  ): ContributionConnection!

  """The cover image associated with the project."""
  cover: Media

  """The type associated with the project."""
  type: ProjectType
  metaDescription: String

  """The different steps associated with the project."""
  steps(orderBy: StepOrder = {field: POSITION, direction: ASC}, excludePresentationStep: Boolean = false): [Step!]!

  """The list of users who authored the project."""
  authors: [Author!]!

  """Linking table with districts"""
  districts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
  ): GlobalDistrictConnection

  """Themes associated with the project."""
  themes: [Theme!]

  """The admin URL to this resource."""
  adminUrl: URI!

  """A list of proposals associated to the object."""
  proposals(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """
    If non-null, filters proposals with the given trashed status (eg: visible, not visible).
    """
    trashedStatus: ProposalTrashedStatus = NOT_TRASHED

    """
    ID of a User to filter by. If non-null, only proposals authored by this user will be returned.
    """
    author: ID

    """Ordering options for proposals returned from the connection."""
    orderBy: [ProposalOrder] = [{field: PUBLISHED_AT, direction: ASC}]

    """(ROLE_ADMIN only) Select also draft proposals."""
    includeDraft: Boolean = false

    """
    The state of the proposals to filter by. If non-null, filters proposals with the given state.
    """
    state: ProposalsState

    """
    ID of a ProposalDistrict to filter by. If non-null, filters proposals with the given district.
    """
    district: ID

    """
    ID of a UserType to filter by. If non-null, filters proposals with the given type of author.
    """
    userType: ID

    """
    ID of a ProposalCategory to filter by. If non-null, filters proposals with the given category.
    """
    category: ID

    """
    ID of a ProposalStatus to filter by. If non-null, filters proposals with the given status.
    """
    status: ID

    """
    ID of a Theme to filter by. If non-null, filters proposals with the given theme.
    """
    theme: ID

    """If non-null, filters proposals with the given string to look for."""
    term: String
    reference: String

    """Affiliation options for proposals returned from the connection."""
    affiliations: [ProposalAffiliation]

    """(ROLE_SUPER_ADMIN only) Select also unpublished proposals."""
    includeUnpublished: Boolean = false

    """The global progress status of the proposal."""
    progressStatus: ProposalProgressState

    """The analysts's ids assigned to the proposal"""
    analysts: [ID!]

    """The supervisor's id assigned to the proposal"""
    supervisor: ID

    """The decision-maker's id assigned to the proposal"""
    decisionMaker: ID
    excludeViewerVotes: Boolean = false

    """Filter proposals by a given geo bounding box"""
    geoBoundingBox: GeoBoundingBox

    """
    ID of a Step to filter by. If non-null, filters proposals with the given step.
    """
    step: ID
  ): ProposalConnection!

  """The viewer unpublished proposals (only visible by viewer)."""
  viewerProposalsUnpublished(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
  ): ProposalConnection

  """Expose Primary Key, do not use it, except for testing purpose."""
  _id: ID!

  """When the time interval begins or ends."""
  timeRange: TimeRange!

  """The user that created the resource."""
  creator: User
  hasAnalysis: Boolean!

  """A list of contributors associated with the project."""
  emailableContributors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
  ): EmailableConnection!

  """Count of paper votes on the project."""
  paperVotesTotalCount(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
  ): Int!

  """Count of paper votes points on the project."""
  paperVotesTotalPointsCount(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
  ): Int!

  """Slug of a project"""
  slug: String!

  """Can the split view be enabled"""
  canEnableProposalStepSplitView: Boolean!

  """Whether the split view is enabled or not."""
  isProposalStepSplitViewEnabled: Boolean!
  video: String

  """Identifies the first collect step of the project, if any."""
  firstCollectStep: CollectStep

  """Identifies the first debate step of the project, if any."""
  firstDebateStep: DebateStep

  """Identifies the first questionnaire step of the project, if any."""
  firstQuestionnaireStep: QuestionnaireStep

  """Identifies the first analysis step of the project, if any."""
  firstAnalysisStep: ProposalStep
  hasParticipativeStep(
    """
    If specified, get if the project is participative while excluding the
    specified step. It allows to know if a particular step is the only
    participative step in project.
    """
    exceptStepId: ID = null
  ): Boolean!
  votableSteps: [ProposalStep!]!

  """The visibility of the project."""
  visibility: ProjectVisibility!
  adminAlphaUrl: URI!

  """State of activation of Opinion subscription."""
  opinionCanBeFollowed: Boolean!

  """Viewers that can access the project, null otherwise."""
  restrictedViewers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
  ): GroupConnection

  """The comments related to the project."""
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """The connection will return only the trashed results."""
    onlyTrashed: Boolean = false
    orderBy: CommentOrder = {field: PUBLISHED_AT, direction: DESC}
  ): CommentConnection!
  isVotesCounterDisplayable: Boolean!
  isContributionsCounterDisplayable: Boolean!
  isParticipantsCounterDisplayable: Boolean!

  """Whether it's an external project or not."""
  isExternal: Boolean!

  """URL of the external project."""
  externalLink: URI

  """Contributions count of the external project."""
  externalContributionsCount: Int

  """Participant count of the external project."""
  externalParticipantsCount: Int

  """Vote count of the external project."""
  externalVotesCount: Int

  """The header's format of the project."""
  headerType: ProjectHeaderType

  """The cover filter opacity percent value."""
  coverFilterOpacityPercent: Int

  """the locale for the project, if any"""
  locale: Locale

  """Get all assigned proposals of the viewer."""
  viewerAssignedProposals(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
    term: String
    theme: ID
    district: ID
    analysts: [ID!]
    supervisor: ID
    decisionMaker: ID
    category: ID
    orderBy: ProposalOrder = {field: CREATED_AT, direction: DESC}

    """The current status of the proposal"""
    state: ProposalTaskState
  ): ProposalConnection!

  """list of analysts assigned on the project"""
  analysts: [User]!

  """list of supervisors assigned on the project"""
  supervisors: [User]!

  """list of decision makers assigned on the project"""
  decisionMakers: [User]!

  """list of proposal categories on the project"""
  categories: [ProposalCategory!]!

  """list of exportable steps in the project"""
  exportableSteps: [ProjectAbstractStep]!

  """The current step of the step timeline."""
  currentStep: Step

  """if it is archived"""
  archived: Boolean!

  """The owner of the project."""
  owner: ProjectOwner
  exportContributorsUrl: URI

  """The posts relative to the project."""
  posts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
  ): PostConnection!

  """The open consultation step of the project, if any."""
  consultationStepOpen: ConsultationStep

  """The address of the project."""
  address: GoogleMapsAddress

  """Wether or not the logged in user has the authorization to edit"""
  canEdit: Boolean

  """The project description."""
  description: String

  """Custom code that will be applied to every steps."""
  customCode: String

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!

  """The project status."""
  status: ProjectStatus!
}

"""A project abstract step."""
type ProjectAbstractStep {
  """The ID of an object"""
  id: ID!

  """The step of the association"""
  step: Step!

  """The step's position"""
  position: Int
}

"""The affiliation of a user to a project"""
enum ProjectAffiliation {
  """Projects that are owned by the authenticated user."""
  OWNER

  """Projects where the user is assigned as author."""
  AUTHOR
}

"""Project archive filter choices."""
enum ProjectArchiveFilter {
  """Filters only archived projects."""
  ARCHIVED

  """Filters only non-archived projects."""
  ACTIVE
}

"""A connection to a list of items."""
type ProjectConnection {
  totalCount: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [ProjectEdge]
}

type ProjectDistrictPositioner {
  district: GlobalDistrict!
  project: Project!
  position: Int!
}

"""An edge in a connection."""
type ProjectEdge {
  """The item at the end of the edge."""
  node: Project!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Describe the type of the project's header."""
enum ProjectHeaderType {
  """The project's header cover take the entire width."""
  FULL_WIDTH

  """
  The project's thumbnail take half the width next to the project's informations.
  """
  THUMBNAIL
}

"""Ways in which project can be ordered."""
input ProjectOrder {
  """The direction in which to order nodes."""
  direction: OrderDirection! = DESC

  """The field in which to order nodes by."""
  field: ProjectOrderField! = PUBLISHED_AT
}

"""Ordering options for projects returned from the connection."""
enum ProjectOrderField {
  """Allows ordering a list of projects by their number of contributions."""
  POPULAR

  """Allows ordering a list of projects by when they were published."""
  PUBLISHED_AT
}

"""Represent an owner of a project."""
interface ProjectOwner {
  """The owner id."""
  id: ID!

  """The owner username."""
  username: String

  """The owner profile URL."""
  url: URI!

  """Get all projects that the user owns."""
  projects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """
    Array of viewer's affiliation options for projects returned from the connection.
                                For example, OWNER will include only projects that the current viewer owns.
                                
    """
    affiliations: [ProjectAffiliation!]

    """the search query"""
    query: String

    """The search fields to search a project"""
    searchFields: [ProjectSearchFields]

    """The ordering direction for posts"""
    orderBy: ProjectOwnerProjectOrder = {direction: DESC, field: PUBLISHED_AT}

    """
    ID of a Status to filter by. If non-null, filter projects by statuses.
    """
    status: ID
  ): ProjectConnection!
}

"""Ways in which project in admin list can be ordered."""
input ProjectOwnerProjectOrder {
  """The direction in which to order nodes."""
  direction: OrderDirection! = DESC

  """The field in which to order nodes by."""
  field: ProjectOwnerProjectOrderField! = PUBLISHED_AT
}

"""Ordering options for projects returned from the connection."""
enum ProjectOwnerProjectOrderField {
  """Allows ordering a list of projects by when they were published."""
  PUBLISHED_AT
}

"""Available search fields to search a project."""
enum ProjectSearchFields {
  """to search on project creator username"""
  CREATOR

  """to search on project owner username"""
  OWNER
}

"""Project statuses"""
enum ProjectStatus {
  """The project has not started yet and has no finished step."""
  FUTURE_WITHOUT_FINISHED_STEPS

  """The project has not started yet but has at least one finished step."""
  FUTURE_WITH_FINISHED_STEPS

  """The project is currently open fo participation."""
  OPENED_PARTICIPATION

  """The project is currently open."""
  OPENED

  """The project has been closed."""
  CLOSED

  """The project has no status."""
  UNKNOWN
}

input ProjectStepInput {
  type: ConcreteStepType!
  id: ID
  title: String
  label: String!
  startAt: DateTime
  endAt: DateTime
  body: HTML

  """Is the body using Jodit Wysiwyg."""
  bodyUsingJoditWysiwyg: Boolean
  metaDescription: String
  customCode: String
  isEnabled: Boolean!
  requirements: [StepRequirementInput!]!
  requirementsReason: String
  timeless: Boolean
  consultations: [ID]
  votesHelpText: String
  voteType: ProposalStepVoteType
  budget: Float

  """Maximum number of votes a user can submit."""
  votesLimit: Int

  """
  Minimum number of votes a user must submit for his votes to be counted.
  """
  votesMin: Int
  votesRanking: Boolean
  voteThreshold: Int
  defaultSort: ProposalSort

  """Whether or not sms vote is enabled."""
  isProposalSmsVoteEnabled: Boolean

  """
  Determines how long it will take for the proposal to be archived, coupled with proposalArchivedUnitTime.
  """
  proposalArchivedTime: Int

  """
  The unit chosen to set the archived duration can be either MONTHS or DAYS
  """
  proposalArchivedUnitTime: ProposalArchivedUnitTime
  allowAuthorsToAddNews: Boolean
  allowingProgressSteps: Boolean
  statuses: [StepStatusInput]

  """the default view : GRID, LIST or MAP"""
  mainView: MainView
  private: Boolean
  proposalForm: ID
  defaultStatus: ID
  questionnaire: ID
  footer: HTML

  """Is the questionnaire footer using Jodit Wysiwyg."""
  footerUsingJoditWysiwyg: Boolean
  collectParticipantsEmail: Boolean
  nbOpinionsToDisplay: Int
  nbVersionsToDisplay: Int
  articles: [DebateArticleInput]
  debateType: DebateType
  debateContent: HTML
  debateContentUsingJoditWysiwyg: Boolean
  isAnonymousParticipationAllowed: Boolean

  """Whether or not secret ballot is enable"""
  secretBallot: Boolean

  """If not null, the date to display vote count"""
  publishedVoteDate: DateTime
}

"""Label of a Project."""
type ProjectType {
  """Id of project Type"""
  id: ID!

  """Title of project Type"""
  title: String!

  """Slug of project Type"""
  slug: String!

  """Color of project Type"""
  color: String!
}

"""4 possible values"""
enum ProjectVisibility {
  """visible for group admin"""
  ADMIN

  """the project is restricted to users groups"""
  CUSTOM

  """visible for me only"""
  ME

  """visible for all"""
  PUBLIC
}

"""Represents a user's contribution to a collect step."""
type Proposal implements Node & Publishable & UniformResourceLocatable & Trashable & Draftable & Contribution & Commentable & Reportable & UniformResourceAdminLocatable {
  """Does the viewer already submitted a report ?"""
  viewerHasReport: Boolean!

  """The reportings related to the reportable."""
  reportings(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
    orderBy: ReportingOrder = {field: CREATED_AT, direction: DESC}
  ): ReportingConnection!

  """Check if a user can report"""
  viewerCanReport: Boolean!

  """Followers connection"""
  followers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """Ordering options for followers returning from the connection"""
    orderBy: FollowerOrder = {field: FOLLOWED_AT, direction: DESC}
  ): UserConnection!

  """Identifies the viewer following configuration on the entity."""
  viewerFollowingConfiguration: SubscriptionTypeValue

  """Identifies if the viewer is following the entity."""
  viewerIsFollowing: Boolean!

  """The admin URL to this resource."""
  adminUrl: URI

  """Did the viewer author this entity."""
  viewerDidAuthor: Boolean

  """Link of Web page."""
  webPageUrl: URI

  """Link of Facebook page."""
  facebookUrl: URI

  """Link of Twitter page."""
  twitterUrl: URI

  """Link of Instagram page."""
  instagramUrl: URI

  """Link of LinkedIn profile."""
  linkedInUrl: URI

  """Link of Youtube channel."""
  youtubeUrl: URI

  """The ID of an object."""
  id: ID!

  """The comments related to the commentable."""
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
    orderBy: CommentOrder = {field: PUBLISHED_AT, direction: DESC}
  ): CommentConnection!

  """The comments not yet approved by moderators."""
  viewerNotApprovedByModeratorComments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
    orderBy: CommentOrder = {field: PUBLISHED_AT, direction: DESC}
  ): CommentConnection

  """
  Return the related contribution if the contribution is related to another.
  """
  related: Contribution

  """The URL to this resource."""
  url: URI!

  """Whether or not the entity is published."""
  published: Boolean!

  """Identifies when the entity can no more be published."""
  publishableUntil: DateTime

  """Identifies when the entity was published at."""
  publishedAt: DateTime

  """Reason that the entity is not published."""
  notPublishedReason: NotPublishedReason

  """Whether or not the contribution is trashed."""
  trashed: Boolean!

  """Identifies the trashed visibility."""
  trashedStatus: TrashableStatus

  """Identifies the moment the moderator trashed the contribution."""
  trashedAt: DateTime

  """Identifies the reason why the moderator trashed the contribution."""
  trashedReason: String

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!

  """Identifies proposals as draft."""
  draft: Boolean!

  """Identifies when the entity was undraft at."""
  undraftAt: DateTime

  """Identifies the proposal title."""
  title: String!

  """Identifies the author of the contribution."""
  author: User!

  """Identifies the body of the proposal."""
  body: HTML

  """Identifies the responses of the proposal."""
  responses: [Response]!

  """Identifies the unique reference of the proposal."""
  reference(
    """Show the full reference?"""
    full: Boolean
  ): String!

  """Analysts's analysis of the proposal."""
  analyses: [ProposalAnalysis!]

  """The decision of the decision-maker on the analysis of the proposal."""
  decision: ProposalDecision

  """The supervisor's assessment on the analysis of the proposal."""
  assessment: ProposalAssessment

  """List of votes of the proposal."""
  votes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """The ordering options for votes."""
    orderBy: ProposalVoteOrder = {field: PUBLISHED_AT, direction: DESC}

    """If provided, retrieve only in this step."""
    stepId: ID

    """(ROLE_SUPER_ADMIN only) Select also unpublished votes."""
    includeUnpublished: Boolean = false

    """(ROLE_SUPER_ADMIN only) Select also not accounted votes."""
    includeNotAccounted: Boolean = false

    """(ROLE_SUPER_ADMIN only) Select also secret votes."""
    includeSecretBallot: Boolean = false
  ): ProposalVoteConnection!

  """List of selections (step an status) of the proposal."""
  selections: [ProposalSelection!]!

  """The address of the proposal."""
  address: GoogleMapsAddress

  """The theme of the proposal."""
  theme: Theme

  """The category of the proposal, related to the ProposalForm."""
  category: ProposalCategory

  """Identifies the summary of the contribution."""
  summary: String

  """Identifies the body of the contribution rendered to text."""
  bodyText: String

  """The slug of a proposal."""
  slug: String!
  progressSteps: [ProgressStep!]!
  evaluers: [Group!]! @deprecated(reason: "reason: \"This field belongs to our legacy evaluation tool Field \"evaluers\" will be removed \"TODO\"")
  currentVotableStep: ProposalStep
  viewerIsAnEvaluer: Boolean! @deprecated(reason: "reason: \"This field belongs to our legacy evaluation tool Field \"evaluers\" will be removed \"TODO\"")
  news(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
    orderBy: ProposalOrder = {field: PUBLISHED_AT, direction: DESC}
  ): NewsConnection!
  officialResponse: OfficialResponse

  """The related project."""
  project: Project
  status(
    """Used to get the status on a selection step."""
    step: ID
  ): ProposalStepStatus
  likers: [User!]!
  estimation: Float
  media: Media
  district: ProposalDistrict

  """The delete date."""
  deletedAt: DateTime

  """The update user."""
  updatedBy: User

  """The publication status for this proposal."""
  publicationStatus: ProposalPublicationStatus!

  """Identifies the preview text of the contribution."""
  summaryOrBodyExcerpt: String

  """Identifies the form where the contribution was submitted."""
  form: ProposalForm!

  """Identifies the answers to an evaluation form."""
  evaluation: ProposalEvaluation @deprecated(reason: "reason: \"This field belongs to our legacy evaluation tool Field \"viewerCanSeeEvaluation\" will be removed \"TODO\"")

  """Count of paper votes of the proposal."""
  paperVotesTotalCount(
    """If provided, retrieve only in this step."""
    stepId: ID
  ): Int!

  """Count of paper points of the proposal."""
  paperVotesTotalPointsCount(
    """If provided, retrieve only in this step."""
    stepId: ID
  ): Int!

  """The paper vote obtained by the proposal, step by step."""
  paperVotes(
    """If provided, retrieve only in this step."""
    stepId: ID
  ): [ProposalStepPaperVoteCounter!]

  """Check if the proposal has been merged with another"""
  hasBeenMerged: Boolean

  """If the proposal is a fusion, contains the list of merged proposals."""
  mergedFrom: [Proposal!]!

  """If the proposal is listed in a fusion, contains the list of fusions."""
  mergedIn: [Proposal!]!
  postsCount: Int!
  viewerCanSeeEvaluation: Boolean! @deprecated(reason: "reason: \"This field belongs to our legacy evaluation tool Field \"viewerCanSeeEvaluation` will be removed \"TODO\"})")
  viewerHasVote(
    """The concerned step."""
    step: ID!
  ): Boolean!
  viewerVote(
    """The concerned step."""
    step: ID!
  ): ProposalUserVote
  votableSteps: [ProposalStep!]!

  """The supervisor of the proposal."""
  supervisor: User

  """Does the user can evaluate the current proposal."""
  viewerCanEvaluate: Boolean!

  """The decision maker of the proposal."""
  decisionMaker: User

  """Does the user can give the final decision on the current proposal."""
  viewerCanDecide: Boolean!

  """The analysts assigned to the proposal."""
  analysts: [User!]

  """Does the user can analyse the current proposal."""
  viewerCanAnalyse: Boolean!

  """The proposal global progress status."""
  progressStatus: ProposalProgressState!

  """The proposal's related revision in pending state."""
  revisions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """If null, get revisions in done and pending state"""
    state: ProposalRevisionState = null
  ): ProposalRevisionConnection!

  """Viewer can contribute to the proposal"""
  contribuable: Boolean!
  isProposalAuthorAllowedToAddNews: Boolean!

  """
  True if proposal got any social network value and proposal form using any social networks.
  """
  isProposalUsingAnySocialNetworks: Boolean!

  """Is the body using Jodit Wysiwyg."""
  bodyUsingJoditWysiwyg: Boolean!

  """Wether or not the proposal is archived."""
  isArchived: Boolean!

  """The limit date before automatically archiving the proposal"""
  archiveLimitDate: DateTime

  """Can contact the proposal author."""
  canContactAuthor: Boolean!

  """Number of messages sent to the proposal author."""
  nbrOfMessagesSentToAuthor: Int!

  """The last step containing this proposal."""
  lastStepContainingProposal: ProposalStep!
}

"""The affiliation of a user to a proposal"""
enum ProposalAffiliation {
  """Show only the proposals where the current user is an owner"""
  OWNER

  """Show only the proposals where the current user is an evaluer"""
  EVALUER
}

"""A proposal analysis."""
type ProposalAnalysis implements Contribution {
  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!

  """The ID of an object"""
  id: ID!

  """The related proposal."""
  proposal: Proposal!

  """The last updated by a analyst."""
  analyst: User!

  """The estimated cost of the related proposal in €."""
  estimatedCost: Int

  """The current state of the analysis."""
  state: ProposalAnalysisState!

  """The analysis responses."""
  responses: [Response!]!

  """
  Return the related contribution if the contribution is related to another.
  """
  related: Contribution

  """Url of the contribution"""
  url: URI!

  """Get all comments of the analysis."""
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
  ): CommentConnection!

  """Users assigned to this proposal analysis"""
  concernedUsers: [User!]!
}

"""Available decisions value for a proposal analysis."""
enum ProposalAnalysisDecision {
  """The proposal's assessment state is favourable."""
  FAVOURABLE

  """The proposal's assessment state is unfavourable."""
  UNFAVOURABLE

  """The proposal's assessment state is unfavourable."""
  NONE
}

"""The possible states for a proposal analysis."""
enum ProposalAnalysisState {
  """The proposal's analysis is currently being edited"""
  IN_PROGRESS

  """The proposal's related analysis state is favourable."""
  FAVOURABLE

  """The proposal's related analysis state is unfavourable."""
  UNFAVOURABLE

  """The proposal's related analysis has been not made in time."""
  TOO_LATE

  """The analysis has not begun."""
  NONE
}

"""Available values for proposalArchivedUnitTime"""
enum ProposalArchivedUnitTime {
  """Set the archived value in days."""
  DAYS

  """Set the archived value in months."""
  MONTHS
}

"""A proposal assessment."""
type ProposalAssessment {
  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!

  """The proposal's assessment id."""
  id: ID!

  """The related proposal."""
  proposal: Proposal!

  """The last updated by a supervisor."""
  supervisor: User!

  """The current state of the assessment."""
  state: ProposalAssessmentState!

  """The body of the assessment."""
  body: String

  """The estimated cost of the related proposal in €."""
  estimatedCost: Int

  """The official response of the proposal assessment."""
  officialResponse: String
}

"""Available decisions value for a proposal analysis related statement."""
enum ProposalAssessmentDecision {
  """The proposal's assessment state is favourable."""
  FAVOURABLE

  """The proposal's assessment state is unfavourable."""
  UNFAVOURABLE
}

"""Possible values of a proposal's assessment state."""
enum ProposalAssessmentState {
  """The proposal's assessment is currently being edited"""
  IN_PROGRESS

  """The proposal's related statement state is favourable."""
  FAVOURABLE

  """The proposal's related statement state is unfavourable."""
  UNFAVOURABLE

  """The evaluation of the proposal was not issued in time."""
  TOO_LATE
}

"""Available errors on proposal assignment related mutations."""
enum ProposalAssignmentErrorCode {
  """You dont have access to revoke supervisor."""
  ACCESS_DENIED_TO_REVOKE_SUPERVISOR

  """You dont have access to assign supervisor."""
  ACCESS_DENIED_TO_ASSIGN_SUPERVISOR

  """You dont have access to revoke decision maker."""
  ACCESS_DENIED_TO_REVOKE_DECISION_MAKER

  """You dont have access to assign decision maker."""
  ACCESS_DENIED_TO_ASSIGN_DECISION_MAKER

  """You cant revoke yourself"""
  CANT_REVOKE_YOURSELF

  """
  You dont have permission to revoke analyst with analysis in progress .
  """
  IN_PROGRESS_ANALYSIS_REVOKE_ANALYST_DENIED

  """You dont have access to assign analyst."""
  ACCESS_DENIED_TO_ASSIGN_ANALYST

  """You cant add more 10 analysts."""
  MAX_ANALYSTS_REACHED
}

"""A proposal category"""
type ProposalCategory {
  """Identifies the name of the category."""
  name: String!
  id: ID!
  color: String!
  icon: String

  """Get the associated illustration of the category"""
  categoryImage: CategoryImage
}

input ProposalCategoryInput {
  id: ID
  name: String!
  color: AvailableProposalCategoryColor!
  icon: AvailableProposalCategoryIcon

  """The category image id to illustrate"""
  categoryImage: ID

  """The image id to transform as new categoryImage"""
  newCategoryImage: ID
}

"""Get the options for a proposal category within a proposal form"""
type ProposalCategoryOptions {
  """
  Get the list of the possible colors for a category within this proposal form
  """
  colors: [AvailableProposalCategoryColor!]!

  """
  Get the list of the possible icons for a category within this proposal form
  """
  icons: [AvailableProposalCategoryIcon!]!
}

"""A connection to a list of items."""
type ProposalConnection {
  totalCount: Int!
  fusionCount: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [ProposalEdge]
}

"""A proposal decision."""
type ProposalDecision {
  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!

  """The proposal's decision id."""
  id: ID!

  """The related proposal."""
  proposal: Proposal!

  """The last updated by a decision-maker."""
  decisionMaker: User!

  """The current state of the decision."""
  isApproved: Boolean!

  """The estimated cost of the related proposal in €."""
  estimatedCost: Int

  """The related official response."""
  post: OfficialResponse @deprecated(reason: "reason: \"Replaced by OfficialResponse\", Field \"post\" will be removed, Use \"officialResponse\" instead.")

  """The related official response."""
  officialResponse: OfficialResponse

  """The current status of the decision on the proposal"""
  state: ProposalDecisionState!

  """The step's related status assigned to the proposal."""
  refusedReason: ProposalStepStatus
}

"""Possible values of a proposal's decision state."""
enum ProposalDecisionState {
  """The proposal's decision is currently being edited"""
  IN_PROGRESS

  """The proposal's related decision state is favourable."""
  DONE
}

"""A proposal district"""
type ProposalDistrict implements District & Node & NodeSlug {
  """The ID of an object"""
  id: ID!
  name(
    """The locale to translate content (eg: FR_FR)."""
    locale: TranslationLocale
  ): String!
  slug(
    """The locale to translate content (eg: FR_FR)."""
    locale: TranslationLocale
  ): String!
  titleOnMap(
    """The locale to translate content (eg: FR_FR)."""
    locale: TranslationLocale
  ): String
  description(
    """The locale to translate content (eg: FR_FR)."""
    locale: TranslationLocale
  ): String
  geojson: GeoJSON
  geojsonStyle: CssJSON
  displayedOnMap: Boolean!
  border: Style
  background: Style
  translations: [DistrictTranslation!]!
  translationBySlug(slug: String!): DistrictTranslation!
  cover: Media
}

"""An edge in a connection."""
type ProposalEdge {
  """The item at the end of the edge."""
  node: Proposal!

  """A cursor for use in pagination."""
  cursor: String!
}

"""An evaluation for a proposal"""
type ProposalEvaluation {
  """Identifies the proposal."""
  proposal: Proposal!

  """The revision number of the evaluation"""
  version: Int!

  """List of responses for the evaluation"""
  responses: [Response]!
}

"""A budget form"""
type ProposalForm implements Node & UniformResourceLocatable {
  """The ID of an object"""
  id: ID!

  """A list of proposals associated to the object."""
  proposals(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """
    If non-null, filters proposals with the given trashed status (eg: visible, not visible).
    """
    trashedStatus: ProposalTrashedStatus = NOT_TRASHED

    """
    ID of a User to filter by. If non-null, only proposals authored by this user will be returned.
    """
    author: ID

    """Ordering options for proposals returned from the connection."""
    orderBy: [ProposalOrder] = [{field: PUBLISHED_AT, direction: ASC}]

    """(ROLE_ADMIN only) Select also draft proposals."""
    includeDraft: Boolean = false

    """
    The state of the proposals to filter by. If non-null, filters proposals with the given state.
    """
    state: ProposalsState

    """
    ID of a ProposalDistrict to filter by. If non-null, filters proposals with the given district.
    """
    district: ID

    """
    ID of a UserType to filter by. If non-null, filters proposals with the given type of author.
    """
    userType: ID

    """
    ID of a ProposalCategory to filter by. If non-null, filters proposals with the given category.
    """
    category: ID

    """
    ID of a ProposalStatus to filter by. If non-null, filters proposals with the given status.
    """
    status: ID

    """
    ID of a Theme to filter by. If non-null, filters proposals with the given theme.
    """
    theme: ID

    """If non-null, filters proposals with the given string to look for."""
    term: String
    reference: String

    """Affiliation options for proposals returned from the connection."""
    affiliations: [ProposalAffiliation]

    """(ROLE_SUPER_ADMIN only) Select also unpublished proposals."""
    includeUnpublished: Boolean = false

    """The global progress status of the proposal."""
    progressStatus: ProposalProgressState

    """The analysts's ids assigned to the proposal"""
    analysts: [ID!]

    """The supervisor's id assigned to the proposal"""
    supervisor: ID

    """The decision-maker's id assigned to the proposal"""
    decisionMaker: ID
    excludeViewerVotes: Boolean = false

    """Filter proposals by a given geo bounding box"""
    geoBoundingBox: GeoBoundingBox
  ): ProposalConnection!

  """The viewer unpublished proposals (only visible by viewer)."""
  viewerProposalsUnpublished(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
  ): ProposalConnection

  """The URL to this resource."""
  url: URI!

  """The user that created the resource."""
  creator: User
  reference: String!
  description: HTML

  """Is the description using Jodit Wysiwyg."""
  descriptionUsingJoditWysiwyg: Boolean!
  summaryHelpText: String
  illustrationHelpText: String
  title: String!

  """Available categories for proposals of this form."""
  categories(order: CategoryOrderField): [ProposalCategory!]!
  usingThemes: Boolean!

  """Viewer can contribute to the form"""
  contribuable: Boolean!
  themeMandatory: Boolean!
  themeHelpText: String
  usingDistrict: Boolean!
  commentable: Boolean!
  costable: Boolean!
  proposalInAZoneRequired: Boolean!
  districts(order: DistrictOrderField): [ProposalDistrict!]!
  districtMandatory: Boolean!
  districtHelpText: String
  usingCategories: Boolean!
  categoryMandatory: Boolean!
  categoryHelpText: String
  usingAddress: Boolean!
  titleHelpText: String
  descriptionHelpText: String
  addressHelpText: String
  questions(
    """Filter questions by a given filter."""
    filter: QuestionsFilterType
  ): [Question!]!
  mapCenter: GoogleMapsAddress
  zoomMap: Int
  adminUrl: URI!
  notificationsConfiguration: NotificationsConfiguration!

  """Get the evaluation form of the proposal form"""
  evaluationForm: EvaluationForm

  """Identifies the step that use the proposal form."""
  step: CollectStep
  allowAknowledge: Boolean!

  """Proposal form is type of Proposal or Question"""
  isProposalForm: Boolean!

  """The kind of proposal form (Proposal/Question)"""
  objectType: ProposalFormObjectType!

  """Proposal form using description field"""
  usingDescription: Boolean!

  """Proposal form using illustration field"""
  usingIllustration: Boolean!

  """Proposal form using summary field"""
  usingSummary: Boolean!

  """Proposal form is description field is mandatory or not"""
  descriptionMandatory: Boolean!

  """
  When a user is creating a proposal, suggest similar to avoid duplicate.
  """
  suggestingSimilarProposals: Boolean!
  isIndexationDone: Boolean!

  """can the viewer send a contact message to the proposals author"""
  canContact: Boolean!

  """The configuration for the related analysis."""
  analysisConfiguration: AnalysisConfiguration

  """True if the GRID view is enabled."""
  isGridViewEnabled: Boolean!

  """True if the LIST view is enabled."""
  isListViewEnabled: Boolean!

  """True if the MAP view is enabled."""
  isMapViewEnabled: Boolean!

  """The number of social networks used."""
  numberOfUsedSocialNetworks: Int!

  """Proposal form using web page field"""
  usingWebPage: Boolean!

  """Proposal form using Twitter field"""
  usingTwitter: Boolean!

  """Proposal form using Facebook field"""
  usingFacebook: Boolean!

  """Proposal form using Instagram field"""
  usingInstagram: Boolean!

  """Proposal form using Youtube field"""
  usingYoutube: Boolean!

  """Proposal form using LinkedIn field"""
  usingLinkedIn: Boolean!

  """Proposal form using any social networks field"""
  isUsingAnySocialNetworks: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime

  """The owner of the questionnaire."""
  owner: QuestionnaireOwner

  """The social networks used as string."""
  socialNetworksUsed: String!

  """The number of email messages sent on this form proposals."""
  nbrOfMessagesSent: Int!
}

"""The affiliation of a user to a `ProposalForm.`"""
enum ProposalFormAffiliation {
  """`ProposalForms` that are owned by the authenticated user."""
  OWNER
}

"""Available actions for an `handleProposalFormCategoryImage` mutation."""
enum ProposalFormCategoryImageMutationAction {
  """Add new category image."""
  ADD

  """Delete existing category image."""
  DELETE
}

"""A connection to a list of items."""
type ProposalFormConnection {
  totalCount: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [ProposalFormEdge]
}

"""An edge in a connection."""
type ProposalFormEdge {
  """The item at the end of the edge."""
  node: ProposalForm!

  """A cursor for use in pagination."""
  cursor: String!
}

input ProposalFormNotificationsInput {
  onCreate: Boolean!
  onUpdate: Boolean!
  onDelete: Boolean!
}

"""Value of a proposal sorting"""
enum ProposalFormObjectType {
  """The proposal form allows to submit proposals"""
  PROPOSAL

  """The proposal form allows to submit questions."""
  QUESTION

  """The proposal form allows to submit opinions."""
  OPINION
}

"""Ways in which lists of proposalForms can be ordered upon return."""
input ProposalFormOrder {
  """The field to order `ProposalForm` by."""
  field: ProposalFormOrderField! = CREATED_AT

  """The ordering direction."""
  direction: OrderDirection! = DESC
}

"""Properties by which `ProposalForms` can be ordered."""
enum ProposalFormOrderField {
  """
  Allows ordering a list of `ProposalForms` by when they have been updated.
  """
  UPDATED_AT

  """
  Allows ordering a list of `ProposalForms` by when they have been created.
  """
  CREATED_AT
}

"""Represent an owner of a `ProposalForm`."""
interface ProposalFormOwner {
  """User ID"""
  id: ID!

  """User username."""
  username: String

  """Get all `ProposalForms` that the user owns."""
  proposalForms(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """Only available proposalForms will be returned."""
    availableOnly: Boolean = false

    """
    Array of viewer's affiliation options for proposalForms returned from the connection.
                                For example, OWNER will include only proposalForms that the current viewer owns.
                                
    """
    affiliations: [ProposalFormAffiliation!]

    """the search query"""
    query: String

    """The ordering direction for proposalForms"""
    orderBy: ProposalFormOrder = {field: CREATED_AT, direction: DESC}
  ): ProposalFormConnection!
}

"""Available errors on proposal illustration mutation"""
enum ProposalIllustrationErrorCode {
  """No proposal match your id."""
  PROPOSAL_NOT_FOUND

  """Access denied."""
  ACCESS_DENIED

  """No media match."""
  MEDIA_NOT_FOUND
}

"""Available errors on proposal news mutation"""
enum ProposalImportsErrorCode {
  """No proposal form match your id"""
  PROPOSAL_FORM_NOT_FOUND

  """CSV file has bad header"""
  BAD_DATA_MODEL

  """Given CSV file is empty"""
  EMPTY_FILE

  """Given CSV file contain over 501 lines"""
  TOO_MUCH_LINES

  """Viewer is not allowed to import proposals"""
  VIEWER_NOT_ALLOWED
}

"""Available errors on proposal news mutation"""
enum ProposalNewsErrorCode {
  """No proposal match on your post"""
  PROPOSAL_NOT_FOUND

  """Access denied."""
  ACCESS_DENIED

  """ROLE_USER cant add proposal news on this project"""
  PROPOSAL_DOESNT_ALLOW_NEWS

  """No post match your id"""
  POST_NOT_FOUND

  """Invalid data in submitted form ."""
  INVALID_DATA
}

"""Properties by which proposal connections can be ordered."""
input ProposalOrder {
  """The field in which to order nodes by."""
  field: ProposalOrderField!

  """The direction in which to order nodes."""
  direction: OrderDirection! = ASC
}

"""Ordering options for proposals votes connections."""
enum ProposalOrderField {
  """
  Allows ordering a list of proposals by the number of comments it have.
  """
  COMMENTS

  """
  Allows ordering a list of proposals by the cost it have been estimated.
  """
  COST

  """Allows ordering a list of proposals by their creation date."""
  CREATED_AT

  """Allows ordering a list of proposals by when they were published."""
  PUBLISHED_AT

  """Allows randomizing a list of proposals."""
  RANDOM

  """Allows ordering a list of proposals by the number of votes it have."""
  VOTES

  """Allows ordering a list of proposals by the number of points it have."""
  POINTS

  """
  Allows ordering a list of proposals by the number of messages it have received.
  """
  NUMBER_OF_MESSAGES_RECEIVED

  """Allows ordering a list of proposals by revision date."""
  REVISION_AT

  """Allows ordering a list of proposals by categories."""
  CATEGORY

  """Allows ordering a list of proposals by district."""
  DISTRICT
}

"""Possible values of a proposal's global progress state."""
enum ProposalProgressState {
  """The proposal is currently being edited"""
  IN_PROGRESS

  """The proposal's progress state is favourable."""
  FAVOURABLE

  """The proposal's progress state is unfavourable."""
  UNFAVOURABLE

  """The evaluation of the proposal was not issued in time."""
  TOO_LATE

  """The evaluation of the proposal has not started yet."""
  TODO
}

"""Available statuses"""
enum ProposalPublicationStatus {
  """Publicly visible"""
  PUBLISHED

  """Publicly visible in the trash bin"""
  TRASHED

  """In the trash bin, content not visible"""
  TRASHED_NOT_VISIBLE

  """Not publicly visible, deleted by author"""
  DELETED

  """Draft, not publicly visible, only showed for his author."""
  DRAFT

  """Visible by author only."""
  UNPUBLISHED

  """Proposal archived."""
  ARCHIVED
}

"""A proposal revision."""
type ProposalRevision {
  """The proposal's revision id."""
  id: ID!

  """The related proposal."""
  proposal: Proposal!

  """The author of revision"""
  author: User!

  """The current state of the revision on the proposal"""
  state: ProposalRevisionState!

  """The reason of revision"""
  reason: String

  """The creation date of the assessment."""
  createdAt: DateTime!

  """The date of expiration."""
  expiresAt: DateTime!

  """The date of revision by user."""
  revisedAt: DateTime

  """Is the revision expired ?"""
  isExpired: Boolean!

  """The information to resolve revision without html tags"""
  bodyText: String!

  """The information to resolve revision"""
  body: HTML!

  """Is the body using Jodit Wysiwyg."""
  bodyUsingJoditWysiwyg: Boolean!
}

"""A connection to a list of items."""
type ProposalRevisionConnection {
  """Identifies the total count of items in the connection."""
  totalCount: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [ProposalRevisionEdge]
}

"""An edge in a connection."""
type ProposalRevisionEdge {
  """The item at the end of the edge."""
  node: ProposalRevision!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Possible values of a proposal's revision state."""
enum ProposalRevisionState {
  """The proposal's revision is currently pending"""
  PENDING

  """The proposal's related revision is done"""
  REVISED

  """The proposal's related revision is pending but expired"""
  EXPIRED
}

"""The selection of a proposal in a step."""
type ProposalSelection {
  """The step where the proposal is selected."""
  step: SelectionStep!

  """The status of the proposal in the step."""
  status: ProposalStepStatus
}

"""Represents an vote from a non-registered to a proposal."""
type ProposalSmsVote implements ProposalVote & Vote {
  """The ID of an object"""
  id: ID!

  """The date of the vote."""
  createdAt: DateTime!

  """The author of the contribution. If null, the vote is anonymous."""
  author: User

  """
  Return the related contribution if the contribution is related to another.
  """
  related: Contribution

  """Returns 'proposalSmsVote'."""
  kind: String!

  """Returns if vote is accounted or not"""
  isAccounted: Boolean!

  """The participant of the contribution."""
  participant: Participant

  """Url of the contribution"""
  url: URI!

  """Return the proposal."""
  proposal: Proposal!

  """Return the step."""
  step: ProposalStep!

  """Whether or not the entity is published."""
  published: Boolean!

  """Identifies when the entity was published at."""
  publishedAt: DateTime
}

"""A connection to a list of items."""
type ProposalSmsVoteConnection {
  totalCount: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [ProposalSmsVoteEdge]
}

"""An edge in a connection."""
type ProposalSmsVoteEdge {
  """The item at the end of the edge."""
  node: ProposalSmsVote!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Available errors on proposal social networks mutation."""
enum ProposalSocialNetworksErrorCode {
  """No proposal match your id."""
  PROPOSAL_NOT_FOUND

  """Access denied."""
  ACCESS_DENIED

  """Social networks are not available on this proposal."""
  PROPOSAL_DOESNT_ALLOW_SOCIAL_NETWORKS
}

"""Value of a proposal sorting"""
enum ProposalSort {
  """Sort by the oldest ones first"""
  OLD

  """Sort by the most recent ones first"""
  LAST

  """Sort by the most voted ones first"""
  VOTES

  """Sort by the least voted ones first"""
  LEAST_VOTE

  """Sort by the most commented first"""
  COMMENTS

  """Sort randomly"""
  RANDOM

  """Sort by the cheap ones first"""
  CHEAP

  """Sort by the expensive ones first"""
  EXPENSIVE
}

"""Available errors on analysis related mutations."""
enum ProposalStatementErrorCode {
  """The given proposal does not exist."""
  NON_EXISTING_PROPOSAL

  """You are not assigned to this proposal."""
  NOT_ASSIGNED_PROPOSAL

  """The decision-maker has already gave his decision about this proposal."""
  DECISION_ALREADY_GIVEN

  """An internal server error occurred."""
  INTERNAL_ERROR

  """The refused reason must not be empty if the proposal is not approved."""
  REFUSED_REASON_EMPTY

  """The proposal analysis does not exist."""
  NON_EXISTING_ANALYSIS

  """The provided responses are not valid."""
  INVALID_FORM
}

"""A proposal step"""
interface ProposalStep {
  """The requirements to vote on this step."""
  requirements(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
  ): RequirementConnection!
  allRequirements(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
  ): RequirementConnection!

  """The ID of an object"""
  id: ID!

  """The URL to this resource."""
  url: URI!

  """When the time interval begins or ends."""
  timeRange: TimeRange!

  """The title of the step."""
  title: String!

  """Identifies the current state of the step."""
  state: StepState!

  """The kind of the step"""
  kind: String! @deprecated(reason: "Please, use `__typename` instead.")

  """The type of the step"""
  type: String @deprecated(reason: "Please, use `__typename` instead.")

  """Does the step have a end date ?"""
  timeless: Boolean

  """The introduction text of the step."""
  body: HTML

  """Is the body using Jodit Wysiwyg."""
  bodyUsingJoditWysiwyg: Boolean!

  """Is the step enabled or not"""
  enabled: Boolean!

  """The label of the step"""
  label: String!

  """The step's metadescription"""
  metaDescription: String

  """The step's custom code"""
  customCode: String

  """The step's slug"""
  slug: String

  """Events linked to the step"""
  events(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
    orderBy: EventOrder! = {field: START_AT, direction: DESC}

    """If non-null, filters events by comparing the start date with present."""
    isFuture: Boolean
  ): EventConnection!
  project: Project
  exportStepUrl: URI
  exportContributorsUrl: URI
  adminUrl(operationType: StepAdminUrlOperationType): URI!

  """Mediators assigned to this step."""
  mediators(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """Filter mediators by user username."""
    username: String
  ): MediatorConnection

  """A list of proposals associated to the object."""
  proposals(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """
    If non-null, filters proposals with the given trashed status (eg: visible, not visible).
    """
    trashedStatus: ProposalTrashedStatus = NOT_TRASHED

    """
    ID of a User to filter by. If non-null, only proposals authored by this user will be returned.
    """
    author: ID

    """Ordering options for proposals returned from the connection."""
    orderBy: [ProposalOrder] = [{field: PUBLISHED_AT, direction: ASC}]

    """(ROLE_ADMIN only) Select also draft proposals."""
    includeDraft: Boolean = false

    """
    The state of the proposals to filter by. If non-null, filters proposals with the given state.
    """
    state: ProposalsState

    """
    ID of a ProposalDistrict to filter by. If non-null, filters proposals with the given district.
    """
    district: ID

    """
    ID of a UserType to filter by. If non-null, filters proposals with the given type of author.
    """
    userType: ID

    """
    ID of a ProposalCategory to filter by. If non-null, filters proposals with the given category.
    """
    category: ID

    """
    ID of a ProposalStatus to filter by. If non-null, filters proposals with the given status.
    """
    status: ID

    """
    ID of a Theme to filter by. If non-null, filters proposals with the given theme.
    """
    theme: ID

    """If non-null, filters proposals with the given string to look for."""
    term: String
    reference: String

    """Affiliation options for proposals returned from the connection."""
    affiliations: [ProposalAffiliation]

    """(ROLE_SUPER_ADMIN only) Select also unpublished proposals."""
    includeUnpublished: Boolean = false

    """The global progress status of the proposal."""
    progressStatus: ProposalProgressState

    """The analysts's ids assigned to the proposal"""
    analysts: [ID!]

    """The supervisor's id assigned to the proposal"""
    supervisor: ID

    """The decision-maker's id assigned to the proposal"""
    decisionMaker: ID
    excludeViewerVotes: Boolean = false

    """Filter proposals by a given geo bounding box"""
    geoBoundingBox: GeoBoundingBox
  ): ProposalConnection!

  """The viewer unpublished proposals (only visible by viewer)."""
  viewerProposalsUnpublished(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
  ): ProposalConnection

  """
  If votesRanking enabled, votesLimit is the reference value for the points scale.
  """
  votesLimit: Int

  """
  Minimum number of votes a user must submit for his votes to be counted.
  """
  votesMin: Int
  budget: Int
  voteType: ProposalStepVoteType!
  votable: Boolean!
  votesHelpText: String
  voteThreshold: Int
  statuses: [ProposalStepStatus!]!
  defaultSort: String
  open: Boolean!

  """If enabled, allow voters to order their votes by point"""
  votesRanking: Boolean!

  """A list of viewer votes associated with the step."""
  viewerVotes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """Order votes."""
    orderBy: ProposalVoteOrder = {direction: DESC}

    """If anonymous user the token used to vote."""
    token: String
  ): ProposalVoteConnection!
  form: ProposalForm

  """Whether or not secret ballot is enable"""
  isSecretBallot: Boolean!

  """If not null, the date to display vote count"""
  publishedVoteDate: DateTime

  """Whether or not can display vote counters and points"""
  canDisplayBallot: Boolean!

  """Whether or not sms vote are enabled."""
  isProposalSmsVoteEnabled: Boolean

  """
  Determines how long it will take for the proposal to be archived, coupled with proposalArchivedUnitTime.
  """
  proposalArchivedTime: Int!

  """
  The unit chosen to set the archived duration can be either MONTHS or DAYS
  """
  proposalArchivedUnitTime: ProposalArchivedUnitTime!
}

type ProposalStepPaperVoteCounter {
  """The proposal voted."""
  proposal: Proposal!

  """The step where the proposal is voted."""
  step: ProposalStep!

  """the count of paper vote won by by the proposal."""
  totalCount: Int!

  """the count of paper points won by by the proposal."""
  totalPointsCount: Int!
}

"""The given proposal status in a step."""
type ProposalStepStatus {
  """The id of the proposal step status."""
  id: ID!

  """The name of the proposal step status."""
  name: String!

  """The color of the proposal step status."""
  color: ProposalStepStatusColor!
}

"""Different status type"""
enum ProposalStepStatusColor {
  """Info color."""
  INFO

  """Primary color."""
  PRIMARY

  """Success color."""
  SUCCESS

  """Warning color."""
  WARNING

  """Caution color."""
  CAUTION

  """Danger color."""
  DANGER

  """Default color."""
  DEFAULT
}

"""Type of vote."""
enum ProposalStepVoteType {
  DISABLED
  SIMPLE
  BUDGET
}

"""Possible values of a proposal's state."""
enum ProposalTaskState {
  """The proposal's got some task in todo"""
  TODO

  """The proposal's all task done"""
  DONE
}

"""Possible trashed status for a `Proposal`."""
enum ProposalTrashedStatus {
  """`NOT_TRASHED` status to inclide the non trashed proposal."""
  NOT_TRASHED

  """`TRASHED` status to include the trashed proposal."""
  TRASHED
}

"""Represents a proposal vote."""
type ProposalUserVote implements ProposalVote & Vote & Publishable & PrivatableVote {
  """The ID of an object"""
  id: ID!

  """Whether or not the entity is published."""
  published: Boolean!

  """Identifies when the entity can no more be published."""
  publishableUntil: DateTime

  """Identifies when the entity was published at."""
  publishedAt: DateTime

  """Reason that the entity is not published."""
  notPublishedReason: NotPublishedReason

  """Whether the author of the vote is anonymous or not."""
  private: Boolean @deprecated(reason: "reason: \"This field has been renamed, Field \"private\" will be removed, Use \"anonymous\" instead.")

  """Whether the author of the vote is anonymous or not."""
  anonymous: Boolean!

  """The contribution that was voted."""
  related: Contribution

  """Url of the contribution"""
  url: URI!

  """Return the proposal."""
  proposal: Proposal!

  """Return the step."""
  step: ProposalStep!

  """The date of the vote."""
  createdAt: DateTime!

  """The author of the contribution. If null, the vote is anonymous."""
  author: User

  """Returns 'proposalUserVote'."""
  kind: String!

  """Returns if vote is accounted or not"""
  isAccounted: Boolean!

  """The participant of the contribution."""
  participant: Participant

  """Return the ranking of the vote (if any)"""
  ranking: Int
}

"""Represents a proposal vote."""
interface ProposalVote {
  """The ID of an object"""
  id: ID!

  """
  Return the related contribution if the contribution is related to another.
  """
  related: Contribution

  """Url of the contribution"""
  url: URI!

  """Return the proposal."""
  proposal: Proposal!

  """Return the step."""
  step: ProposalStep!

  """The date of the vote."""
  createdAt: DateTime!

  """Whether or not the entity is published."""
  published: Boolean!

  """Identifies when the entity was published at."""
  publishedAt: DateTime
}

"""A connection to a list of items."""
type ProposalVoteConnection {
  totalCount: Int!
  creditsLeft: Int
  creditsSpent: Int

  """
  Default value is 0. To know if vote ranking is enabled check votesRanking value field on proposalStep
  """
  totalPointsCount: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [ProposalVoteEdge]
}

"""An edge in a connection."""
type ProposalVoteEdge {
  """The item at the end of the edge."""
  node: ProposalVote!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Ways in which lists of votes can be ordered upon return."""
input ProposalVoteOrder {
  """The field in which to order nodes by."""
  field: ProposalVoteOrderField! = PUBLISHED_AT

  """The direction in which to order nodes."""
  direction: OrderDirection! = DESC
}

"""Ordering options for proposals votes connections."""
enum ProposalVoteOrderField {
  """Allows ordering a list of vote by when they were published."""
  PUBLISHED_AT

  """Allows ordering a list of vote by position."""
  POSITION
}

"""Possible values to filters a list of proposals based on their state."""
enum ProposalsState {
  """Show all proposals"""
  ALL

  """Show only published proposals"""
  PUBLISHED

  """Show only trashed proposals"""
  TRASHED

  """Show only drafted proposals"""
  DRAFT

  """Show only archived proposals"""
  ARCHIVED
}

"""Entities that can be published."""
interface Publishable {
  """The ID of an object"""
  id: ID!

  """Whether or not the entity is published."""
  published: Boolean!

  """Identifies when the entity can no more be published."""
  publishableUntil: DateTime

  """Identifies when the entity was published at."""
  publishedAt: DateTime

  """Reason that the entity is not published."""
  notPublishedReason: NotPublishedReason
}

"""Root of the schema"""
type Query {
  """The currently authenticated user."""
  viewer: User!

  """Lookup a node by its ID."""
  node(
    """The ID of an object."""
    id: ID!
  ): Node

  """Lookup nodes by a list of IDs."""
  nodes(
    """The list of node IDs."""
    ids: [ID!]!
  ): [Node]!

  """Lookup projects."""
  projects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """Ordering options for projects returning from the connection."""
    orderBy: ProjectOrder = {direction: DESC, field: PUBLISHED_AT}

    """ID of a Theme to filter by. If non-null, filter projects by themes"""
    theme: ID

    """
    ID of a User to filter by. If non-null, only projects authored by this user will be returned.
    """
    author: ID

    """If provided, searches projects by title."""
    term: String

    """
    ID of a Status to filter by. If non-null, filter projects by statuses.
    """
    status: ID

    """
    ID of a ProjectType to filter by. If non-null, filter projects by types
    """
    type: ID

    """
    ID of a GlobalDistrict to filter by. If non-null, filter projects by district
    """
    district: ID

    """If true, only projects with at least 1 event will be returned."""
    withEventOnly: Boolean = false

    """If true, only projects with public visibility will be returned."""
    onlyPublic: Boolean = false

    """code of a Locale to filter by. If non-null, filter projects by locale"""
    locale: String = null

    """If true, only projects with public visibility will be returned."""
    archived: ProjectArchiveFilter
  ): ProjectConnection!

  """Lookup events."""
  events(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """Ordering options for events returning from the connection."""
    orderBy: EventOrder = {field: START_AT, direction: DESC}

    """
    ID of a Project to filter by. If non-null, only events belonging to the project will be returned.
    """
    project: ID

    """If provided, searches events by title and description."""
    search: String

    """If provided, searches events by locale."""
    locale: TranslationLocale

    """If non-null, filters events by comparing the start date with present."""
    isFuture: Boolean

    """If non-null, filters events with the given theme."""
    theme: ID

    """If non-null, filters events with the given district."""
    district: ID

    """If non-null, filters events with the given author."""
    author: ID

    """If non-null, filters events with the given author type."""
    userType: ID

    """
    If true, filter the events with registration link or internal registration
    enable, if false  filter the events with both registration type at false
    """
    isRegistrable: Boolean

    """
    If true get enabled only, if false get disabled, if null get all events
    """
    enabled: Boolean = true
  ): EventConnection!

  """Lookup users."""
  users(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """Remove super admin from export."""
    superAdmin: Boolean = false

    """Get user list with disabled users"""
    withDisabled: Boolean = false

    """Filter the list by email confirmation"""
    emailConfirmed: Boolean = null

    """Filter the list by consent to internal communication"""
    consentInternalCommunication: Boolean = null

    """Filter the list by project admins"""
    onlyProjectAdmins: Boolean = null

    """Ordering options for users returning from the connection."""
    orderBy: UserOrder = {field: CREATED_AT, direction: DESC}
  ): UserConnection!

  """List all the district project in the platform."""
  globalDistricts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """Filter by name."""
    name: String = null
  ): GlobalDistrictConnection!

  """Lookup a proposal from its unique slug."""
  proposalFromSlug(slug: String!): Proposal

  """Lookup pages."""
  pages: [Page!]!

  """Lookup blog posts."""
  posts: [Post!]!

  """Lookup themes."""
  themes(
    """Filter by title."""
    title: String = null
  ): [Theme!]!

  """Get the available map tokens"""
  mapTokens: [MapToken!]!

  """Search a particular map token by its provider"""
  mapToken(
    """The map provider"""
    provider: MapTokenProvider!

    """
    Whether or not resolves the default map tokens if no custom tokens are specified
    """
    includeDefault: Boolean = true
  ): MapToken

  """Get the current favicon"""
  siteFavicon: SiteImage!

  """Get a site image"""
  siteImage(
    """The site image keyname"""
    keyname: String!
  ): SiteImage

  """Get the current registration form"""
  registrationForm: RegistrationForm

  """Get the current post registration script"""
  registrationScript: String

  """Validate the registration credentials"""
  passwordComplexityScore(
    """The username of the user"""
    username: String

    """The email of the user"""
    email: String

    """The password of the user"""
    password: String!
  ): Int

  """Get the contact forms"""
  contactForms: [ContactForm!]
  projectAuthors: [Author!]!
  projectTypes(
    """If true, filter the projectTypes only used by the projects"""
    onlyUsedByProjects: Boolean = false
  ): [ProjectType!]!
  userSearch(
    """
    Filter users with ROLE_USER only and who does not belong to an organization.
    """
    isMediatorCompliant: Boolean = false

    """Filter by displayName."""
    displayName: String = null

    """Return all users except the ones in the array."""
    notInIds: [String] = null

    """If true, retrieve only users that created an event."""
    authorsOfEventOnly: Boolean = false
  ): [User]
  consultationSteps(
    """
    If omitted, returns all consultations steps. If provided, returns the consultation step of the particular id.
    """
    id: ID
  ): [ConsultationStep!]!

  """Get all consultations."""
  consultations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """
    If omitted, returns all consultations. If provided, returns the consultation of the particular id.
    """
    id: ID

    """Filter consultation by a given query."""
    query: String

    """Order consultation by a given criterias."""
    orderBy: ConsultationOrder = {field: POSITION, direction: ASC}
  ): ConsultationConnection!

  """Lookup groups."""
  groups(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """The term to filter groups"""
    term: String
  ): GroupConnection!

  """Lookup forms."""
  proposalForms(
    """Filter proposal form by title"""
    query: String
  ): [ProposalForm]!

  """Lookup category images."""
  categoryImages(
    """
    If true, get default category image, if false get custom category image, if null get all
    """
    isDefault: Boolean
  ): [CategoryImage!]!

  """Lookup availables districts on a proposalForm for a given address."""
  availableDistrictsForLocalisation(proposalFormId: ID!, latitude: Float!, longitude: Float!): [ProposalDistrict!]!

  """TO BE REMOVED"""
  contributions(
    """Returns all contributions of the provided consultation."""
    consultation: ID!
  ): [Opinion!]!

  """TO BE REMOVED"""
  question(id: Int!): Question!
  availableQuestionnaires(
    """the term to filter questions"""
    term: String
  ): [Questionnaire!]!

  """
  List all the contributors in the platform, totalCount includes anon replies and votes.
  """
  allContributors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
  ): UserConnection!

  """Return the number of contributions in the platform."""
  allContributions: Int!

  """List all the votes in the platform."""
  votes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """Get only accounted votes."""
    onlyAccounted: Boolean = true
  ): VoteConnection!

  """Get the current shield admin form."""
  shieldAdminForm: ShieldAdminForm!

  """List all SSO Configurations."""
  ssoConfigurations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
    ssoType: SSOType
  ): SSOConfigurationConnection!

  """List all sections."""
  sections(
    """Filter by contributor of section."""
    user: ID
  ): [Section!]!

  """List all medias"""
  medias(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """Search by term."""
    term: String

    """Filter medias linked to a profile."""
    showProfilePictures: Boolean! = true
  ): MediaConnection!

  """List all locales on the platform."""
  availableLocales(includeDisabled: Boolean): [Locale!]!

  """List all locales published."""
  locales: [Locale!]!

  """Get the default locale."""
  defaultLocale: Locale!

  """List all available fonts on the platform."""
  fonts(
    """If true, get all fonts uploaded from a same file"""
    splitFontsFromSameFile: Boolean = false
  ): [Font!]!

  """Retrieve the configured notifications from email."""
  notificationsFromEmail: Email

  """get a site parameter from its keyname"""
  siteParameter(
    """keyname of the site parameter to get"""
    keyname: String!
  ): SiteParameter

  """get consultations without step"""
  availableConsultations(
    """Retrieve consultation where title match term param."""
    term: String
  ): [Consultation]!

  """Fetch projects with assignment"""
  viewerAssignedProjectsToAnalyse: [Project!]

  """Whether or not this user can access our evaluations page."""
  viewerCanSeeEvaluationsPage: Boolean!

  """An address from Google Maps."""
  geocode(
    """the latitude of geocode"""
    latitude: Float!

    """the longitude of geocode"""
    longitude: Float!
  ): GoogleMapsAddress

  """List all feature flags."""
  featureFlags: [FeatureFlag!]!

  """List all invited users."""
  userInvitations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String
    first: Int = 50
    term: String = null
    status: UserInviteStatus = null
  ): UserInviteConnection!

  """
  Check availability of a given email list among existing users and invitations.
  """
  userInvitationsAvailabilitySearch(emails: [String!]!): UserInvitationsAvailabilityConnection!

  """List all site colors."""
  siteColors: [SiteColor!]!

  """Retrieve the current version of the app."""
  appVersion: String

  """Get all mailing lists"""
  mailingLists(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """If provided, filter lists by name"""
    term: String
  ): MailingListConnection!

  """Get all emailing campaigns"""
  emailingCampaigns(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """optional filter by status"""
    status: EmailingCampaignStatusFilter

    """The ordering direction for sending date"""
    orderBy: EmailingCampaignOrder = {field: SEND_AT, direction: DESC}

    """If provided, filter campaigns by name"""
    term: String
  ): EmailingCampaignConnection!

  """Get the options for creating a category within a proposal form"""
  proposalCategoryOptions: ProposalCategoryOptions!

  """Get HomePageProjectsSectionConfiguration"""
  homePageProjectsSectionConfiguration: HomePageProjectsSectionConfiguration!

  """Get HomePageProjectsMapSectionConfiguration"""
  homePageProjectsMapSectionConfiguration: HomePageProjectsMapSectionConfiguration!

  """Get CarrouselConfiguration"""
  carrouselConfiguration(
    """Section type."""
    type: String!
  ): CarrouselConfiguration!

  """Return the platform analytics"""
  analytics(filter: QueryAnalyticsFilter!): PlatformAnalytics!
  isEmailAlreadyTaken(
    """Email to check."""
    email: Email!
  ): Boolean!
  externalServiceConfiguration(
    """The type of configuration asked"""
    type: ExternalServiceConfigurationType!
  ): ExternalServiceConfiguration!

  """Get all domains registered"""
  senderEmailDomains: [SenderEmailDomain!]!

  """Get all sending addresses registered"""
  senderEmails: [SenderEmail!]!

  """Get site settings."""
  siteSettings: SiteSettings

  """Get list of sms orders."""
  smsOrders(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """Filter sms orders."""
    filter: SmsOrdersFilters = UNPROCESSED
  ): SmsOrderConnection!

  """Get list of sms credits."""
  smsCredits(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
  ): SmsCreditConnection!

  """Get sms analytics"""
  smsAnalytics: SmsAnalytics!
  organizations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """search an organization by its name or by member email"""
    search: String

    """
    Array of affiliations of viewer to organizations.
                                For example, ADMIN will return only organizations the viewer is member of
                                
    """
    affiliations: [OrganizationAffiliation!]
  ): OrganizationConnection!
  participants(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
  ): ParticipantConnection!

  """The navbar menu items."""
  menuItems: [MenuItem!]!

  """List of arguments"""
  arguments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """The ordering direction for the argument creation or updated date"""
    orderBy: ArgumentOrder = {field: CREATED_AT, direction: DESC}

    """The term to filter arguments on the body or the author username."""
    term: String
  ): ArgumentConnection!

  """List of comments"""
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """The ordering direction for the comment creation or updated date"""
    orderBy: CommentOrder = {field: CREATED_AT, direction: DESC}

    """The term to filter comments on the body or the author username."""
    term: String
  ): CommentConnection!

  """List of user types."""
  userTypes: [UserType!]!

  """List of sources"""
  sources(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """The ordering direction for the source creation or updated date"""
    orderBy: SourceOrder = {field: CREATED_AT, direction: DESC}

    """The term to filter sources on the body or the author username."""
    term: String
  ): SourceConnection!

  """Whether or not the viewer is authenticated."""
  isAuthenticated: Boolean!

  """Footer configuration"""
  footer: Footer!

  """Get a node by its slug."""
  nodeSlug(
    """The name of the entity"""
    entity: SluggableEntity!

    """The slug to search for."""
    slug: String!
  ): NodeSlug

  """List of users and participants"""
  contributors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """Filter by term based on given fields."""
    search: ContributorSearchInput

    """Filter by roles."""
    roles: [ContributorsRole]!

    """The ordering direction for the user last login date"""
    orderBy: ContributorOrder
  ): ContributorConnection!
}

input QueryAnalyticsFilter {
  startAt: DateTime!
  endAt: DateTime!
  projectId: ID = null
  topContributorsCount: Int = 4
}

"""All custom forms are build using questions."""
interface Question {
  """The ID of an object."""
  id: ID!

  """Identifies the question title."""
  title: String!

  """Return responses on this questions."""
  responses(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """Get responses with user not confirmed"""
    withNotConfirmedUser: Boolean = false

    """Get responses in which the term appears."""
    term: String

    """Get responses matching given category."""
    iaCategory: String = null

    """Get responses matching given sentiment."""
    iaSentiment: CivicIASentiment = null

    """If true, get only responses starred by viewer."""
    hasViewerStarred: Boolean = false

    """Ordering options for responses."""
    orderBy: ResponsesOrder = {field: CREATED_AT, direction: DESC}
  ): ResponseConnection!
  number: Int!
  type: QuestionTypeValue!

  """The position of the question"""
  position: Int!
  private: Boolean!
  required: Boolean!
  helpText: String
  description: HTML

  """Is the description using Jodit Wysiwyg."""
  descriptionUsingJoditWysiwyg: Boolean!
  kind: String!
  slug: String!

  """Return users who answered the question"""
  participants(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """Get participant with user not confirmed"""
    withNotConfirmedUser: Boolean = false
  ): EventParticipantConnection!

  """The associated logic jumps to this question."""
  jumps(
    """Ordering options for question jumps."""
    orderBy: JumpsOrder = {field: POSITION, direction: ASC}
  ): [LogicJump!]!

  """The jumps of which this question is the destination"""
  destinationJumps: [LogicJump!]!

  """The destination of the always jump (the else case) of this question."""
  alwaysJumpDestinationQuestion: Question

  """Boolean to decide whether the question will be rendered or not"""
  hidden: Boolean!

  """Most used categories of responses, detected by CivicIA."""
  iaCategories(
    """If given, will limit the number of categories returned."""
    limit: Int
  ): [Counter!]!
}

"""A possible choice of a question."""
type QuestionChoice implements Node {
  """The ID of an object"""
  id: ID!

  """Identifies the question choice title."""
  title: String!

  """Identifies the responses of the question choice."""
  responses(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
  ): ResponseConnection!
  description: HTML
  descriptionUsingJoditWysiwyg: Boolean!

  """The color assign with the question"""
  color: Color
  image: Media

  """Return the ranking of the given question choice"""
  ranking: [QuestionChoiceRanking]
}

"""A connection to a list of items."""
type QuestionChoiceConnection {
  totalCount: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [QuestionChoiceEdge]
}

"""An edge in a connection."""
type QuestionChoiceEdge {
  """The item at the end of the edge."""
  node: QuestionChoice

  """A cursor for use in pagination."""
  cursor: String!
}

"""A possible choice of a question"""
input QuestionChoiceInput {
  id: ID
  title: String!
  description: String
  descriptionUsingJoditWysiwyg: Boolean

  """The color assign with the question choice"""
  color: Color
  image: ID

  """Used to reference choice in logic jump."""
  temporaryId: ID
}

"""The choice ranking"""
type QuestionChoiceRanking {
  """Identifies the position of the choice"""
  position: Int!

  """Identifies the responses of the choice."""
  responses(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
  ): ResponseConnection!
}

input QuestionInput {
  """If null, a new question will be created."""
  id: String
  alwaysJumpDestinationQuestion: ID
  title: String!
  type: QuestionTypeValue!
  private: Boolean! = false
  required: Boolean! = false
  helpText: String
  randomQuestionChoices: Boolean
  otherAllowed: Boolean
  validationRule: MultipleChoiceQuestionValidationRuleInput
  choices: [QuestionChoiceInput]
  description: HTML
  descriptionUsingJoditWysiwyg: Boolean
  jumps: [LogicJumpInput]
  hidden: Boolean = false

  """If not null, give the section s depth"""
  level: Int

  """can the viewer add a range (number question only)"""
  isRangeBetween: Boolean

  """The minimal range (number question only)"""
  rangeMin: Int

  """The maximal range (number question only)"""
  rangeMax: Int

  """Does the question have it's responses grouped"""
  groupedResponsesEnabled: Boolean

  """Does the questions have disabled the responses colors"""
  responseColorsDisabled: Boolean

  """Used to reference question in logic jump."""
  temporaryId: ID
}

"""Value of type of question"""
enum QuestionTypeValue {
  text
  textarea
  editor
  radio
  select
  checkbox
  ranking
  medias
  button
  number
  section
  siret
  rna
  majority
}

"""A questionnaire is a series of questions that users can answer."""
type Questionnaire implements Node {
  """Expose Primary Key, do not use it, except for testing purpose."""
  _id: ID!

  """The user that created the resource."""
  creator: User

  """The ID of an object."""
  id: ID!

  """Identifies the questionnaire title."""
  title: String!

  """Whether the user has reply to a questionnaire."""
  userHasReply(
    """The user's login (for example, an email)."""
    login: String!
  ): Boolean!

  """A list of users that have replied to the questionnaire."""
  participants(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
  ): UserConnection!

  """The list of questions of the questionnaire."""
  questions(
    """Filter questions by a given filter."""
    filter: QuestionsFilterType
  ): [Question!]!

  """A list of replies to the questionnaire."""
  replies(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """(ROLE_ADMIN only) Select also unpublished replies."""
    includeUnpublished: Boolean = false

    """(ROLE_ADMIN only) Select also draft replies."""
    includeDraft: Boolean = false
  ): ReplyConnection!
  step: QuestionnaireStep
  anonymousAllowed: Boolean!
  description: HTML

  """Is the description using Jodit Wysiwyg."""
  descriptionUsingJoditWysiwyg: Boolean!
  multipleRepliesAllowed: Boolean!

  """accept answers or not"""
  contribuable: Boolean!
  phoneConfirmationRequired: Boolean!
  viewerReplies(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
  ): ReplyConnection
  acknowledgeReplies: Boolean!

  """The questionnaire type"""
  type: QuestionnaireType!
  notificationsConfiguration: QuestionnaireNotificationConfiguration!

  """List of replies used in contributions admin page"""
  adminReplies(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """Filter replies by a given query"""
    term: String

    """The ordering direction for questionnaires"""
    orderBy: ReplyOrder = {field: CREATED_AT, direction: DESC}

    """Select also published replies."""
    includePublished: Boolean = true

    """Filter by status"""
    filterStatus: [ReplyStatus] = [PUBLISHED, PENDING, NOT_PUBLISHED, DRAFT]
  ): ReplyConnection!

  """Results of survey are private"""
  privateResult: Boolean!
  exportResultsUrl: URI!
  adminUrl: URI!
  isIndexationDone: Boolean!
  createdAt: DateTime
  updatedAt: DateTime

  """The owner of the questionnaire."""
  owner: QuestionnaireOwner
}

input QuestionnaireAbstractQuestionInput {
  question: QuestionInput!
}

"""The affiliation of a user to a questionnaire"""
enum QuestionnaireAffiliation {
  """Questionnaires that are owned by the authenticated user."""
  OWNER
}

"""A connection to a list of items."""
type QuestionnaireConnection {
  totalCount: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [QuestionnaireEdge]
}

"""An edge in a connection."""
type QuestionnaireEdge {
  """The item at the end of the edge."""
  node: Questionnaire!

  """A cursor for use in pagination."""
  cursor: String!
}

"""A questionnaire notifications configuration"""
type QuestionnaireNotificationConfiguration {
  """The email that will be used to send notification"""
  email: Email

  """The email that will be used to send notification"""
  onQuestionnaireReplyCreate: Boolean!

  """Notify when a response is created for this questionnaire"""
  onQuestionnaireReplyUpdate: Boolean!

  """Notify when a response is deleted for this questionnaire"""
  onQuestionnaireReplyDelete: Boolean!
}

"""Ways in which lists of questionnaires can be ordered upon return."""
input QuestionnaireOrder {
  """The field to order questionnaires by."""
  field: QuestionnaireOrderField! = CREATED_AT

  """The ordering direction."""
  direction: OrderDirection! = DESC
}

"""Properties by which questionnaires can be ordered"""
enum QuestionnaireOrderField {
  """
  Allows ordering a list of questionnaires by when they have been updated.
  """
  UPDATED_AT

  """
  Allows ordering a list of questionnaires by when they have been created.
  """
  CREATED_AT
}

"""Represent an owner of a questionnaire."""
interface QuestionnaireOwner {
  """User ID"""
  id: ID!

  """User username"""
  username: String

  """Get all questionnaires that the user owns."""
  questionnaires(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """
    Array of viewer's affiliation options for questionnaires returned from the connection.
                                For example, OWNER will include only questionnaires that the current viewer owns.
                                
    """
    affiliations: [QuestionnaireAffiliation!]

    """the search query"""
    query: String

    """The ordering direction for questionnaires"""
    orderBy: QuestionnaireOrder = {field: CREATED_AT, direction: DESC}

    """Filter by available questionnaires"""
    availableOnly: Boolean

    """Filter by types."""
    types: [QuestionnaireType]
  ): QuestionnaireConnection!
}

"""A step inside a project."""
type QuestionnaireStep implements Node & Step & RequirementStep {
  """The ID of an object"""
  id: ID!

  """The URL to this resource."""
  url: URI!

  """When the time interval begins or ends."""
  timeRange: TimeRange!

  """The title of the step."""
  title: String!

  """Identifies the current state of the step."""
  state: StepState!

  """The kind of the step"""
  kind: String! @deprecated(reason: "Please, use `__typename` instead.")

  """The type of the step"""
  type: String @deprecated(reason: "Please, use `__typename` instead.")

  """Does the step have a end date ?"""
  timeless: Boolean

  """The introduction text of the step."""
  body: HTML

  """Is the body using Jodit Wysiwyg."""
  bodyUsingJoditWysiwyg: Boolean!

  """Is the step enabled or not"""
  enabled: Boolean!

  """The label of the step"""
  label: String!

  """The step's metadescription"""
  metaDescription: String

  """The step's custom code"""
  customCode: String

  """The step's slug"""
  slug: String

  """Events linked to the step"""
  events(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
    orderBy: EventOrder! = {field: START_AT, direction: DESC}

    """If non-null, filters events by comparing the start date with present."""
    isFuture: Boolean
  ): EventConnection!
  project: Project
  exportStepUrl: URI
  exportContributorsUrl: URI
  adminUrl(operationType: StepAdminUrlOperationType): URI!

  """Mediators assigned to this step."""
  mediators(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """Filter mediators by user username."""
    username: String
  ): MediatorConnection

  """Requirements for answering the questionnaire"""
  requirements(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
  ): RequirementConnection!
  allRequirements(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
  ): RequirementConnection!
  footer: String

  """A list of contributor associated with the step."""
  contributors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
  ): UserConnection!

  """A questionnaire associated with the step."""
  questionnaire: Questionnaire

  """Does the questionnaire allow anonymous users to participate ?"""
  isAnonymousParticipationAllowed: Boolean!

  """Does the questionnaire allow to collect anonymous users email ?"""
  collectParticipantsEmail: Boolean!

  """Is the questionnaire footer using Jodit Wysiwyg."""
  footerUsingJoditWysiwyg: Boolean!
}

"""Available questionnaire types."""
enum QuestionnaireType {
  """Draft are allowed."""
  QUESTIONNAIRE

  """Draft are not allowed."""
  VOTING

  """Questionnaire that are used in analysis step."""
  QUESTIONNAIRE_ANALYSIS
}

"""Possible ways to filter a list of questions"""
enum QuestionsFilterType {
  """Filter questions that contains jumps or redirection."""
  JUMPS_ONLY
}

"""A step inside a project."""
type RankingStep implements Node & Step {
  """The ID of an object"""
  id: ID!

  """The URL to this resource."""
  url: URI!

  """When the time interval begins or ends."""
  timeRange: TimeRange!

  """The title of the step."""
  title: String!

  """Identifies the current state of the step."""
  state: StepState!

  """The kind of the step"""
  kind: String! @deprecated(reason: "Please, use `__typename` instead.")

  """The type of the step"""
  type: String @deprecated(reason: "Please, use `__typename` instead.")

  """Does the step have a end date ?"""
  timeless: Boolean

  """The introduction text of the step."""
  body: HTML

  """Is the body using Jodit Wysiwyg."""
  bodyUsingJoditWysiwyg: Boolean!

  """Is the step enabled or not"""
  enabled: Boolean!

  """The label of the step"""
  label: String!

  """The step's metadescription"""
  metaDescription: String

  """The step's custom code"""
  customCode: String

  """The step's slug"""
  slug: String

  """Events linked to the step"""
  events(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
    orderBy: EventOrder! = {field: START_AT, direction: DESC}

    """If non-null, filters events by comparing the start date with present."""
    isFuture: Boolean
  ): EventConnection!
  project: Project
  exportStepUrl: URI
  exportContributorsUrl: URI
  adminUrl(operationType: StepAdminUrlOperationType): URI!

  """Mediators assigned to this step."""
  mediators(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """Filter mediators by user username."""
    username: String
  ): MediatorConnection
  nbOpinionsToDisplay: Int
  nbVersionsToDisplay: Int
}

input RegisterEmailDomainsInput {
  """the domains"""
  domains: [EmailDomainInput!]
  clientMutationId: String
}

type RegisterEmailDomainsPayload {
  """the added domains"""
  domains: [EmailDomain!]
  clientMutationId: String
}

"""Available errors on register mutations."""
enum RegisterErrorCode {
  """The email is already registered"""
  EMAIL_ALREADY_USED

  """The email domain is not authorized"""
  EMAIL_DOMAIN_NOT_AUTHORIZED

  """The captcha is invalid"""
  CAPTCHA_INVALID

  """The register feature is not enabled"""
  REGISTER_FEATURE_NOT_ENABLED

  """The username is blank"""
  USERNAME_BLANK

  """The email is blank"""
  EMAIL_BLANK

  """The password is blank"""
  PASSWORD_BLANK

  """The email is throwable"""
  EMAIL_THROWABLE

  """The form should not contain extra fields"""
  NO_EXTRA_FIELDS

  """
  The rate limit has been reached, please wait a few minutes before retrying.
  """
  RATE_LIMIT_REACHED
}

input RegisterInput {
  """The user email"""
  email: Email!

  """The user username"""
  username: String!

  """The user plainpassword"""
  plainPassword: String!

  """The captcha to validate the registration"""
  captcha: String

  """
  Whether or not the user accept to register to the internal communication newsletter
  """
  consentInternalCommunication: Boolean

  """
  Whether or not the user accept to register to the external communication newsletter
  """
  consentExternalCommunication: Boolean

  """
  When the user is invited, represents the token attached to the registration link
  """
  invitationToken: String

  """The user locale"""
  locale: String

  """List of responses of optionnal questions set by the admin"""
  responses: [ResponseInput]!

  """The user userType"""
  userType: String

  """The user zipcode"""
  zipcode: String
  clientMutationId: String
}

type RegisterPayload {
  """The newly created user"""
  user: User

  """Errors if mutation fails"""
  errorsCode: [RegisterErrorCode]
  clientMutationId: String
}

"""Fetches an object given its ID"""
type RegistrationForm implements Node {
  """The ID of an object"""
  id: ID!

  """Does the bottom text is displayed?"""
  bottomTextDisplayed: Boolean!

  """Does the top text is displayed?"""
  topTextDisplayed: Boolean!

  """The bottom text to display"""
  topText(
    """The locale to translate content (eg: FR_FR)."""
    locale: TranslationLocale
  ): HTML

  """Is the topText using Jodit Wysiwyg."""
  topTextUsingJoditWysiwyg: Boolean!

  """The bottom text to display"""
  bottomText(
    """The locale to translate content (eg: FR_FR)."""
    locale: TranslationLocale
  ): HTML

  """Is the bottomText using Jodit Wysiwyg."""
  bottomTextUsingJoditWysiwyg: Boolean!

  """A whitelist of authorized domains that can register"""
  domains: [EmailDomain!]

  """The available questions"""
  questions: [Question!]!
  isIndexationDone: Boolean!
  translations: [RegistrationFormTranslation!]!
}

input RegistrationFormCommunicationInput {
  """The locale of the translation"""
  locale: String!

  """The bottom text to display"""
  topText: HTML

  """The bottom text to display"""
  bottomText: HTML
}

"""translation of the registration form"""
type RegistrationFormTranslation {
  """The locale of the translation"""
  locale: String!

  """The bottom text to display"""
  topText: String

  """The bottom text to display"""
  bottomText: String
}

input RelaunchUserInvitationsInput {
  """emails of existing invitations to relaunch."""
  emails: [String!]!
  clientMutationId: String
}

type RelaunchUserInvitationsPayload {
  """The relaunched invitations edge"""
  relaunchedInvitations: [UserInviteEdge!]!
  clientMutationId: String
}

"""Sms remaining credits"""
type RemainingSmsCredit {
  """The remaining amount."""
  amount: Int!

  """The status based on the remaining amount"""
  status: RemainingSmsCreditStatus!
}

"""Available status for RemainingSmsCredit"""
enum RemainingSmsCreditStatus {
  """The remaining amount is over 25% of its last refill."""
  IDLE

  """The remaining amount is between 25% and 10% of its last refill."""
  LOW

  """The remaining amount is below 10% of its last refill."""
  VERY_LOW

  """The remaining amount is equal or below 0% of its last refill"""
  TOTAL
}

"""Remaining time in days/hours"""
type RemainingTime {
  """Number of days remaining"""
  days: Int

  """Number of hours remaining"""
  hours: Int
}

input RemoveArgumentVoteInput {
  """The Node ID of the argument to unvote."""
  argumentId: ID!
  clientMutationId: String
}

type RemoveArgumentVotePayload {
  deletedVoteId: ID
  contribution: Argument
  viewer: User!
  clientMutationId: String
}

input RemoveCommentVoteInput {
  """The Node ID of the comment to unvote."""
  commentId: ID!
  clientMutationId: String
}

type RemoveCommentVotePayload {
  deletedVoteId: ID
  contribution: Comment
  viewer: User!
  clientMutationId: String
}

input RemoveContactFormInput {
  """ID of the contact form to delete."""
  id: ID!
  clientMutationId: String
}

type RemoveContactFormPayload {
  """Id of the deleted contact form."""
  deletedContactFormId: ID!
  clientMutationId: String
}

"""Available errors for a `removeDebateAnonymousVote` mutation."""
enum RemoveDebateAnonymousVoteErrorCode {
  """No `Debate` match your id."""
  UNKNOWN_DEBATE

  """The debate is closed and removing a vote cannot be done."""
  CLOSED_DEBATE

  """The given hash is not valid."""
  INVALID_HASH

  """The user has not voted."""
  NOT_VOTED
}

input RemoveDebateAnonymousVoteInput {
  """The Node ID of the `Debate` to remove the vote on."""
  debateId: ID!

  """The cookie hash needed to remove the anonymous debate vote."""
  hash: String!

  """
  The cookie hash needed to remove the anonymous debate argument, if any.
  """
  argumentHash: String
  clientMutationId: String
}

type RemoveDebateAnonymousVotePayload {
  """The debate that had the anonymous vote."""
  debate: Debate

  """The id of the vote that has just been removed."""
  deletedDebateAnonymousVoteId: ID

  """The id of the argument removed, if any."""
  deletedDebateAnonymousArgumentId: ID

  """An unsuccessful mutation will return an error."""
  errorCode: RemoveDebateAnonymousVoteErrorCode
  clientMutationId: String
}

"""Available errors for a `removeDebateArgumentVote` mutation."""
enum RemoveDebateArgumentVoteErrorCode {
  """No `DebateArgument` match your id."""
  UNKNOWN_DEBATE_ARGUMENT

  """The debate is closed and arguments cannot be voted for."""
  CLOSED_DEBATE

  """Viewer has not already voted this argument."""
  NOT_VOTED
}

input RemoveDebateArgumentVoteInput {
  """The id of the `DebateArgument` to remove the vote."""
  debateArgumentId: ID!
  clientMutationId: String
}

type RemoveDebateArgumentVotePayload {
  """The argument that had just been upvoted."""
  debateArgument: AbstractDebateArgument

  """The id of the vote just removed."""
  deletedDebateArgumentVoteId: ID

  """An unsuccessful mutation will return an error."""
  errorCode: RemoveDebateArgumentVoteErrorCode
  clientMutationId: String
}

"""Available errors for a `removeDebateVote` mutation."""
enum RemoveDebateVoteErrorCode {
  """No `Debate` match your `debateId`."""
  UNKNOWN_DEBATE

  """No `DebateVote` match your `debateId`."""
  NO_VOTE_FOUND

  """The `Debate` is closed"""
  CLOSED_DEBATE
}

input RemoveDebateVoteInput {
  """The Node ID of the `Debate` to remove the vote."""
  debateId: ID!
  clientMutationId: String
}

type RemoveDebateVotePayload {
  """The debate of the deleted vote."""
  debate: Debate

  """The id of the removed vote."""
  deletedVoteId: ID

  """The id of the removed argument."""
  deletedArgumentId: ID

  """An unsuccessful mutation will return an error."""
  errorCode: RemoveDebateVoteErrorCode
  clientMutationId: String
}

input RemoveOpinionVoteInput {
  """The Node ID of the opinion to unvote."""
  opinionId: ID!
  clientMutationId: String
}

type RemoveOpinionVotePayload {
  deletedVoteId: ID
  contribution: Contribution
  viewer: User!
  clientMutationId: String
}

"""Available errors for an `removeProposalSmsVoteMutation` mutation."""
enum RemoveProposalSmsVoteErrorCode {
  """The given token does not match any phone."""
  PHONE_NOT_FOUND
}

input RemoveProposalSmsVoteInput {
  """The Node ID of the proposal to unvote."""
  proposalId: ID!

  """The Node ID of the contribuable step."""
  stepId: ID!

  """The token to authenticate the user."""
  token: String!
  clientMutationId: String
}

type RemoveProposalSmsVotePayload {
  step: ProposalStep
  proposal: Proposal
  previousVoteId: ID
  errorCode: RemoveProposalSmsVoteErrorCode
  clientMutationId: String
}

input RemoveProposalVoteInput {
  """The Node ID of the proposal to unvote."""
  proposalId: ID!

  """The Node ID of the contribuable step."""
  stepId: ID!
  clientMutationId: String
}

type RemoveProposalVotePayload {
  step: ProposalStep!
  proposal: Proposal!
  viewer: User!
  previousVoteId: ID
  areRemainingVotesAccounted: Boolean!
  clientMutationId: String
}

"""Available errors on step assignment of proposals"""
enum RemoveProposalsFromStepsErrorCode {
  """No proposal match your id or it does not fit the selected status"""
  NO_VALID_PROPOSAL

  """No step match your id or it does not fit the selected proposals"""
  NO_VALID_STEP
}

input RemoveProposalsFromStepsInput {
  """The ids of the proposals to remove from steps"""
  proposalIds: [ID!]!

  """The ids of the steps to which proposals should be removed"""
  stepIds: [ID!]!
  clientMutationId: String
}

type RemoveProposalsFromStepsPayload {
  """Connection of assigned proposals"""
  proposals: ProposalConnection

  """An unsuccessful mutation will return an error message"""
  error: RemoveProposalsFromStepsErrorCode

  """The steps from which proposals have been removed."""
  steps: [Step!]!
  clientMutationId: String
}

input RemoveSiteFaviconInput {
  clientMutationId: String
}

type RemoveSiteFaviconPayload {
  """The newly updated site image favicon"""
  siteFavicon: SiteImage!
  clientMutationId: String
}

input RemoveSourceVoteInput {
  """The Node ID of the source to unvote."""
  sourceId: ID!
  clientMutationId: String
}

type RemoveSourceVotePayload {
  deletedVoteId: ID
  contribution: Source
  viewer: User!
  clientMutationId: String
}

input RemoveSsoInput {
  """The password to set."""
  plainPassword: String

  """The service to dissociate."""
  service: AvailableSso!
  clientMutationId: String
}

type RemoveSsoPayload {
  viewer: User!

  """The redirect URI to disconnect the sso"""
  redirectUrl: URI
  clientMutationId: String
}

"""Represents an answer to a questionnaire."""
interface Reply {
  """The ID of an object"""
  id: ID!

  """
  Return the related contribution if the contribution is related to another.
  """
  related: Contribution

  """The url of the reply."""
  url: URI!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!

  """Whether or not the entity is published."""
  published: Boolean!

  """Identifies when the entity can no more be published."""
  publishableUntil: DateTime

  """Identifies when the entity was published at."""
  publishedAt: DateTime

  """Reason that the entity is not published."""
  notPublishedReason: NotPublishedReason

  """The responses of the reply."""
  responses: [Response]!

  """Identifies the form where the contribution was submitted."""
  questionnaire: Questionnaire!

  """The admin url of the reply."""
  adminUrl: URI

  """The status of the reply."""
  status: ReplyStatus
}

"""A connection to a list of items."""
type ReplyConnection {
  """Identifies the total count of items in the connection."""
  totalCount: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [ReplyEdge]
}

"""An edge in a connection."""
type ReplyEdge {
  """The item at the end of the edge."""
  node: Reply!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Ways in which lists of replies can be ordered upon return."""
input ReplyOrder {
  """The field to order reply by."""
  field: ReplyOrderField! = CREATED_AT

  """The ordering direction."""
  direction: OrderDirection! = DESC
}

"""Properties by which replies can be ordered"""
enum ReplyOrderField {
  """Allows ordering a list of replies by when they have been updated."""
  UPDATED_AT

  """Allows ordering a list of replies by when they have been created."""
  CREATED_AT
}

"""Available statuses"""
enum ReplyPublicationStatus {
  """Publicly visible"""
  PUBLISHED

  """Draft, not publicly visible, only showed for his author."""
  DRAFT
}

"""Available status for a reply"""
enum ReplyStatus {
  """The reply is published."""
  PUBLISHED

  """
  The author confirmed his account too late or the step is already closed
  """
  NOT_PUBLISHED

  """The reply is in draft."""
  DRAFT

  """The author has not confirmed his account yet."""
  PENDING
}

"""A connection to a list of items."""
type ReportConnection {
  totalCount: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [ReportEdge]
}

"""An edge in a connection."""
type ReportEdge {
  """The item at the end of the edge."""
  node: Reporting!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Available errors on report mutations."""
enum ReportErrorCode {
  """The entity does not exist or is not reportable."""
  REPORTABLE_NOT_FOUND

  """The viewer has already reported this content."""
  ALREADY_REPORTED
}

input ReportInput {
  """The id of the entity to be reported."""
  reportableId: ID!

  """The content of the report"""
  body: String!

  """Kind of report."""
  type: ReportingType!
  clientMutationId: String
}

type ReportPayload {
  """The reporting just created."""
  report: Reporting

  """Contains the error code if one occurred."""
  errorCode: ReportErrorCode
  clientMutationId: String
}

"""A reportable"""
interface Reportable {
  """Does the viewer already submitted a report ?"""
  viewerHasReport: Boolean!

  """The reportings related to the reportable."""
  reportings(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
    orderBy: ReportingOrder = {field: CREATED_AT, direction: DESC}
  ): ReportingConnection!

  """Check if a user can report"""
  viewerCanReport: Boolean!
}

"""A report"""
type Reporting implements Contribution & ContributionWithAuthor {
  """The author of the contribution."""
  author: User!

  """The ID of an object"""
  id: ID!

  """
  Return the related contribution if the contribution is related to another.
  """
  related: Contribution

  """Url of the contribution"""
  url: URI!

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!

  """The escaped content of the argument."""
  bodyText: String!

  """Kind of report."""
  type: ReportingType!

  """The content of the argument."""
  body: String!
  kind: String!
}

"""A connection to a list of items."""
type ReportingConnection {
  """Identifies the total count of items in the connection."""
  totalCount: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [ReportingEdge]
}

"""An edge in a connection."""
type ReportingEdge {
  """The item at the end of the edge."""
  node: Reporting!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Ways in which lists of reportings can be ordered upon return."""
input ReportingOrder {
  field: ReportingOrderField! = CREATED_AT
  direction: OrderDirection! = DESC
}

"""Properties by which report connections can be ordered"""
enum ReportingOrderField {
  """Allows ordering a list of reports by when they were created."""
  CREATED_AT
}

"""Type of reporting"""
enum ReportingType {
  """The associated contribution has been flagged as sexual content"""
  SEX

  """The associated contribution has been flagged as offending content"""
  OFF

  """The associated contribution has been flagged as spam"""
  SPAM

  """The associated contribution has been flagged as erroneous"""
  ERROR

  """The associated contribution has been flagged as off topic"""
  OFF_TOPIC
}

input RequestUserArchiveInput {
  clientMutationId: String
}

type RequestUserArchivePayload {
  viewer: User!
  clientMutationId: String
}

"""A requirement"""
interface Requirement {
  """The ID of an object"""
  id: ID!

  """Does the viewer meets the requirement ?"""
  viewerMeetsTheRequirement: Boolean!

  """Does the participant meets the requirement ?"""
  participantMeetsTheRequirement(
    """The token associated to the Participant."""
    token: String!
  ): Boolean!

  """The requirement type sent to the api."""
  type: RequirementType!
}

"""A connection to a list of items."""
type RequirementConnection {
  """Identifies the total count of items in the connection."""
  totalCount: Int!

  """Does the viewer meets all the requirements ?"""
  viewerMeetsTheRequirements: Boolean!

  """Does the participant meets all the requirements ?"""
  participantMeetsTheRequirements(
    """The token associated to the Participant."""
    token: String!
  ): Boolean!

  """The reason for requirements."""
  reason: String

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [RequirementEdge]
}

"""An edge in a connection."""
type RequirementEdge {
  """The item at the end of the edge."""
  node: Requirement!

  """A cursor for use in pagination."""
  cursor: String!
}

interface RequirementStep {
  """The requirements to vote on this step."""
  requirements(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
  ): RequirementConnection!
  allRequirements(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
  ): RequirementConnection!
}

"""Possible values for a requirement"""
enum RequirementType {
  """The requirement is a checkbox"""
  CHECKBOX

  """The requirement is a firstname"""
  FIRSTNAME

  """The requirement is a lastname"""
  LASTNAME

  """The requirement is a phone number"""
  PHONE

  """The requirement is a date of birth"""
  DATE_OF_BIRTH

  """The requirement is a postal address"""
  POSTAL_ADDRESS

  """The requirement is an identification code"""
  IDENTIFICATION_CODE

  """The requirement is an verified phone number"""
  PHONE_VERIFIED

  """The requirement is authentication to France Connect"""
  FRANCE_CONNECT
}

"""Available errors on resendEmailConfirmationMutation"""
enum ResendEmailConfirmationErrorCode {
  """The email is already confirmed"""
  EMAIL_ALREADY_CONFIRMED

  """The email has already been sent recently"""
  EMAIL_RECENTLY_SENT
}

type ResendEmailConfirmationPayload {
  """An unsuccessful mutation will return an error."""
  errorCode: ResendEmailConfirmationErrorCode
  clientMutationId: String
}

input ResetPasswordInput {
  """The token needed to identify the user"""
  token: String!

  """The new password"""
  password: String!
  clientMutationId: String
}

type ResetPasswordPayload {
  """The modified user"""
  user: User

  """In case of error a message is given here"""
  error: String
  clientMutationId: String
}

"""A response to a question."""
interface Response {
  """Nullable ID in case of empty response."""
  id: ID!

  """Identifies the question of the response."""
  question: Question!

  """Identifies the reply of the response."""
  reply: Reply

  """True if the viewer has starred the response."""
  hasViewerStarred: Boolean!
}

"""A connection to a list of items."""
type ResponseConnection {
  """Identifies the total count of items in the connection."""
  totalCount: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [ResponseEdge]
}

"""An edge in a connection."""
type ResponseEdge {
  """The item at the end of the edge."""
  node: Response!

  """A cursor for use in pagination."""
  cursor: String!
}

"""A response"""
input ResponseInput {
  """If related to a value question"""
  value: JSON

  """The question id"""
  question: String!

  """If related to a media question"""
  medias: [ID!]
}

"""Ways in which a responses can be ordered."""
input ResponsesOrder {
  """The field in which to order responses by."""
  field: ResponsesOrderField

  """The direction in which to order responses."""
  direction: OrderDirection
}

"""Properties by which responses can be ordered"""
enum ResponsesOrderField {
  """Allows ordering a list of responses by its creation date."""
  CREATED_AT

  """Allows ordering a list of responses by its readability score."""
  READABILITY

  """Allows ordering a list of responses by its category."""
  CATEGORY
}

input ReviewEventInput {
  """The ID of the Event to review."""
  id: ID!

  """The details of reason why the review is refused"""
  comment: String

  """Kind of review is refused."""
  refusedReason: EventRefusedReason

  """The status of review."""
  status: EventReviewStatus!
  clientMutationId: String
}

type ReviewEventPayload {
  """The event reviewed."""
  event: Event

  """An unsuccessful mutation will return one or more `UserError` objects."""
  userErrors: [UserError!]!
  clientMutationId: String
}

input RevokeAnalystsToProposalsInput {
  """Revoke analyst list to a list of proposals."""
  proposalIds: [ID!]!

  """The concerned list of analysts"""
  analystIds: [ID!]!
  clientMutationId: String
}

type RevokeAnalystsToProposalsPayload {
  """Connection of revoked proposals"""
  proposals: ProposalConnection

  """Contains the error code if one occurred."""
  errorCode: ProposalAssignmentErrorCode
  viewer: User!
  clientMutationId: String
}

"""A SSO Configuration"""
interface SSOConfiguration {
  """The ID of an object"""
  id: ID!

  """The name of configured SSO."""
  name: String!

  """Does this configuration is enabled?"""
  enabled: Boolean!

  """Profile URL on the SSO side."""
  profileUrl: URI

  """Whether or not disconnect sso on logout."""
  disconnectSsoOnLogout: Boolean!
}

"""A connection to a list of items."""
type SSOConfigurationConnection {
  totalCount: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [SSOConfigurationEdge]
}

"""An edge in a connection."""
type SSOConfigurationEdge {
  """The item at the end of the edge."""
  node: SSOConfiguration

  """A cursor for use in pagination."""
  cursor: String!
}

"""Possible environments for a SSO Configuration."""
enum SSOEnvironment {
  """Unset mode."""
  NONE

  """Integration mode for resource owner validation."""
  TESTING

  """Production mode."""
  PRODUCTION
}

"""Possible SSO Type"""
enum SSOType {
  """France Connect type."""
  FRANCE_CONNECT

  """Oauth2 type."""
  OAUTH2

  """Facebook type."""
  FACEBOOK

  """Saml type."""
  SAML

  """CAS type."""
  CAS
}

"""Available errors for an `SaveImapConfig` mutation."""
enum SaveImapConfigErrorCode {
  """The targetted folder was not found."""
  FOLDER_NOT_FOUND

  """Connection to imap server failed."""
  CONNECTION_TO_SERVER_FAILED

  """
  Connection to imap server is successful but email or password is incorrect
  """
  AUTHENTICATION_FAILED

  """The given email is already used in another step."""
  EMAIL_ALREADY_USED
}

input SaveImapConfigInput {
  """The imap config id if existing."""
  id: ID

  """The step id."""
  stepId: ID!

  """The imap server url to connect to."""
  serverUrl: String!

  """Which email folder to retreive the emails."""
  folder: String!

  """The email to authenticate to the mailbox."""
  email: String!

  """The password to authenticate to the mailbox."""
  password: String!
  clientMutationId: String
}

type SaveImapConfigPayload {
  errorCode: SaveImapConfigErrorCode
  imapConfig: ImapConfig
  clientMutationId: String
}

"""A section"""
type Section implements Node & UniformResourceLocatable {
  """The URL to this resource."""
  url: URI!

  """The id of the section."""
  id: ID!

  """Get the associated consultation of this section"""
  consultation: Consultation

  """The slug of the section."""
  slug: String!

  """The title of the section."""
  title: String!

  """The color of the section."""
  color: String!

  """The subtitle of the section."""
  subtitle: String

  """The description of the section."""
  description: HTML
  contributionsCount: Int!
  contributionConnection(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """Ordering options for contributions returned from the connection."""
    orderBy: ContributionOrder

    """The connection will return the trashed results too."""
    trashed: Boolean = false

    """The connection will return the results where consultation.step = step"""
    step: ID
  ): ContributionConnection!

  """Array of appendix types (possibly empty)."""
  appendixTypes: [SectionAppendixType]

  """Array of subsections (possibly empty)."""
  sections: [Section]
  voteWidgetType: Int!
  commentSystem: Int!
  contribuable: Boolean!
  versionable: Boolean!
  sourceable: Boolean!
  linkable: Boolean!
  votesHelpText: String
  votesThreshold: Int
  votesThresholdHelpText: String
  defaultOrderBy: SectionOrderBy
  opinions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """Filter by author of opinion."""
    author: ID

    """Ordering options for followers returning from the connection"""
    orderBy: OpinionOrder = {field: PUBLISHED_AT, direction: DESC}

    """Include trashed opinion or not"""
    includeTrashed: Boolean = false
  ): OpinionConnection!

  """The section position within the consultation."""
  position: Int!
}

"""A section"""
type SectionAppendixType {
  id: String
  position: Int!
  title: String
  helpText: String
}

"""Element carrousel page in admin"""
type SectionCarrouselElement implements Node {
  """The ID of an object."""
  id: ID!

  """The position of the carrousel element."""
  position: Int!

  """The type of the carrousel element."""
  type: CarrouselElementType!

  """The main heading or title displayed on the carrousel element."""
  title: String!

  """
  A detailed description providing context or information about the carrousel element.
  """
  description: String

  """
  The URL to which users are redirected when interacting with the carrousel element.
  """
  redirectLink: URI!

  """The image displayed on the carrousel element."""
  image: Media

  """
  The text label displayed on the action button of the carrousel element.
  """
  buttonLabel: String!

  """
  A toggle indicating whether the carrousel element is visible to users.
  """
  isDisplayed: Boolean!

  """Additional data associated with the carrousel element."""
  extraData: ExtraData
}

"""A connection to a list of items."""
type SectionCarrouselElementConnection {
  totalCount: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [SectionCarrouselElementEdge]
}

"""An edge in a connection."""
type SectionCarrouselElementEdge {
  """The item at the end of the edge."""
  node: SectionCarrouselElement

  """A cursor for use in pagination."""
  cursor: String!
}

enum SectionOrderBy {
  positions
  random
  last
  old
  favorable
  votes
  comments
}

"""A section is just a title in a quiz without any possible answer."""
type SectionQuestion implements Question & Node {
  """The ID of an object."""
  id: ID!

  """Identifies the question title."""
  title: String!

  """Return responses on this questions."""
  responses(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """Get responses with user not confirmed"""
    withNotConfirmedUser: Boolean = false

    """Get responses in which the term appears."""
    term: String

    """Get responses matching given category."""
    iaCategory: String = null

    """Get responses matching given sentiment."""
    iaSentiment: CivicIASentiment = null

    """If true, get only responses starred by viewer."""
    hasViewerStarred: Boolean = false

    """Ordering options for responses."""
    orderBy: ResponsesOrder = {field: CREATED_AT, direction: DESC}
  ): ResponseConnection!
  number: Int!
  type: QuestionTypeValue!

  """The position of the question"""
  position: Int!
  private: Boolean!
  required: Boolean!
  helpText: String
  description: HTML

  """Is the description using Jodit Wysiwyg."""
  descriptionUsingJoditWysiwyg: Boolean!
  kind: String!
  slug: String!

  """Return users who answered the question"""
  participants(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """Get participant with user not confirmed"""
    withNotConfirmedUser: Boolean = false
  ): EventParticipantConnection!

  """The associated logic jumps to this question."""
  jumps(
    """Ordering options for question jumps."""
    orderBy: JumpsOrder = {field: POSITION, direction: ASC}
  ): [LogicJump!]!

  """The jumps of which this question is the destination"""
  destinationJumps: [LogicJump!]!

  """The destination of the always jump (the else case) of this question."""
  alwaysJumpDestinationQuestion: Question

  """Boolean to decide whether the question will be rendered or not"""
  hidden: Boolean!

  """Most used categories of responses, detected by CivicIA."""
  iaCategories(
    """If given, will limit the number of categories returned."""
    limit: Int
  ): [Counter!]!

  """If not null, give the section s depth"""
  level: Int
}

input SelectProposalInput {
  """The step where the proposal is selected"""
  stepId: String!

  """The proposal ID to select."""
  proposalId: ID!

  """The selection status."""
  statusId: String
  clientMutationId: String
}

type SelectProposalPayload {
  proposal: Proposal!
  clientMutationId: String
}

"""Possible errors on selectSenderDomain mutation."""
enum SelectSenderEmailErrorCode {
  """No `SenderEmail` matching your id."""
  UNKNOWN_SENDER_EMAIL
}

input SelectSenderEmailInput {
  """The SenderEmail to be selected."""
  senderEmail: ID!
  clientMutationId: String
}

type SelectSenderEmailPayload {
  """The selected SenderEmail."""
  senderEmail: SenderEmail

  """The error generated, if any."""
  errorCode: SelectSenderEmailErrorCode
  clientMutationId: String
}

"""A budget contribution"""
type SelectionStep implements Node & Step & ProposalStep & RequirementStep {
  """The requirements to vote on this step."""
  requirements(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
  ): RequirementConnection!
  allRequirements(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
  ): RequirementConnection!

  """The ID of an object"""
  id: ID!

  """The URL to this resource."""
  url: URI!

  """When the time interval begins or ends."""
  timeRange: TimeRange!

  """The title of the step."""
  title: String!

  """Identifies the current state of the step."""
  state: StepState!

  """The kind of the step"""
  kind: String! @deprecated(reason: "Please, use `__typename` instead.")

  """The type of the step"""
  type: String @deprecated(reason: "Please, use `__typename` instead.")

  """Does the step have a end date ?"""
  timeless: Boolean

  """The introduction text of the step."""
  body: HTML

  """Is the body using Jodit Wysiwyg."""
  bodyUsingJoditWysiwyg: Boolean!

  """Is the step enabled or not"""
  enabled: Boolean!

  """The label of the step"""
  label: String!

  """The step's metadescription"""
  metaDescription: String

  """The step's custom code"""
  customCode: String

  """The step's slug"""
  slug: String

  """Events linked to the step"""
  events(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
    orderBy: EventOrder! = {field: START_AT, direction: DESC}

    """If non-null, filters events by comparing the start date with present."""
    isFuture: Boolean
  ): EventConnection!
  project: Project
  exportStepUrl: URI
  exportContributorsUrl: URI
  adminUrl(operationType: StepAdminUrlOperationType): URI!

  """Mediators assigned to this step."""
  mediators(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """Filter mediators by user username."""
    username: String
  ): MediatorConnection

  """A list of proposals associated to the object."""
  proposals(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """
    If non-null, filters proposals with the given trashed status (eg: visible, not visible).
    """
    trashedStatus: ProposalTrashedStatus = NOT_TRASHED

    """
    ID of a User to filter by. If non-null, only proposals authored by this user will be returned.
    """
    author: ID

    """Ordering options for proposals returned from the connection."""
    orderBy: [ProposalOrder] = [{field: PUBLISHED_AT, direction: ASC}]

    """(ROLE_ADMIN only) Select also draft proposals."""
    includeDraft: Boolean = false

    """
    The state of the proposals to filter by. If non-null, filters proposals with the given state.
    """
    state: ProposalsState

    """
    ID of a ProposalDistrict to filter by. If non-null, filters proposals with the given district.
    """
    district: ID

    """
    ID of a UserType to filter by. If non-null, filters proposals with the given type of author.
    """
    userType: ID

    """
    ID of a ProposalCategory to filter by. If non-null, filters proposals with the given category.
    """
    category: ID

    """
    ID of a ProposalStatus to filter by. If non-null, filters proposals with the given status.
    """
    status: ID

    """
    ID of a Theme to filter by. If non-null, filters proposals with the given theme.
    """
    theme: ID

    """If non-null, filters proposals with the given string to look for."""
    term: String
    reference: String

    """Affiliation options for proposals returned from the connection."""
    affiliations: [ProposalAffiliation]

    """(ROLE_SUPER_ADMIN only) Select also unpublished proposals."""
    includeUnpublished: Boolean = false

    """The global progress status of the proposal."""
    progressStatus: ProposalProgressState

    """The analysts's ids assigned to the proposal"""
    analysts: [ID!]

    """The supervisor's id assigned to the proposal"""
    supervisor: ID

    """The decision-maker's id assigned to the proposal"""
    decisionMaker: ID
    excludeViewerVotes: Boolean = false

    """Filter proposals by a given geo bounding box"""
    geoBoundingBox: GeoBoundingBox
  ): ProposalConnection!

  """The viewer unpublished proposals (only visible by viewer)."""
  viewerProposalsUnpublished(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
  ): ProposalConnection

  """
  If votesRanking enabled, votesLimit is the reference value for the points scale.
  """
  votesLimit: Int

  """
  Minimum number of votes a user must submit for his votes to be counted.
  """
  votesMin: Int
  budget: Int
  voteType: ProposalStepVoteType!
  votable: Boolean!
  votesHelpText: String
  voteThreshold: Int
  statuses: [ProposalStepStatus!]!
  defaultSort: String
  open: Boolean!

  """If enabled, allow voters to order their votes by point"""
  votesRanking: Boolean!

  """A list of viewer votes associated with the step."""
  viewerVotes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """Order votes."""
    orderBy: ProposalVoteOrder = {direction: DESC}

    """If anonymous user the token used to vote."""
    token: String
  ): ProposalVoteConnection!
  form: ProposalForm

  """Whether or not secret ballot is enable"""
  isSecretBallot: Boolean!

  """If not null, the date to display vote count"""
  publishedVoteDate: DateTime

  """Whether or not can display vote counters and points"""
  canDisplayBallot: Boolean!

  """Whether or not sms vote are enabled."""
  isProposalSmsVoteEnabled: Boolean

  """
  Determines how long it will take for the proposal to be archived, coupled with proposalArchivedUnitTime.
  """
  proposalArchivedTime: Int!

  """
  The unit chosen to set the archived duration can be either MONTHS or DAYS
  """
  proposalArchivedUnitTime: ProposalArchivedUnitTime!
  position: Int!

  """
  Only one selection step inside a project can have realisation steps, true if this one
  """
  allowingProgressSteps: Boolean!

  """
  Whether or not authors can add news on proposals selected in this step
  """
  allowAuthorsToAddNews: Boolean!

  """A list of contributor associated with the consultation."""
  contributors(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
  ): ContributorConnection!

  """The main view : GRID, LIST or MAP"""
  mainView: MainView!
  defaultStatus: ProposalStepStatus

  """Either vote, analysis or result step."""
  subType: SelectionStepSubTypes
}

"""Available sub types for selection step."""
enum SelectionStepSubTypes {
  """The step is a vote step."""
  VOTE

  """The step is an analysis step."""
  ANALYSIS

  """The step is a result step."""
  RESULT
}

"""
Available errors for an `sendConfirmationEmailDebateAnonymousArgument` mutation.
"""
enum SendConfirmationEmailDebateAnonymousArgumentErrorCode {
  """No `Debate` match your `id`."""
  UNKNOWN_DEBATE

  """The debate is closed and arguments cannot be published any more."""
  CLOSED_DEBATE

  """The given hash is not valid."""
  INVALID_HASH

  """The user has no argument on this debate."""
  UNKNOWN_DEBATE_ARGUMENT

  """The argument has already been published."""
  ALREADY_PUBLISHED_ARGUMENT
}

input SendConfirmationEmailDebateAnonymousArgumentInput {
  """The Node ID of the `Debate` to where the argument is."""
  debate: ID!

  """The cookie hash needed to identify anonymous argument."""
  hash: String!
  clientMutationId: String
}

type SendConfirmationEmailDebateAnonymousArgumentPayload {
  """The argument to be confirmed."""
  debateArgument: DebateAnonymousArgument

  """An unsuccessful mutation will return an error."""
  errorCode: SendConfirmationEmailDebateAnonymousArgumentErrorCode
  clientMutationId: String
}

input SendContactFormInput {
  """The ID of the contact form."""
  idContactForm: ID!

  """The title of the contact form."""
  title: String!

  """The body of the contact form."""
  body: String!

  """The email of the contact."""
  email: String!

  """The captcha of the form."""
  name: String

  """The captcha verification."""
  captcha: String
  clientMutationId: String
}

type SendContactFormPayload {
  """The contact form submited."""
  contactForm: ContactForm!
  clientMutationId: String
}

"""Available errors when sending or testing a campaign"""
enum SendEmailingCampaignErrorCode {
  """No campaign match your id"""
  ID_NOT_FOUND

  """
  The campaign cannot be sent : maybe it is not a draft, maybe it is not complete
  """
  CANNOT_BE_SENT
}

input SendEmailingCampaignInput {
  """Global id of the campaign to send"""
  id: ID!
  clientMutationId: String
}

type SendEmailingCampaignPayload {
  """The campaign sent"""
  emailingCampaign: EmailingCampaign

  """The error code, if any"""
  error: SendEmailingCampaignErrorCode
  clientMutationId: String
}

"""Available errors for an `sendSmsPhoneValidationCode` mutation."""
enum SendSmsPhoneValidationCodeErrorCode {
  """The given number is invalid"""
  INVALID_NUMBER

  """The user reached the retry limit of 2 within a minute"""
  RETRY_LIMIT_REACHED

  """The user has already confirmed his phone number"""
  PHONE_ALREADY_CONFIRMED

  """The user is unauthorized"""
  UNAUTHORIZED

  """The rate limit for requests has been exceeded"""
  RATE_LIMIT_EXCEEDED

  """A server error occurred while processing the request"""
  SERVER_ERROR

  """An unknown error occurred"""
  UNKNOWN_ERROR

  """The requested resource was not found"""
  NOT_FOUND

  """The provided code is not valid"""
  NOT_VALID_CODE

  """An error occured while calling twilio api"""
  TWILIO_API_ERROR
}

input SendSmsPhoneValidationCodeInput {
  clientMutationId: String
}

type SendSmsPhoneValidationCodePayload {
  """The error code, if failing."""
  errorCode: SendSmsPhoneValidationCodeErrorCode
  clientMutationId: String
}

"""Available errors for an `sendSmsProposalVote` mutation."""
enum SendSmsProposalVoteErrorCode {
  """The given number is invalid."""
  INVALID_NUMBER

  """An error occured while calling twilio api."""
  TWILIO_API_ERROR

  """Given phone number should be a mobile number."""
  PHONE_SHOULD_BE_MOBILE_NUMBER

  """Given phone number has incorrect length."""
  PHONE_INVALID_LENGTH

  """Given phone number is already used by another user."""
  PHONE_ALREADY_USED_BY_ANOTHER_USER

  """The user reached the retry limit."""
  RETRY_LIMIT_REACHED
}

input SendSmsProposalVoteInput {
  """The phone number to send the sms."""
  phone: String!

  """The step global id."""
  stepId: ID!

  """The proposal global id."""
  proposalId: ID!
  clientMutationId: String
}

type SendSmsProposalVotePayload {
  """The error code, if failing."""
  errorCode: SendSmsProposalVoteErrorCode
  clientMutationId: String
}

"""Represent an email address to use to send emails."""
type SenderEmail {
  """uuid of the SenderEmail"""
  id: ID!

  """The first part of the address, before the @."""
  locale: String!

  """The second part of the address, after the @."""
  domain: String!

  """The whole address."""
  address: String!

  """Is the address selected to send."""
  isDefault: Boolean!
}

"""Represent a registered domain name for a mailer service"""
type SenderEmailDomain {
  """Uuid of the domain."""
  id: ID!

  """The domain, eg cap-collectif.com."""
  value: String!

  """The service to use : mailjet or mandrill."""
  service: SenderEmailDomainService!

  """Is the SPF validated."""
  spfValidation: Boolean!

  """Is the DKIM validated."""
  dkimValidation: Boolean!

  """The key to configure authentication by TXT."""
  txtKey: String

  """The value to configure authentication by TXT."""
  txtValue: String

  """True if service confirms domain authentication by TXT."""
  txtValidation: Boolean!
}

"""Possible types for SenderEmailDomain."""
enum SenderEmailDomainService {
  """Choice of the external mailer client : mandrill or mailjet."""
  MANDRILL

  """Choice of the external mailer client : mandrill or mailjet."""
  MAILJET
}

input SetDefaultLocaleInput {
  """Locale uuid."""
  id: ID!
  clientMutationId: String
}

type SetDefaultLocalePayload {
  """The new default Locale"""
  locale: Locale
  clientMutationId: String
}

input SetEvaluationFormInProposalFormInput {
  proposalFormId: ID!
  evaluationFormId: ID
  clientMutationId: String
}

type SetEvaluationFormInProposalFormPayload {
  proposalForm: ProposalForm!
  clientMutationId: String
}

input SetUserDefaultLocaleInput {
  """User uuid."""
  userId: ID

  """Locale code """
  code: String
  clientMutationId: String
}

type SetUserDefaultLocalePayload {
  code: String
  clientMutationId: String
}

type ShieldAdminForm {
  """Is shield mode is active?"""
  shieldMode: Boolean!

  """Introduction text to show in shield page."""
  introduction: HTML

  """Image to show in shield page."""
  media: Media
  translations: [ShieldAdminFormTranslation!]!
}

type ShieldAdminFormTranslation {
  """The locale of the translation"""
  locale: String!

  """Introduction text to show in shield page."""
  introduction: HTML
}

"""A simple question"""
type SimpleQuestion implements Question & Node {
  """The ID of an object."""
  id: ID!

  """Identifies the question title."""
  title: String!

  """Return responses on this questions."""
  responses(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """Get responses with user not confirmed"""
    withNotConfirmedUser: Boolean = false

    """Get responses in which the term appears."""
    term: String

    """Get responses matching given category."""
    iaCategory: String = null

    """Get responses matching given sentiment."""
    iaSentiment: CivicIASentiment = null

    """If true, get only responses starred by viewer."""
    hasViewerStarred: Boolean = false

    """Ordering options for responses."""
    orderBy: ResponsesOrder = {field: CREATED_AT, direction: DESC}
  ): ResponseConnection!
  number: Int!
  type: QuestionTypeValue!

  """The position of the question"""
  position: Int!
  private: Boolean!
  required: Boolean!
  helpText: String
  description: HTML

  """Is the description using Jodit Wysiwyg."""
  descriptionUsingJoditWysiwyg: Boolean!
  kind: String!
  slug: String!

  """Return users who answered the question"""
  participants(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """Get participant with user not confirmed"""
    withNotConfirmedUser: Boolean = false
  ): EventParticipantConnection!

  """The associated logic jumps to this question."""
  jumps(
    """Ordering options for question jumps."""
    orderBy: JumpsOrder = {field: POSITION, direction: ASC}
  ): [LogicJump!]!

  """The jumps of which this question is the destination"""
  destinationJumps: [LogicJump!]!

  """The destination of the always jump (the else case) of this question."""
  alwaysJumpDestinationQuestion: Question

  """Boolean to decide whether the question will be rendered or not"""
  hidden: Boolean!

  """Most used categories of responses, detected by CivicIA."""
  iaCategories(
    """If given, will limit the number of categories returned."""
    limit: Int
  ): [Counter!]!

  """if type number, value can be ranged (number question only)"""
  isRangeBetween: Boolean!

  """value min, if isRangeBetween (number question only)"""
  rangeMin: Int

  """value max, if isRangeBetween (number question only)"""
  rangeMax: Int

  """
  Return array containing object with number of occurrences by response's keywords.
  """
  tagCloud(
    """Defines the number of aggregation for the tag cloud."""
    size: Int = 20
  ): [TagCloudItem!]!
}

"""A site color."""
type SiteColor {
  keyname: String!
  value: String
}

"""A site image"""
type SiteImage {
  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  id: ID!

  """A unique key to distinguish site image"""
  keyname: String!

  """Does the site image is currently enabled?"""
  isEnabled: Boolean!

  """The position of the site image"""
  position: Int!

  """The category of the site image"""
  category: String!

  """The associated media of the site image"""
  media: Media
}

"""A site parameter"""
type SiteParameter {
  id: ID!
  keyname: String!
  isTranslatable: Boolean
  translations: [SiteParameterTranslation]
  value: String
}

"""translation of site parameter"""
type SiteParameterTranslation {
  id: ID!
  value: String!
  locale: String!
}

"""Site settings"""
type SiteSettings {
  """The current capco domain."""
  capcoDomain: URI!

  """The custom domain to redirect to."""
  customDomain: URI

  """The status of the domain change."""
  status: SiteSettingsStatus
}

"""The status of the domain change."""
enum SiteSettingsStatus {
  """Custom domain is not set."""
  IDLE

  """The site redirects correctly to the custom domain."""
  ACTIVE
}

"""Available sluggable entities."""
enum SluggableEntity {
  ORGANIZATION
  DISTRICT
  PROPOSAL_DISTRICT
  PAGE
}

"""Sms analytics."""
type SmsAnalytics {
  """The remaining credits."""
  remainingCredits: RemainingSmsCredit!

  """The number of verified users."""
  consumedCredits: Int!

  """The total credits purchased."""
  totalCredits: Int!
}

"""Represents a sms transaction."""
type SmsCredit implements Node {
  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!

  """The ID of an object."""
  id: ID!

  """The amount credited."""
  amount: Int!
}

"""A connection to a list of items."""
type SmsCreditConnection {
  totalCount: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [SmsCreditEdge]
}

"""An edge in a connection."""
type SmsCreditEdge {
  """The item at the end of the edge."""
  node: SmsCredit!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Sms order."""
type SmsOrder implements Node {
  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!

  """The ID of an object."""
  id: ID!

  """The amount ordered."""
  amount: Int!

  """State of the order."""
  isProcessed: Boolean!
}

"""A connection to a list of items."""
type SmsOrderConnection {
  totalCount: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [SmsOrderEdge]
}

"""An edge in a connection."""
type SmsOrderEdge {
  """The item at the end of the edge."""
  node: SmsOrder!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Available filters for `SmsOrders` query."""
enum SmsOrdersFilters {
  """Filter by processed orders."""
  PROCESSED

  """Filter by unprocessed orders."""
  UNPROCESSED
}

"""A source"""
type Source implements Node & Publishable & Contribution & Trashable & UniformResourceLocatable & Reportable & ContributionWithAuthor {
  """Whether or not the user has report the source."""
  viewerHasReport: Boolean!

  """The reportings related to the reportable."""
  reportings(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
    orderBy: ReportingOrder = {field: CREATED_AT, direction: DESC}
  ): ReportingConnection!

  """Check if a user can report"""
  viewerCanReport: Boolean!

  """The author of the contribution."""
  author: User!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime

  """The ID of an object."""
  id: ID!

  """Whether or not the entity is published."""
  published: Boolean!

  """Identifies when the entity can no more be published."""
  publishableUntil: DateTime

  """Identifies when the entity was published at."""
  publishedAt: DateTime

  """Reason that the entity is not published."""
  notPublishedReason: NotPublishedReason

  """
  Return the related contribution if the contribution is related to another.
  """
  related: Contribution

  """The source's url"""
  url: URI!

  """Whether or not the contribution is trashed."""
  trashed: Boolean!

  """Identifies the trashed visibility."""
  trashedStatus: TrashableStatus

  """Identifies the moment the moderator trashed the contribution."""
  trashedAt: DateTime

  """Identifies the reason why the moderator trashed the contribution."""
  trashedReason: String

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!

  """Whether or not the user can contribute to the source."""
  contribuable: Boolean!

  """Whether or not the user has voted for this source."""
  viewerHasVote: Boolean!

  """The title of the source."""
  title: String!

  """The content of the source."""
  body: String!
  step: ConsultationStep!
  votes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
  ): SourceVoteConnection
  viewerVote: SourceVote
  category: SourceCategory

  """The link of the source."""
  link: URI!
  kind: String!
}

"""A source category."""
type SourceCategory {
  id: ID!
  title: String!
}

"""A connection to a list of items."""
type SourceConnection {
  totalCount: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [SourceEdge]
}

"""An edge in a connection."""
type SourceEdge {
  """The item at the end of the edge."""
  node: Source!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Ways in which source connections can be ordered."""
input SourceOrder {
  """The field in which to order nodes by."""
  field: SourceOrderField!

  """The direction in which to order nodes."""
  direction: OrderDirection! = ASC
}

"""Properties by which source connections can be ordered"""
enum SourceOrderField {
  """Allows ordering a list of sources by when they were published."""
  PUBLISHED_AT

  """Allows ordering a list of sources by the number of votes it have."""
  VOTES

  """Allows ordering a list of sources by when they were created."""
  CREATED_AT

  """Allows ordering a list of sources by when they were updated."""
  UPDATED_AT
}

"""A contribution with an author"""
type SourceVote implements Vote & Publishable & Contribution {
  """The ID of an object"""
  id: ID!

  """The date of the vote."""
  createdAt: DateTime!

  """The author of the contribution."""
  author: User

  """
  Return the related contribution if the contribution is related to another.
  """
  related: Contribution

  """Returns 'sourceVote'."""
  kind: String!

  """Returns if vote is accounted or not"""
  isAccounted: Boolean!

  """The participant of the contribution."""
  participant: Participant

  """Whether or not the entity is published."""
  published: Boolean!

  """Identifies when the entity can no more be published."""
  publishableUntil: DateTime

  """Identifies when the entity was published at."""
  publishedAt: DateTime

  """Reason that the entity is not published."""
  notPublishedReason: NotPublishedReason

  """Url of the contribution"""
  url: URI!
}

"""A connection to a list of items."""
type SourceVoteConnection {
  totalCount: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [SourceVoteEdge]
}

"""An edge in a connection."""
type SourceVoteEdge {
  """The item at the end of the edge."""
  node: SourceVote!

  """A cursor for use in pagination."""
  cursor: String!
}

"""A sourceable"""
interface Sourceable {
  id: ID!
  contribuable: Boolean!
  step: ConsultationStep!

  """The sources related to the sourceable."""
  sources(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
    orderBy: SourceOrder = {field: PUBLISHED_AT, direction: DESC}
  ): SourceConnection!

  """
  The viewer unpublished sources related to the sourceable (only visible by viewer).
  """
  viewerSourcesUnpublished(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
  ): SourceConnection!

  """The available sources categories of to the sourceable."""
  availableSourceCategories: [SourceCategory]
}

"""Available errors for a `starResponse` mutation."""
enum StarResponseError {
  """No response match your id."""
  RESPONSE_NOT_FOUND

  """Viewer has already starred the response."""
  ALREADY_STARRED
}

input StarResponseInput {
  """Id of the response to star."""
  responseId: ID!
  clientMutationId: String
}

type StarResponsePayload {
  """The response starred."""
  response: Response

  """An unsuccessful mutation will return an error message."""
  error: StarResponseError
  clientMutationId: String
}

"""A step inside a project."""
interface Step {
  """The ID of an object"""
  id: ID!

  """The URL to this resource."""
  url: URI!

  """When the time interval begins or ends."""
  timeRange: TimeRange!

  """The title of the step."""
  title: String!

  """Identifies the current state of the step."""
  state: StepState!

  """The kind of the step"""
  kind: String! @deprecated(reason: "Please, use `__typename` instead.")

  """The type of the step"""
  type: String @deprecated(reason: "Please, use `__typename` instead.")

  """Does the step have a end date ?"""
  timeless: Boolean

  """The introduction text of the step."""
  body: HTML

  """Is the body using Jodit Wysiwyg."""
  bodyUsingJoditWysiwyg: Boolean!

  """Is the step enabled or not"""
  enabled: Boolean!

  """The label of the step"""
  label: String!

  """The step's metadescription"""
  metaDescription: String

  """The step's custom code"""
  customCode: String

  """The step's slug"""
  slug: String

  """Events linked to the step"""
  events(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
    orderBy: EventOrder! = {field: START_AT, direction: DESC}

    """If non-null, filters events by comparing the start date with present."""
    isFuture: Boolean
  ): EventConnection!
  project: Project
  exportStepUrl: URI
  exportContributorsUrl: URI
  adminUrl(operationType: StepAdminUrlOperationType): URI!

  """Mediators assigned to this step."""
  mediators(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """Filter mediators by user username."""
    username: String
  ): MediatorConnection
}

enum StepAdminUrlOperationType {
  CREATE
  EDIT
}

"""Ways in which lists of steps can be ordered upon return."""
input StepOrder {
  """The field in which to order nodes by."""
  field: StepOrderField! = POSITION

  """The direction in which to order nodes."""
  direction: OrderDirection! = DESC
}

"""Ordering options for steps returned from the connection."""
enum StepOrderField {
  """Allows ordering a list of steps by position."""
  POSITION
}

input StepRequirementInput {
  id: ID
  label: String
  type: RequirementType!
}

"""The possible states in which a step can be."""
enum StepState {
  """The step has not started yet."""
  FUTURE

  """The step is currently open."""
  OPENED

  """The step has been closed."""
  CLOSED
}

input StepStatusInput {
  id: ID
  name: String
  color: ProposalStepStatusColor
}

"""A object style."""
type Style {
  id: ID

  """Specify if the style is activated or not."""
  enabled: Boolean!

  """The color value in hexadecimal format for the border or background."""
  color: Color

  """The value of the opacity of the border or the background."""
  opacity: Float

  """The value of the border size."""
  size: Int
}

"""Available errors for an `subscribeNewsletter` mutation."""
enum SubscribeNewsletterErrorCode {
  """The newsletter feature is not enabled."""
  FEATURE_NOT_ENABLED

  """Invalid captcha."""
  INVALID_CAPTCHA

  """Email already subscribed to newsletter."""
  EMAIL_ALREADY_SUBSCRIBED

  """Rate limit reached."""
  RATE_LIMIT_REACHED
}

input SubscribeNewsletterInput {
  """The email to subcribe."""
  email: Email!

  """The captcha verification."""
  captcha: String
  clientMutationId: String
}

type SubscribeNewsletterPayload {
  """The subscribed email"""
  email: Email

  """The subscribed email"""
  errorCode: SubscribeNewsletterErrorCode
  clientMutationId: String
}

input SubscribeToEventAsNonRegisteredInput {
  eventId: ID!

  """Email of user"""
  email: String!

  """Username of user"""
  username: String!

  """Should the event registration be private"""
  private: Boolean = false
  clientMutationId: String
}

type SubscribeToEventAsNonRegisteredPayload {
  """Event"""
  event: Event
  clientMutationId: String
}

input SubscribeToEventAsRegisteredInput {
  """Event global id"""
  eventId: ID!

  """Should the event registration be private"""
  private: Boolean = false
  clientMutationId: String
}

type SubscribeToEventAsRegisteredPayload {
  """Event"""
  event: Event
  clientMutationId: String
}

"""3 possible values for a subscription."""
enum SubscriptionTypeValue {
  """Get all notifications for this subscription"""
  ALL

  """Get essentials notifications for this subscription"""
  ESSENTIAL

  """Get minimal notifications for this subscription"""
  MINIMAL
}

"""Object containing the tag value and the number of occurrences."""
type TagCloudItem {
  """The tag value."""
  value: String!

  """The number of time this value appears in a response's text value."""
  occurrencesCount: Int!
}

input TestEmailingCampaignInput {
  """Global id of the campaign to test"""
  id: ID!

  """email receiving the tested campaign"""
  email: Email!
  clientMutationId: String
}

type TestEmailingCampaignPayload {
  """The email sent"""
  html: HTML

  """error code, if any"""
  error: SendEmailingCampaignErrorCode
  clientMutationId: String
}

"""A theme"""
type Theme implements UniformResourceLocatable {
  """Identifies the title of the theme."""
  title(
    """The locale to translate content (eg: FR_FR)."""
    locale: TranslationLocale
  ): String!

  """Identifies the body of the theme."""
  body(
    """The locale to translate content (eg: FR_FR)."""
    locale: TranslationLocale
  ): String

  """Identifies the teaser of the theme."""
  teaser(
    """The locale to translate content (eg: FR_FR)."""
    locale: TranslationLocale
  ): String

  """Identifies the theme ID."""
  id: ID!

  """The URL to this resource."""
  url: URI!
  translations: [ThemeTranslation!]!

  """The themes's related media."""
  media: Media
}

"""A translation theme."""
type ThemeTranslation {
  """The theme translation related locale."""
  locale: TranslationLocale!

  """The title of the theme translation."""
  title: String

  """The body of the theme translation."""
  body: String

  """The theme translation teaser."""
  teaser: String
}

"""A time range that contains start date and end date."""
type TimeRange {
  """The start date of the time range."""
  startAt: DateTime

  """The end date of the time range"""
  endAt: DateTime

  """Whether it has started"""
  hasStarted: Boolean!

  """Whether it has ended"""
  hasEnded: Boolean!

  """Get the remaining time in days/hours"""
  remainingTime: RemainingTime

  """Whether it last one day"""
  lastOneDay: Boolean!

  """Whether it is still open"""
  isOpen: Boolean!

  """Whether it is closed"""
  isClosed: Boolean!

  """Whether it occurs in the future"""
  isFuture: Boolean!

  """Whether it is timeless"""
  isTimeless: Boolean!
}

input ToggleFeatureInput {
  """The type of the feature"""
  type: FeatureFlagType!
  enabled: Boolean!
  clientMutationId: String
}

type ToggleFeaturePayload {
  featureFlag: FeatureFlag
  clientMutationId: String
}

input ToggleSSOConfigurationStatusInput {
  ssoConfigurationId: ID!
  clientMutationId: String
}

type ToggleSSOConfigurationStatusPayload {
  ssoConfiguration: SSOConfiguration!
  clientMutationId: String
}

"""A translation locale"""
enum TranslationLocale {
  """English - UNITED KINGDOM locale"""
  EN_GB

  """French - FRANCE locale"""
  FR_FR

  """Spanish - SPAIN locale"""
  ES_ES

  """German - GERMANY locale"""
  DE_DE

  """Dutch - NETHERLANDS locale"""
  NL_NL

  """Swedish - SWEDEN locale"""
  SV_SE

  """Basque - EUSKADIA locale"""
  EU_EU

  """Gascon - OCCITAN locale"""
  OC_OC

  """Recette - RECETTE locale"""
  UR_IN
}

"""Available errors for a `trash` mutation."""
enum TrashErrorCode {
  """No trashable entity match your id."""
  TRASHABLE_NOT_FOUND
}

input TrashInput {
  """The id of the trashable entity."""
  id: ID!
  trashedStatus: TrashableStatus!

  """The reason why the entity is trashed."""
  trashedReason: String
  clientMutationId: String
}

type TrashPayload {
  """The entity that had just been trashed."""
  trashable: Trashable

  """An unsuccessful mutation will return an error."""
  errorCode: TrashErrorCode
  clientMutationId: String
}

"""Entities that can be trashed."""
interface Trashable {
  """Whether or not the contribution is trashed."""
  trashed: Boolean!

  """Identifies the trashed visibility."""
  trashedStatus: TrashableStatus

  """Identifies the moment the moderator trashed the contribution."""
  trashedAt: DateTime

  """Identifies the reason why the moderator trashed the contribution."""
  trashedReason: String
}

"""Different trashable status."""
enum TrashableStatus {
  """Content is not visible."""
  INVISIBLE

  """Content is visible."""
  VISIBLE
}

"""An RFC 3986, RFC 3987, and RFC 6570 (level 4) compliant URI string."""
scalar URI

"""Available errors for an `unTrash` mutation."""
enum UnTrashErrorCode {
  """No trashable entity match your id."""
  TRASHABLE_NOT_FOUND

  """The entity is not trashed."""
  NOT_TRASHED
}

input UnTrashInput {
  """The id of the trashed entity."""
  id: ID!
  clientMutationId: String
}

type UnTrashPayload {
  """The entity that had just been untrashed."""
  trashable: Trashable

  """An unsuccessful mutation will return an error."""
  errorCode: UnTrashErrorCode
  clientMutationId: String
}

input UnfollowGlobalDistrictInput {
  """The global district id"""
  globalDistrictId: ID
  clientMutationId: String
}

type UnfollowGlobalDistrictPayload {
  """The global district unfollowed"""
  globalDistrict: GlobalDistrict

  """The ID of viewer who unfollow the district"""
  unfollowerId: ID

  """Available errors for the mutation."""
  errorCode: GlobalDistrictErrorCode
  clientMutationId: String
}

input UnfollowOpinionInput {
  """The opinion id"""
  opinionId: ID

  """Array of opinion id"""
  idsOpinion: [ID!]
  clientMutationId: String
}

type UnfollowOpinionPayload {
  opinion: OpinionOrVersion
  unfollowerId: ID
  clientMutationId: String
}

input UnfollowProposalInput {
  """The proposal id"""
  proposalId: ID

  """Array of proposal id"""
  idsProposal: [ID!]
  clientMutationId: String
}

type UnfollowProposalPayload {
  proposal: Proposal
  unfollowerId: ID
  clientMutationId: String
}

"""Represents a type that can be retrieved by a URL on the admin."""
interface UniformResourceAdminLocatable {
  """The admin URL to this resource."""
  adminUrl: URI
}

"""Represents a type that can be retrieved by a URL."""
interface UniformResourceLocatable {
  """The URL to this resource."""
  url: URI!
}

input UnselectProposalInput {
  """The step where the proposal is selected"""
  stepId: String!

  """The proposal ID to remove from step."""
  proposalId: ID!
  clientMutationId: String
}

type UnselectProposalPayload {
  proposal: Proposal!
  clientMutationId: String
}

"""Available errors for a `unstarResponse` mutation."""
enum UnstarResponseError {
  """No response match your id."""
  RESPONSE_NOT_FOUND

  """Viewer has not starred the response."""
  NOT_STARRED
}

input UnstarResponseInput {
  """Id of the response to unstar."""
  responseId: ID!
  clientMutationId: String
}

type UnstarResponsePayload {
  """The response unstarred."""
  response: Response

  """An unsuccessful mutation will return an error message."""
  error: UnstarResponseError
  clientMutationId: String
}

input UnsubscribeToEventAsRegisteredInput {
  eventId: ID!
  clientMutationId: String
}

type UnsubscribeToEventAsRegisteredPayload {
  """Event"""
  event: Event
  clientMutationId: String
}

input UpdateAlphaProjectInput {
  """The project title"""
  title: String!

  """The project authors IDs"""
  authors: [ID!]!

  """
  ID of the owner of the project, user or organization. If null, fallback on the viewer.
  """
  owner: ID

  """The project type ID"""
  projectType: ID

  """The project cover"""
  cover: ID

  """Is the split view enabled"""
  isProposalStepSplitViewEnabled: Boolean

  """The project video link"""
  video: String

  """The project themes IDs"""
  themes: [ID!]!

  """The global districts IDs"""
  districts: [ID!]!

  """The project metadescription"""
  metaDescription: String

  """Is the project external"""
  isExternal: Boolean!

  """The project external link"""
  externalLink: String

  """The project external participants count"""
  externalParticipantsCount: Int

  """The project external contributions count"""
  externalContributionsCount: Int

  """The project external votes count"""
  externalVotesCount: Int

  """The project publication date"""
  publishedAt: DateTime!

  """The project visibility"""
  visibility: ProjectVisibility!
  opinionCanBeFollowed: Boolean!
  steps: [ProjectStepInput!]!
  headerType: ProjectHeaderType
  coverFilterOpacityPercent: Int

  """The locale id of the project. Null if visible by all languages"""
  locale: ID

  """Groups id."""
  restrictedViewerGroups: [ID!]

  """if it is archived"""
  archived: Boolean!

  """The project address, geocoded by google"""
  address: String
  clientMutationId: String
  projectId: ID!
}

type UpdateAlphaProjectPayload {
  """The created project"""
  project: Project
  clientMutationId: String
}

input UpdateAnonymousReplyInput {
  """The hashed token of the reply"""
  hashedToken: String!

  """The responses to the questionnaire questions"""
  responses: [ResponseInput!]!

  """The participant email"""
  participantEmail: Email
  clientMutationId: String
}

type UpdateAnonymousReplyPayload {
  """The updated AnonymousReply"""
  reply: AnonymousReply
  clientMutationId: String
}

input UpdateCASSSOConfigurationInput {
  """The name of configured SSO."""
  name: String!

  """Version of CAS used."""
  casVersion: CasVersion!

  """URL of the CAS server."""
  casServerUrl: URI!

  """Content of the certificate file."""
  casCertificate: String!
  clientMutationId: String

  """The global id of the cas configuration to update."""
  id: ID!
}

type UpdateCASSSOConfigurationPayload {
  """The created cas configuration."""
  ssoConfiguration: CASSSOConfiguration
  errorCode: updateCASSSOConfiguratonErrorCode
  clientMutationId: String
}

"""Available errors for an `updateCivicIA` mutation."""
enum UpdateCivicIAErrorCode {
  """No analyzable found for the given id."""
  NOT_FOUND

  """The given does not follow the format."""
  INVALID_JSON
}

input UpdateCivicIAInput {
  """The json data containing analyzables and their updates."""
  data: String!
  clientMutationId: String
}

type UpdateCivicIAPayload {
  """The updated analyzables."""
  analyzables: [CivicIAAnalyzable]

  """Available errors for updateCivicIA mutation."""
  errorCode: UpdateCivicIAErrorCode
  clientMutationId: String
}

input UpdateCollectStepInput {
  """The proposalForm linked to the step."""
  proposalForm: ID!

  """The step ID to update."""
  stepId: ID!

  """The step label."""
  label: String!

  """The step description."""
  body: String

  """Is the body using Jodit Wysiwyg."""
  bodyUsingJoditWysiwyg: Boolean!

  """When the step start."""
  startAt: DateTime

  """When the step end."""
  endAt: DateTime
  timeless: Boolean

  """Whether or not the step is enabled."""
  isEnabled: Boolean!

  """Step metadescription."""
  metaDescription: DateTime

  """Step custom code."""
  customCode: HTML

  """Step footer code."""
  footer: HTML

  """Requirements to answer the questionnaire."""
  requirements: [StepRequirementInput!]!

  """Reasons to require these requirements."""
  requirementsReason: String

  """
  If anonymous participation is allowed whether or not we collect participants email.
  """
  collectParticipantsEmail: Boolean

  """Wether or not anonymous user can participate."""
  isAnonymousParticipationAllowed: Boolean

  """
  Whether or not authors can add news on proposals selected in this step.
  """
  allowAuthorsToAddNews: Boolean!

  """Default way to sort proposals."""
  defaultSort: ProposalSort

  """the default view : GRID, LIST or MAP"""
  mainView: MainView
  statuses: [StepStatusInput]
  defaultStatus: ID
  votesHelpText: String

  """Maximum number of votes a user can submit."""
  votesLimit: Int

  """
  Minimum number of votes a user must submit for his votes to be counted.
  """
  votesMin: Int

  """If enabled, allow voters to order their votes by point"""
  votesRanking: Boolean!
  voteThreshold: Int

  """If not null, the date to display vote count"""
  publishedVoteDate: DateTime
  voteType: ProposalStepVoteType
  budget: Float

  """Whether or not sms vote is enabled."""
  isProposalSmsVoteEnabled: Boolean

  """Whether or not secret ballot is enable"""
  secretBallot: Boolean
  private: Boolean

  """
  Determines how long it will take for the proposal to be archived, coupled with proposalArchivedUnitTime.
  """
  proposalArchivedTime: Int!

  """
  The unit chosen to set the archived duration can be either MONTHS or DAYS
  """
  proposalArchivedUnitTime: ProposalArchivedUnitTime!

  """Whether or not collect by email is enabled."""
  isCollectByEmailEnabled: Boolean!
  clientMutationId: String
}

type UpdateCollectStepPayload {
  """The updated step."""
  collectStep: CollectStep!

  """
  Whether or not we had to disable proposal step split view if vote settings were not compatible.
  """
  proposalStepSplitViewWasDisabled: Boolean!
  clientMutationId: String
}

input UpdateConsultationStepInput {
  """The step ID to update."""
  stepId: ID!

  """The step label."""
  label: String!

  """The step description."""
  body: String

  """When the step start."""
  startAt: DateTime

  """When the step end."""
  endAt: DateTime
  timeless: Boolean

  """Whether or not the step is enabled."""
  isEnabled: Boolean!

  """Step metadescription."""
  metaDescription: DateTime

  """Step custom code."""
  customCode: HTML

  """Requirements to answer the questionnaire."""
  requirements: [StepRequirementInput!]!

  """Reasons to require these requirements."""
  requirementsReason: String

  """The list of consultations linked to the step."""
  consultations: [ID]!
  clientMutationId: String
}

type UpdateConsultationStepPayload {
  """The updated step."""
  consultationStep: ConsultationStep!
  clientMutationId: String
}

input UpdateContactFormInput {
  """ID of the contact form to update."""
  id: ID!

  """Email of the interlocutor of the contact form."""
  email: String!
  translations: [ContactFormTranslationInput!]!

  """Is the body using Jodit Wysiwyg."""
  bodyUsingJoditWysiwyg: Boolean

  """Is the confidentiality using Jodit Wysiwyg."""
  confidentialityUsingJoditWysiwyg: Boolean
  clientMutationId: String
}

type UpdateContactFormPayload {
  """The contact form updated."""
  contactForm: ContactForm
  clientMutationId: String
}

input UpdateContactPageInput {
  """The title of the contact page."""
  title: String

  """The description of the contact page."""
  description: HTML

  """The picto of the contact page."""
  picto: ID

  """The metadescription of the contact page."""
  metadescription: String

  """The customcode of the contact page."""
  customcode: String

  """The locale of the contact page."""
  locale: String
  clientMutationId: String
}

type UpdateContactPagePayload {
  """The title of the contact page."""
  title: String!

  """The description of the contact page."""
  description: HTML

  """The picto of the contact page."""
  picto: SiteImage

  """The metadescription of the contact page."""
  metadescription: String

  """The customcode of the contact page."""
  customcode: String

  """The locale of the contact page."""
  locale: String
  clientMutationId: String
}

"""Available errors for an `updateCustomDomain` mutation."""
enum UpdateCustomDomainErrorCode {
  """The given customDomain syntax is not valid."""
  CUSTOM_DOMAIN_SYNTAX_NOT_VALID

  """Error occured while updating the custom domain."""
  ERROR_DEPLOYER_API

  """The given CNAME is not valid."""
  CNAME_NOT_VALID
}

input UpdateCustomDomainInput {
  """The updated custom domain."""
  customDomain: String
  clientMutationId: String
}

type UpdateCustomDomainPayload {
  siteSettings: SiteSettings

  """The available errors if any."""
  errorCode: UpdateCustomDomainErrorCode
  clientMutationId: String
}

"""Available errors for an `updateDebateArgument` mutation."""
enum UpdateDebateArgumentErrorCode {
  """No `DebateArgument` match your id."""
  UNKNOWN_DEBATE_ARGUMENT

  """Wrong author of the `DebateArgument`."""
  NOT_ARGUMENT_AUTHOR
}

input UpdateDebateArgumentInput {
  """The global id of the argument to update."""
  id: ID!

  """The body value of the argument."""
  body: String!
  clientMutationId: String
}

type UpdateDebateArgumentPayload {
  """The argument that had just been updated."""
  debateArgument: DebateArgument

  """An unsuccessful mutation will return an error."""
  errorCode: UpdateDebateArgumentErrorCode
  clientMutationId: String
}

"""Available errors for an `updateDebateOpinion` mutation."""
enum UpdateDebateOpinionErrorCode {
  """No `DebateOpinion` match your `debateOpinionId`."""
  UNKNOWN_DEBATE_OPINION

  """The provided values are not valid."""
  INVALID_FORM
}

input UpdateDebateOpinionInput {
  """The Node ID of the `DebateOpinion` to update."""
  debateOpinionId: ID!

  """If provided, update the title value."""
  title: String

  """If provided, update the body value."""
  body: HTML

  """Is the body using Jodit Wysiwyg."""
  bodyUsingJoditWysiwyg: Boolean

  """If a Node ID of a `User` is provided, update the author."""
  author: ID

  """If provided, update the type."""
  type: ForOrAgainstValue
  clientMutationId: String
}

type UpdateDebateOpinionPayload {
  """The just updated opinion."""
  debateOpinion: DebateOpinion

  """An unsuccessful mutation will return an error."""
  errorCode: UpdateDebateOpinionErrorCode
  clientMutationId: String
}

input UpdateDebateStepInput {
  id: ID!
  title: String!
  label: String!
  startAt: DateTime
  endAt: DateTime
  body: HTML
  metaDescription: String
  customCode: String
  isEnabled: Boolean!
  timeless: Boolean
  articles: [DebateArticleInput]
  debateType: DebateType!
  debateContent: HTML
  isAnonymousParticipationAllowed: Boolean
  clientMutationId: String
}

type UpdateDebateStepPayload {
  debateStep: DebateStep!
  clientMutationId: String
}

"""Available errors on campaign edition"""
enum UpdateEmailingCampaignErrorCode {
  """No mailing list match your id"""
  ID_NOT_FOUND_MAILING_LIST

  """No group match your id"""
  ID_NOT_FOUND_GROUP

  """No project match your id"""
  ID_NOT_FOUND_PROJECT

  """A campaign cannot have both group, project, internal and organic list"""
  DOUBLE_LIST

  """No campaign match your id"""
  ID_NOT_FOUND

  """The campaign is not editable"""
  NOT_EDITABLE

  """sendAt must be in the future"""
  TOO_LATE
}

input UpdateEmailingCampaignInput {
  """Global id of the campaign to update"""
  id: ID!

  """Name of the campaign"""
  name: String!

  """Email to appear as sender"""
  senderEmail: String!

  """Name to appear as sender"""
  senderName: String!

  """Id of the mailing list"""
  mailingList: ID

  """Id of the group"""
  emailingGroup: ID

  """Id of the project"""
  project: ID

  """Id of the internal mailing list"""
  mailingInternal: ID

  """object of the email"""
  object: String = ""

  """content of the email"""
  content: String = ""

  """unlayer configuration of the email"""
  unlayerConf: String

  """the date when the email shall be sent"""
  sendAt: DateTime = null
  clientMutationId: String
}

type UpdateEmailingCampaignPayload {
  """The campaign created"""
  emailingCampaign: EmailingCampaign

  """The error code, if any"""
  error: UpdateEmailingCampaignErrorCode
  clientMutationId: String
}

"""Available errors on update of external services configurations."""
enum UpdateExternalServiceConfigurationErrorCode {
  """The given value is not valid for the selected type."""
  INVALID_VALUE
}

input UpdateExternalServiceConfigurationInput {
  """The configuration to update"""
  type: ExternalServiceConfigurationType!

  """The new value of the configuration."""
  value: String!
  clientMutationId: String
}

type UpdateExternalServiceConfigurationPayload {
  externalServiceConfiguration: ExternalServiceConfiguration!
  error: UpdateExternalServiceConfigurationErrorCode
  clientMutationId: String
}

input UpdateFacebookSSOConfigurationInput {
  """Client ID."""
  clientId: String!

  """Secret key."""
  secret: String!

  """True to enable facebook login."""
  enabled: Boolean!
  clientMutationId: String
}

type UpdateFacebookSSOConfigurationPayload {
  """The updated Facebook connect configuration."""
  facebookSSOConfiguration: FacebookSSOConfiguration
  clientMutationId: String
}

input UpdateFollowOpinionInput {
  """The opinion id"""
  opinionId: ID!
  notifiedOf: SubscriptionTypeValue!
  clientMutationId: String
}

type UpdateFollowOpinionPayload {
  follower: Follower
  followerEdge: FollowerEdge
  opinion: OpinionOrVersion
  clientMutationId: String
}

input UpdateFollowProposalInput {
  """The proposal id"""
  proposalId: ID!
  notifiedOf: SubscriptionTypeValue!
  clientMutationId: String
}

type UpdateFollowProposalPayload {
  follower: Follower
  followerEdge: FollowerEdge
  proposal: Proposal
  clientMutationId: String
}

input UpdateFranceConnectSSOConfigurationInput {
  """Client ID."""
  clientId: String!

  """Secret key."""
  secret: String!

  """Environment mode."""
  environment: SSOEnvironment!
  given_name: Boolean!
  family_name: Boolean!
  birthdate: Boolean!
  birthplace: Boolean!
  birthcountry: Boolean!
  gender: Boolean!
  email: Boolean!
  preferred_username: Boolean!
  enabled: Boolean!
  clientMutationId: String
}

type UpdateFranceConnectSSOConfigurationPayload {
  """The updated France Connect configuration."""
  fcConfiguration: FranceConnectSSOConfiguration
  clientMutationId: String
}

input UpdateGlobalDistrictInput {
  id: ID!

  """A GeoJSON format to display in map after."""
  geojson: GeoJSON

  """Should I display this on map?"""
  displayedOnMap: Boolean = false

  """The border style attached to this district."""
  border: BorderStyleInput

  """The background style attached to this district."""
  background: BackgroundStyleInput

  """The names of the district for each language"""
  translations: [DistrictTranslationInput!]!

  """The district cover."""
  cover: ID
}

input UpdateGroupInput {
  description: String

  """Users that will be added to the group by email."""
  emails: [Email!] = []
  groupId: ID!
  title: String!

  """Users that will be added to the group."""
  toAddUserIds: [ID!] = []

  """Users that will be removed from the group."""
  toRemoveUserIds: [ID!] = []
  clientMutationId: String
}

type UpdateGroupPayload {
  group: Group!

  """List of imported users."""
  importedUsers: [User]!

  """List of emails that didn't match an existing user."""
  notFoundEmails: [Email]!

  """
  If an email from your list is already associated to a user who is in the chosen group, it will be in this field.
  """
  alreadyImportedUsers: [User]!
  clientMutationId: String
}

"""
Available errors for an `updateHomePageProjectsMapSectionConfiguration` mutation.
"""
enum UpdateHomePageProjectsMapSectionConfigurationErrorCode {
  """The form is not valid"""
  INVALID_FORM
}

input UpdateHomePageProjectsMapSectionConfigurationInput {
  """The position of the section in the homepage."""
  position: Int!

  """Whether it is published or not."""
  enabled: Boolean!
  translations: [HomePageProjectsMapSectionConfigurationTranslationInput!]!

  """The latitude of the center of map."""
  centerLatitude: Float

  """The longitude of the center of map."""
  centerLongitude: Float

  """The level of zoom of the map."""
  zoomMap: Float
  clientMutationId: String
}

type UpdateHomePageProjectsMapSectionConfigurationPayload {
  """the updated homePageProjectsMapSectionConfiguration"""
  homePageProjectsMapSectionConfiguration: HomePageProjectsMapSectionConfiguration

  """An unsuccessful mutation will return an error."""
  errorCode: UpdateHomePageProjectsMapSectionConfigurationErrorCode
  clientMutationId: String
}

"""
Available errors for an `updateHomePageProjectsSectionConfiguration` mutation.
"""
enum UpdateHomePageProjectsSectionConfigurationErrorCode {
  """Limit of projects that can be dispayed in the homepage"""
  TOO_MANY_PROJECTS

  """The form is not valid"""
  INVALID_FORM
}

input UpdateHomePageProjectsSectionConfigurationInput {
  """The position of the section in the homepage"""
  position: Int!

  """How to display the projects"""
  displayMode: HomePageProjectsSectionConfigurationDisplayMode!

  """Number of objects to display"""
  nbObjects: Int!

  """Whether it is published or not"""
  enabled: Boolean!
  translations: [HomePageProjectsSectionConfigurationTranslationInput!]
  projects: [ID!]!
  clientMutationId: String
}

type UpdateHomePageProjectsSectionConfigurationPayload {
  """the updated homePageProjectsSectionConfiguration"""
  homePageProjectsSectionConfiguration: HomePageProjectsSectionConfiguration

  """An unsuccessful mutation will return an error."""
  errorCode: UpdateHomePageProjectsSectionConfigurationErrorCode
  clientMutationId: String
}

input UpdateLocaleInput {
  locale: String!
  clientMutationId: String
}

type UpdateLocalePayload {
  locale: String!
  clientMutationId: String
}

input UpdateLocaleStatusInput {
  locales: [LocaleStatusInput!]!
  clientMutationId: String
}

type UpdateLocaleStatusPayload {
  locales: LocaleConnection!
  clientMutationId: String
}

input UpdateMediatorVotesInput {
  mediatorId: ID!
  proposals: [ID]!
  participantId: ID!
  participantInfos: ParticipantInfosInput!
  clientMutationId: String
}

type UpdateMediatorVotesPayload {
  mediator: Mediator!
  participant: Participant!
  clientMutationId: String
}

input UpdateNewProjectInput {
  projectId: ID!

  """The project title"""
  title: String!

  """The project description"""
  description: String

  """The project authors IDs"""
  authors: [ID!]!

  """
  ID of the owner of the project, user or organization. If null, fallback on the viewer.
  """
  owner: ID

  """The project type ID"""
  projectType: ID

  """The project cover"""
  cover: ID

  """Can the split view be enabled"""
  canEnableProposalStepSplitView: Boolean

  """Is the split view enabled"""
  isProposalStepSplitViewEnabled: Boolean!

  """The project video link"""
  video: String

  """The project themes IDs"""
  themes: [ID!]!

  """The global districts IDs"""
  districts: [ID!]!

  """The project metadescription"""
  metaDescription: String

  """Is the project external"""
  isExternal: Boolean!

  """The project external link"""
  externalLink: String

  """The project external participants count"""
  externalParticipantsCount: Int

  """The project external contributions count"""
  externalContributionsCount: Int

  """The project external votes count"""
  externalVotesCount: Int

  """The project publication date"""
  publishedAt: DateTime!

  """The project visibility"""
  visibility: ProjectVisibility!
  opinionCanBeFollowed: Boolean!
  steps: [ID!]!
  headerType: ProjectHeaderType
  coverFilterOpacityPercent: Int

  """The locale id of the project. Null if visible by all languages"""
  locale: ID

  """Groups id."""
  restrictedViewerGroups: [ID!]

  """if it is archived"""
  archived: Boolean!

  """The project address, geocoded by google"""
  address: String

  """Custom code that will be applied to every steps."""
  customCode: String
  clientMutationId: String
}

type UpdateNewProjectPayload {
  project: Project!
  clientMutationId: String
}

input UpdateOauth2SSOConfigurationInput {
  """Client ID."""
  clientId: String!

  """Secret key."""
  secret: String!

  """Authorization URL."""
  authorizationUrl: URI!

  """Access token URL."""
  accessTokenUrl: URI!

  """User info URL."""
  userInfoUrl: URI!

  """Logout URL."""
  logoutUrl: URI

  """Profile URL on the SSO side."""
  profileUrl: URI

  """Specify if this SSO configuration is active or not."""
  enabled: Boolean!

  """The name of your SSO provider."""
  name: String!

  """Whether or not disconnect sso on logout."""
  disconnectSsoOnLogout: Boolean!

  """The ID of oauth2 configuration that needs to be updated."""
  id: ID!
  clientMutationId: String
}

type UpdateOauth2SSOConfigurationPayload {
  """The updated oauth2 configuration."""
  ssoConfiguration: Oauth2SSOConfiguration
  clientMutationId: String
}

"""Available errors on OfficialResponse creation or edition"""
enum UpdateOfficialResponseErrorCode {
  """No OfficialResponse match your id"""
  ID_NOT_FOUND

  """No author match your id"""
  AUTHOR_NOT_FOUND

  """OfficialResponse needs at least one author"""
  NO_AUTHOR

  """No proposal match your id"""
  PROPOSAL_NOT_FOUND

  """The proposal already has an OfficialResponse"""
  PROPOSAL_HAS_RESPONSE

  """The received date is not valid."""
  INVALID_DATE

  """Not admin of this project."""
  NOT_ADMIN
}

input UpdateOfficialResponseInput {
  """If provided, the id of the OfficialResponse to update."""
  id: ID

  """The body of the OfficialResponse."""
  body: HTML!

  """Is the body using Jodit Wysiwyg."""
  bodyUsingJoditWysiwyg: Boolean

  """True if the OfficialResponse is published."""
  isPublished: Boolean!

  """Identifies the date and time when the object has to be published."""
  publishedAt: DateTime

  """The id of the authors of the OfficialResponse."""
  authors: [ID!]!

  """The id of the proposal linked to the OfficialResponse."""
  proposal: ID!
  clientMutationId: String
}

type UpdateOfficialResponsePayload {
  """The OfficialResponse who just have been updated."""
  officialResponse: OfficialResponse

  """The error, if any."""
  error: UpdateOfficialResponseErrorCode
  clientMutationId: String
}

"""Available errors on opinion update"""
enum UpdateOpinionErrorCode {
  """the user is not authorized to edit this opinion"""
  NOT_AUTHORIZED

  """the opinion is not contribuable"""
  OPINION_NOT_CONTRIBUABLE

  """the form is invalid"""
  INVALID_FORM
}

input UpdateOpinionInput {
  """the id of the opinion to update"""
  opinionId: ID!

  """the opinion title"""
  title: String!

  """the opinion body"""
  body: HTML!

  """Is the body using Jodit Wysiwyg."""
  bodyUsingJoditWysiwyg: Boolean

  """the opinion appendices"""
  appendices: [AppendixInput]!
  clientMutationId: String
}

type UpdateOpinionPayload {
  """the updated opinion"""
  opinion: Opinion

  """available errors if mutation fails"""
  errorCode: UpdateOpinionErrorCode
  clientMutationId: String
}

"""Available errors on `updateOrganization` mutation."""
enum UpdateOrganizationErrorCode {
  """The organization id could not be found."""
  ORGANIZATION_NOT_FOUND
}

input UpdateOrganizationInput {
  """Link of Web page."""
  webPageUrl: URI

  """Link of Facebook page."""
  facebookUrl: URI

  """Link of Twitter page."""
  twitterUrl: URI

  """Link of Instagram page."""
  instagramUrl: URI

  """Link of LinkedIn profile."""
  linkedInUrl: URI

  """Link of Youtube channel."""
  youtubeUrl: URI

  """The id of the organization."""
  organizationId: ID!
  translations: [UpdateOrganizationTranslationInput!]

  """The new email."""
  email: String

  """The id of a `Media` to use as logo."""
  logo: ID

  """The id of a `Media` to use as banner."""
  banner: ID
  clientMutationId: String
}

type UpdateOrganizationPayload {
  """Update an organization."""
  organization: Organization

  """An unsuccessful mutation will return an error."""
  errorCode: UpdateOrganizationErrorCode
  clientMutationId: String
}

input UpdateOrganizationTranslationInput {
  """Organization title."""
  title: String!

  """Organization body."""
  body: HTML

  """the locale of the translation"""
  locale: TranslationLocale!
  clientMutationId: String
}

input UpdateOtherStepInput {
  """The step ID to update."""
  stepId: ID!

  """The step label."""
  label: String!

  """The step description."""
  body: String

  """When the step start."""
  startAt: DateTime

  """When the step end."""
  endAt: DateTime

  """Whether or not the step is enabled."""
  isEnabled: Boolean!

  """Step metadescription."""
  metaDescription: DateTime

  """Step custom code."""
  customCode: String

  """Wether or not the step is timeless"""
  timeless: Boolean!
  clientMutationId: String
}

type UpdateOtherStepPayload {
  """The updated step."""
  step: OtherStep!
  clientMutationId: String
}

"""Available errors on UpdatePaperVote mutation."""
enum UpdatePaperVoteErrorCode {
  """The proposal does not exist."""
  PROPOSAL_NOT_FOUND

  """The step does not exist or is neither a collect nor selection step."""
  STEP_NOT_FOUND
}

input UpdatePaperVoteInput {
  """ID of the proposal to update votes."""
  proposal: ID!

  """ID of the step where the proposal receives votes."""
  step: ID!

  """Count of votes received by the proposal in the step."""
  count: Int!

  """Amount of points received by the proposal in the step."""
  points: Int!
  clientMutationId: String
}

type UpdatePaperVotePayload {
  """If successful, the updated proposal."""
  proposal: Proposal

  """The error, if any."""
  error: UpdatePaperVoteErrorCode
  clientMutationId: String
}

input UpdateParticipantRequirementInput {
  """The Node ID of the requirement to modify."""
  requirementId: ID!

  """The updated value of the requirement."""
  value: Boolean!

  """The participant token."""
  participantToken: String!
  clientMutationId: String
}

type UpdateParticipantRequirementPayload {
  participant: Participant
  requirement: Requirement
  clientMutationId: String
}

"""Available errors on updatePost mutation"""
enum UpdatePostErrorCode {
  """Submitted form is invalid"""
  INVALID_FORM
}

input UpdatePostInput {
  translations: [CreatePostTranslationInput!]

  """post authors"""
  authors: [ID!]!

  """post customCode"""
  customCode: String

  """related projects related to the post"""
  projects: [ID]!

  """proposals related to the post"""
  proposals: [ID]!

  """themes related to the post"""
  themes: [ID]!

  """Whether or not the post should be displayed on blog"""
  displayedOnBlog: Boolean!

  """When the post should be pusblished"""
  publishedAt: DateTime!

  """Whether or not the post should be published"""
  isPublished: Boolean!

  """Whether or not the post should be commentable"""
  commentable: Boolean!

  """The media attached to the post"""
  media: ID

  """
  ID of the owner of the post, user or organization. If null, fallback on the viewer.
  """
  owner: ID
  clientMutationId: String

  """The id of the post to update"""
  id: ID!
}

type UpdatePostPayload {
  """The updated post"""
  post: Post

  """Available errorCode for updatePost mutation"""
  errorCode: UpdatePostErrorCode
  clientMutationId: String
}

input UpdateProfileAccountEmailInput {
  """The password to confirm action"""
  passwordConfirm: String!

  """The email to change"""
  email: String!
  clientMutationId: String
}

type UpdateProfileAccountEmailPayload {
  """The user who just have been updated"""
  viewer: User

  """The error"""
  error: UpdateUserEmailErrorCode
  clientMutationId: String
}

input UpdateProfileAccountLocaleInput {
  """The locale to change"""
  locale: TranslationLocale!
  clientMutationId: String
}

type UpdateProfileAccountLocalePayload {
  """The user who just have been updated"""
  viewer: User

  """The new locale code"""
  locale: TranslationLocale

  """The error"""
  error: String
  clientMutationId: String
}

input UpdateProfilePasswordInput {
  """The current password"""
  current_password: String!

  """The new password"""
  new_password: String!
  clientMutationId: String
}

type UpdateProfilePasswordPayload {
  """The user who just have been updated"""
  user: User!

  """The error"""
  error: String
  clientMutationId: String
}

"""Available errors for an `personalData` mutation."""
enum UpdateProfilePersonalDataErrorCode {
  """The update failed"""
  CANT_UPDATE

  """The given phone should be a mobile phone number."""
  PHONE_SHOULD_BE_MOBILE_NUMBER

  """The given phone is already used by another user."""
  PHONE_ALREADY_USED_BY_ANOTHER_USER

  """The given phone should be 10 digits."""
  PHONE_INVALID_LENGTH
}

input UpdateProfilePersonalDataInput {
  """
  (ROLE_SUPER_ADMIN only) the user to update, if not provided the viewer is updated.
  """
  userId: ID

  """Your firstname"""
  firstname: String

  """Your lastname"""
  lastname: String

  """Your gender"""
  gender: GenderValue

  """Your phone number"""
  phone: String

  """Your address, geocoded by google"""
  postalAddress: String

  """Your address"""
  address: String

  """Your complementary address"""
  address2: String

  """Your city"""
  city: String

  """Your zipcode"""
  zipCode: String

  """Your date of birth"""
  dateOfBirth: String

  """Is your phone confirmed ?"""
  phoneConfirmed: Boolean

  """Your email"""
  email: String

  """Your birth place"""
  birthPlace: String

  """Your identification code to verify your account"""
  userIdentificationCode: String
  stepId: ID
  clientMutationId: String
}

type UpdateProfilePersonalDataPayload {
  """The user who just have been updated"""
  user: User!

  """The error generated, if any."""
  errorCode: UpdateProfilePersonalDataErrorCode
  clientMutationId: String
}

input UpdateProfilePublicDataInput {
  """
  (ROLE_SUPER_ADMIN only) the user to update, if not provided the viewer is updated.
  """
  userId: ID

  """Your username"""
  username: String!

  """Your user type"""
  userType: ID

  """Your biography"""
  biography: String

  """Your neighborhood"""
  neighborhood: String

  """Your website"""
  websiteUrl: URI

  """Your linkedIn"""
  linkedInUrl: URI

  """Your facebook"""
  facebookUrl: URI

  """Your twitter"""
  twitterUrl: URI

  """Your instagram"""
  instagramUrl: URI

  """Whether or not this user profile page is indexed."""
  profilePageIndexed: Boolean

  """Current media id"""
  media: ID
  clientMutationId: String
}

type UpdateProfilePublicDataPayload {
  """The user who just have been updated"""
  user: User!
  clientMutationId: String
}

input UpdateProjectInput {
  """The project's ID"""
  id: ID!

  """The project's title"""
  title: String

  """The project's authors"""
  authors: [ID!]

  """The project's type"""
  projectType: String

  """The project's date of publication"""
  publishedAt: String

  """The project's themes"""
  themes: [ID]

  """The project's image"""
  cover: ID

  """The project's video"""
  video: String

  """The project's districts"""
  districts: [ID!]

  """The uuid of the locale of this project, null if none"""
  locale: ID

  """Is the project external or not"""
  isExternal: Boolean

  """The link of an external project"""
  externalLink: String

  """The number of participants in an external project"""
  externalParticipantsCount: Int

  """The number of contributions in an external project"""
  externalContributionsCount: Int

  """The number of votes in an external project"""
  externalVotesCount: Int

  """The project address, geocoded by google"""
  address: String
  clientMutationId: String
}

type UpdateProjectPayload {
  """The created project"""
  project: Project
  clientMutationId: String
}

"""Available errors for an `updateProjectSlug` mutation."""
enum UpdateProjectSlugErrorCode {
  """No project found for the given id."""
  PROJECT_NOT_FOUND
}

input UpdateProjectSlugInput {
  """The project id."""
  projectId: ID!

  """The slug to update."""
  slug: String!
  clientMutationId: String
}

type UpdateProjectSlugPayload {
  """The updated project."""
  project: Project

  """Available errors for updateProjectSlug mutation."""
  errorCode: UpdateProjectSlugErrorCode
  clientMutationId: String
}

input UpdateProposalFormInput {
  title: String
  description: HTML

  """Is the description using Jodit Wysiwyg."""
  descriptionUsingJoditWysiwyg: Boolean
  summaryHelpText: String
  illustrationHelpText: String
  usingThemes: Boolean
  themeMandatory: Boolean
  themeHelpText: String
  usingDistrict: Boolean
  districtMandatory: Boolean
  commentable: Boolean
  costable: Boolean
  districtHelpText: String
  usingCategories: Boolean
  categoryMandatory: Boolean
  categoryHelpText: String
  usingAddress: Boolean
  proposalInAZoneRequired: Boolean
  titleHelpText: String
  descriptionHelpText: String
  addressHelpText: String

  """the json of the googleMapsAddress"""
  mapCenter: String
  zoomMap: Int
  categories: [ProposalCategoryInput!]
  districts: [DistrictInput!]
  questions: [QuestionnaireAbstractQuestionInput!]
  allowAknowledge: Boolean

  """Proposal form is type of Proposal or Question"""
  objectType: ProposalFormObjectType

  """Proposal form using description field"""
  usingDescription: Boolean

  """Proposal form using illustration field"""
  usingIllustration: Boolean

  """Proposal form using summary field"""
  usingSummary: Boolean
  suggestingSimilarProposals: Boolean

  """Proposal form is description field is mandatory or not"""
  descriptionMandatory: Boolean

  """can the viewer send a contact message to the proposals author"""
  canContact: Boolean

  """can the viewer see the proposals as a GRID"""
  isGridViewEnabled: Boolean

  """can the viewer see the proposals as a LIST"""
  isListViewEnabled: Boolean

  """can the viewer see the proposals as a MAP"""
  isMapViewEnabled: Boolean

  """Can proposal contain web site url"""
  usingWebPage: Boolean! = false

  """Can proposal contain facebook url"""
  usingFacebook: Boolean! = false

  """Can proposal contain twitter url"""
  usingTwitter: Boolean! = false

  """Can proposal contain instagram url"""
  usingInstagram: Boolean! = false

  """Can proposal contain youtube url"""
  usingYoutube: Boolean! = false

  """Can proposal contain linkedin url"""
  usingLinkedIn: Boolean! = false
  proposalFormId: ID!
  clientMutationId: String
}

input UpdateProposalFormNotificationsConfigurationInput {
  proposalFormId: ID!
  onCreate: Boolean!
  onUpdate: Boolean!
  onDelete: Boolean!
  onCommentCreate: Boolean!
  onCommentUpdate: Boolean!
  onCommentDelete: Boolean!
  onProposalNewsCreate: Boolean!
  onProposalNewsUpdate: Boolean!
  onProposalNewsDelete: Boolean!
  email: Email
  clientMutationId: String
}

type UpdateProposalFormNotificationsConfigurationPayload {
  proposalForm: ProposalForm!
  clientMutationId: String
}

type UpdateProposalFormPayload {
  proposalForm: ProposalForm!
  clientMutationId: String
}

input UpdateProposalFusionInput {
  """The proposal to update."""
  proposalId: ID!

  """Proposal ids that are merged."""
  fromProposals: [ID!]!

  """Proposal title for newly created proposal"""
  title: String

  """Proposal description for newly created proposal"""
  description: String
  clientMutationId: String
}

type UpdateProposalFusionPayload {
  """The updated proposal"""
  proposal: Proposal

  """The proposals that have been removed from the fusion."""
  removedMergedFrom: [Proposal]!
  clientMutationId: String
}

input UpdateProposalIllustrationInput {
  """The id of the proposal to update social networks."""
  proposalId: ID!

  """The media id to illustrate, use null to delete an existing media."""
  media: ID
  clientMutationId: String
}

type UpdateProposalIllustrationPayload {
  """The proposal to update."""
  proposal: Proposal

  """An unsuccessful mutation will return an error message"""
  errorCode: ProposalIllustrationErrorCode
  clientMutationId: String
}

input UpdateProposalNewsInput {
  """The Node ID of the proposal news."""
  postId: ID!
  translations: [NewsTranslationInput!]!

  """Current media id"""
  media: ID

  """Is the body using Jodit Wysiwyg."""
  bodyUsingJoditWysiwyg: Boolean
  clientMutationId: String
}

type UpdateProposalNewsPayload {
  """The post to update."""
  proposalPost: Post

  """An unsuccessful mutation will return an error message"""
  errorCode: ProposalNewsErrorCode
  clientMutationId: String
}

input UpdateProposalSocialNetworksInput {
  """Link of Web page."""
  webPageUrl: URI

  """Link of Facebook page."""
  facebookUrl: URI

  """Link of Twitter page."""
  twitterUrl: URI

  """Link of Instagram page."""
  instagramUrl: URI

  """Link of LinkedIn profile."""
  linkedInUrl: URI

  """Link of Youtube channel."""
  youtubeUrl: URI

  """The id of the proposal to update social networks."""
  proposalId: ID!
  clientMutationId: String
}

type UpdateProposalSocialNetworksPayload {
  """The proposal to update."""
  proposal: Proposal

  """An unsuccessful mutation will return an error message"""
  errorCode: ProposalSocialNetworksErrorCode
  clientMutationId: String
}

"""Available errors on UpdateProposalStepPaperVoteCounter mutation."""
enum UpdateProposalStepPaperVoteCounterErrorCode {
  """The proposal does not exist."""
  PROPOSAL_NOT_FOUND

  """The step does not exist or is neither a collect nor selection step."""
  STEP_NOT_FOUND

  """The step is not votable."""
  STEP_NOT_VOTABLE
}

input UpdateProposalStepPaperVoteCounterInput {
  """ID of the proposal to update votes."""
  proposal: ID!

  """ID of the step where the proposal receives votes."""
  step: ID!

  """Count of votes received by the proposal in the step."""
  totalCount: Int!

  """Amount of points received by the proposal in the step."""
  totalPointsCount: Int!
  clientMutationId: String
}

type UpdateProposalStepPaperVoteCounterPayload {
  """If successful, the updated proposal."""
  proposal: Proposal

  """The error, if any."""
  errorCode: UpdateProposalStepPaperVoteCounterErrorCode
  clientMutationId: String
}

input UpdateProposalVotesInput {
  """The step."""
  step: ID!

  """The votes."""
  votes: [VoteInput!]!
  clientMutationId: String
}

type UpdateProposalVotesPayload {
  step: ProposalStep!
  clientMutationId: String
}

input UpdateQuestionnaireConfigurationInput {
  """The new title of the questionnaire."""
  title: String

  """The new description of the questionnaire."""
  description: HTML

  """Is the description using Jodit Wysiwyg."""
  descriptionUsingJoditWysiwyg: Boolean

  """The new list of available questions for this questionnaire"""
  questions: [QuestionnaireAbstractQuestionInput!]
  questionnaireId: ID!
  clientMutationId: String
}

type UpdateQuestionnaireConfigurationPayload {
  questionnaire: Questionnaire
  clientMutationId: String
}

input UpdateQuestionnaireNotificationConfigurationInput {
  """The questionnaire id."""
  questionnaireId: ID!

  """The email that will be used to send notification"""
  email: Email

  """Notify when a response is created for this questionnaire"""
  onQuestionnaireReplyCreate: Boolean!

  """Notify when a response is updated for this questionnaire"""
  onQuestionnaireReplyUpdate: Boolean!

  """Notify when a response is deleted for this questionnaire"""
  onQuestionnaireReplyDelete: Boolean!
  clientMutationId: String
}

type UpdateQuestionnaireNotificationConfigurationPayload {
  """The updated questionnaire."""
  questionnaire: Questionnaire!
  clientMutationId: String
}

input UpdateQuestionnaireParametersInput {
  questionnaireId: ID!
  acknowledgeReplies: Boolean
  anonymousAllowed: Boolean
  multipleRepliesAllowed: Boolean
  type: QuestionnaireType!
  clientMutationId: String
}

type UpdateQuestionnaireParametersPayload {
  questionnaire: Questionnaire
  clientMutationId: String
}

input UpdateQuestionnaireStepInput {
  """The questionnaire linked to the step."""
  questionnaire: ID!

  """The step ID to update."""
  stepId: ID!

  """The step label."""
  label: String!

  """The step description."""
  body: String

  """When the step start."""
  startAt: DateTime

  """When the step end."""
  endAt: DateTime
  timeless: Boolean

  """Whether or not the step is enabled."""
  isEnabled: Boolean!

  """Step metadescription."""
  metaDescription: DateTime

  """Step custom code."""
  customCode: HTML

  """Step footer code."""
  footer: HTML

  """Requirements to answer the questionnaire."""
  requirements: [StepRequirementInput!]!

  """Reasons to require these requirements."""
  requirementsReason: String

  """
  If anonymous participation is allowed whether or not we collect participants email.
  """
  collectParticipantsEmail: Boolean

  """Wether or not anonymous user can participate."""
  isAnonymousParticipationAllowed: Boolean
  clientMutationId: String
}

type UpdateQuestionnaireStepPayload {
  """The updated step."""
  questionnaireStep: QuestionnaireStep!
  clientMutationId: String
}

input UpdateRedirectIOProjectIdInput {
  """The project ID used for the project."""
  projectId: ID!
  clientMutationId: String
}

type UpdateRedirectIOProjectIdPayload {
  """The saved project key."""
  projectId: String
  clientMutationId: String
}

input UpdateRegistrationFormCommunicationInput {
  translations: [RegistrationFormCommunicationInput!]
  topTextDisplayed: Boolean
  bottomTextDisplayed: Boolean

  """Is the topText using Jodit Wysiwyg."""
  topTextUsingJoditWysiwyg: Boolean

  """Is the bottomText using Jodit Wysiwyg."""
  bottomTextUsingJoditWysiwyg: Boolean
  clientMutationId: String
}

type UpdateRegistrationFormCommunicationPayload {
  registrationForm: RegistrationForm
  clientMutationId: String
}

input UpdateRegistrationFormQuestionsInput {
  questions: [QuestionnaireAbstractQuestionInput!]
  clientMutationId: String
}

type UpdateRegistrationFormQuestionsPayload {
  registrationForm: RegistrationForm
  clientMutationId: String
}

input UpdateRegistrationPageInput {
  """The customcode of the contact page."""
  customcode: String
  clientMutationId: String
}

type UpdateRegistrationPagePayload {
  """The customcode of the Registration page."""
  customcode: String
  clientMutationId: String
}

input UpdateRequirementInput {
  """The Node ID of the requirement to modify."""
  requirement: ID!

  """The updated value of the requirement."""
  value: Boolean!
  clientMutationId: String
}

type UpdateRequirementPayload {
  viewer: User
  requirement: Requirement
  clientMutationId: String
}

input UpdateSelectionStepInput {
  """The step ID to update."""
  stepId: ID!

  """The step label."""
  label: String!

  """The step description."""
  body: String

  """Is the body using Jodit Wysiwyg."""
  bodyUsingJoditWysiwyg: Boolean!

  """When the step start."""
  startAt: DateTime

  """When the step end."""
  endAt: DateTime
  timeless: Boolean

  """Whether or not the step is enabled."""
  isEnabled: Boolean!

  """Step metadescription."""
  metaDescription: DateTime

  """Step custom code."""
  customCode: HTML

  """Step footer code."""
  footer: HTML

  """Requirements to answer the questionnaire."""
  requirements: [StepRequirementInput!]!

  """Reasons to require these requirements."""
  requirementsReason: String

  """
  If anonymous participation is allowed whether or not we collect participants email.
  """
  collectParticipantsEmail: Boolean

  """Wether or not anonymous user can participate."""
  isAnonymousParticipationAllowed: Boolean

  """
  Whether or not authors can add news on proposals selected in this step.
  """
  allowAuthorsToAddNews: Boolean!

  """Default way to sort proposals."""
  defaultSort: ProposalSort

  """the default view : GRID, LIST or MAP"""
  mainView: MainView
  statuses: [StepStatusInput]
  defaultStatus: ID
  votesHelpText: String

  """Maximum number of votes a user can submit."""
  votesLimit: Int

  """
  Minimum number of votes a user must submit for his votes to be counted.
  """
  votesMin: Int

  """If enabled, allow voters to order their votes by point"""
  votesRanking: Boolean!
  voteThreshold: Int

  """If not null, the date to display vote count"""
  publishedVoteDate: DateTime
  voteType: ProposalStepVoteType
  budget: Float

  """Whether or not sms vote is enabled."""
  isProposalSmsVoteEnabled: Boolean

  """Whether or not secret ballot is enable"""
  secretBallot: Boolean
  private: Boolean

  """
  Determines how long it will take for the proposal to be archived, coupled with proposalArchivedUnitTime.
  """
  proposalArchivedTime: Int!

  """
  The unit chosen to set the archived duration can be either MONTHS or DAYS
  """
  proposalArchivedUnitTime: ProposalArchivedUnitTime!

  """Set this step as realisation step."""
  allowingProgressSteps: Boolean!
  clientMutationId: String
}

type UpdateSelectionStepPayload {
  """The updated step."""
  selectionStep: SelectionStep!

  """
  Whether or not we had to disable proposal step split view if vote settings were not compatible.
  """
  proposalStepSplitViewWasDisabled: Boolean!
  clientMutationId: String
}

input UpdateShieldAdminFormInput {
  """Enable or disable shield mode."""
  shieldMode: Boolean!

  """introduction"""
  translations: [UpdateShieldAdminFormTranslationInput!]

  """The image id to associate for the shield image."""
  mediaId: ID
  clientMutationId: String
}

type UpdateShieldAdminFormPayload {
  """The shield admin form."""
  shieldAdminForm: ShieldAdminForm!
  clientMutationId: String
}

input UpdateShieldAdminFormTranslationInput {
  """The locale of the translation"""
  locale: String!

  """Introduction text to show on shield page."""
  introduction: HTML
}

"""Available errors for an `updateSiteParameter` mutation."""
enum UpdateSiteParameterErrorCode {
  """The given value is invalid."""
  INVALID_VALUE
}

input UpdateSiteParameterInput {
  """The keyname of the SiteParameter to be updated"""
  keyname: UpdateSiteParameterKeyname!

  """The new value fo the SiteParameter."""
  value: String!

  """The locale of the new value, if relevant."""
  locale: String
  clientMutationId: String
}

"""Available keynames for an `updateSiteParameter` mutation."""
enum UpdateSiteParameterKeyname {
  """Give the user the `ROLE_USER` role."""
  RECEIVE_ADDRESS

  """Give the user the `ROLE_ADMIN` role."""
  SEND_NAME
}

type UpdateSiteParameterPayload {
  """The updated SiteParameter."""
  siteParameter: SiteParameter

  """The error generated, if any."""
  errorCode: UpdateSiteParameterErrorCode
  clientMutationId: String
}

"""Available errors for an `updateTwilioVerifyService` mutation."""
enum UpdateTwilioVerifyServiceErrorCode {
  """Error occured while calling twilio API."""
  TWILIO_API_ERROR
}

input UpdateTwilioVerifyServiceInput {
  """The updated service name."""
  serviceName: String!
  clientMutationId: String
}

type UpdateTwilioVerifyServicePayload {
  """The updated service name."""
  serviceName: String

  """The error code, if failing."""
  errorCode: UpdateTwilioVerifyServiceErrorCode
  clientMutationId: String
}

input UpdateUserAccountInput {
  userId: ID!

  """Unattended roles as array."""
  roles: [UserRole]
  locked: Boolean
  vip: Boolean
  enabled: Boolean
  subscribedToProposalNews: Boolean
  clientMutationId: String
}

type UpdateUserAccountPayload {
  user: User!
  clientMutationId: String
}

"""Available errors on user email related mutations."""
enum UpdateUserEmailErrorCode {
  """You must specify your password to update your email."""
  SPECIFY_PASSWORD

  """Already used email."""
  ALREADY_USED_EMAIL

  """Unauthorized email domain."""
  UNAUTHORIZED_EMAIL_DOMAIN

  """Rate limit reached."""
  RATE_LIMIT_REACHED
}

input UpdateUserInput {
  """
  (ROLE_SUPER_ADMIN only) the user to update, if not provided the viewer is updated.
  """
  userId: ID!

  """Your firstname"""
  firstname: String

  """Your lastname"""
  lastname: String

  """Your gender"""
  gender: GenderValue

  """Your phone number"""
  phone: String

  """Your address, geocoded by google"""
  postalAddress: String

  """Your address"""
  address: String

  """Your complementary address"""
  address2: String

  """Your city"""
  city: String

  """Your zipcode"""
  zipCode: String

  """Your date of birth"""
  dateOfBirth: String

  """Is your phone confirmed ?"""
  phoneConfirmed: Boolean

  """Your email"""
  email: String

  """Your birth place"""
  birthPlace: String

  """Your identification code to verify your account"""
  userIdentificationCode: String
  stepId: ID

  """Your username"""
  username: String!

  """Your user type"""
  userType: ID

  """Your biography"""
  biography: String

  """Your neighborhood"""
  neighborhood: String

  """Your website"""
  websiteUrl: URI

  """Your linkedIn"""
  linkedInUrl: URI

  """Your facebook"""
  facebookUrl: URI

  """Your twitter"""
  twitterUrl: URI

  """Your instagram"""
  instagramUrl: URI

  """Whether or not this user profile page is indexed."""
  profilePageIndexed: Boolean

  """Current media id"""
  media: ID

  """Unattended roles as array."""
  roles: [UserRole]!
  locked: Boolean
  vip: Boolean
  enabled: Boolean
  subscribedToProposalNews: Boolean
  clientMutationId: String
}

type UpdateUserPayload {
  """The user who just have been updated"""
  user: User
  validationErrors: String
  clientMutationId: String
}

input UpdateUserReplyInput {
  """The id of the reply"""
  replyId: ID!

  """The responses to the questionnaire questions"""
  responses: [ResponseInput!]!

  """Anonymous or not."""
  private: Boolean

  """If true will create a draft reply."""
  draft: Boolean! = false
  clientMutationId: String
}

type UpdateUserReplyPayload {
  """Update a reply"""
  reply: UserReply
  clientMutationId: String
}

input UpdateUsernameInput {
  username: String
  clientMutationId: String
}

type UpdateUsernamePayload {
  """The viewer"""
  viewer: User!
  clientMutationId: String
}

input UpdateVotesVisibilityInput {
  """SelectionStep global ID."""
  stepId: ID!

  """Wether the votes should be anonymous or not."""
  anonymous: Boolean!
  clientMutationId: String
}

type UpdateVotesVisibilityPayload {
  votes: [ProposalUserVote]!
  clientMutationId: String
}

"""A user is an individual's account."""
type User implements Node & UniformResourceLocatable & ProjectOwner & PostOwner & QuestionnaireOwner & EventOwner & ProposalFormOwner & MailingListOwner & EmailingCampaignOwner & UserIdentificationCodeListOwner & Contributor & ConsultationOwner & Author {
  """Expose Primary Key, do not use it, except for testing purpose."""
  _id: ID!

  """Author ID"""
  id: ID!

  """Author username"""
  username: String

  """The user profile URL."""
  url: URI!

  """Get all projects that the user owns."""
  projects(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """
    Array of viewer's affiliation options for projects returned from the connection.
                                For example, OWNER will include only projects that the current viewer owns.
                                
    """
    affiliations: [ProjectAffiliation!]

    """the search query"""
    query: String

    """The search fields to search a project"""
    searchFields: [ProjectSearchFields]

    """The ordering direction for posts"""
    orderBy: ProjectOwnerProjectOrder = {direction: DESC, field: PUBLISHED_AT}

    """
    ID of a Status to filter by. If non-null, filter projects by statuses.
    """
    status: ID
  ): ProjectConnection!

  """Get all posts that the user owns."""
  posts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """
    Array of viewer's affiliation options for posts returned from the connection.
                                For example, OWNER will include only posts that the current viewer owns.
                                
    """
    affiliations: [PostAffiliation!]

    """the search query"""
    query: String

    """The ordering direction for posts"""
    orderBy: PostOrder = {field: UPDATED_AT, direction: DESC}
  ): PostConnection!

  """Get all questionnaires that the user owns."""
  questionnaires(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """
    Array of viewer's affiliation options for questionnaires returned from the connection.
                                For example, OWNER will include only questionnaires that the current viewer owns.
                                
    """
    affiliations: [QuestionnaireAffiliation!]

    """the search query"""
    query: String

    """The ordering direction for questionnaires"""
    orderBy: QuestionnaireOrder = {field: CREATED_AT, direction: DESC}

    """Filter by available questionnaires"""
    availableOnly: Boolean

    """Filter by types."""
    types: [QuestionnaireType]
  ): QuestionnaireConnection!

  """Get all events that the user owns."""
  events(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """
    Array of viewer's affiliation options for events returned from the connection.
                                For example, OWNER will include only events that the current viewer owns.
                                
    """
    affiliations: [EventAffiliation!]

    """the search query"""
    search: String

    """The ordering direction for events."""
    orderBy: EventOrder = {field: START_AT, direction: DESC}

    """Filter events by a given status."""
    status: EventStatus = null

    """only fetch where user is author"""
    onlyWhenAuthor: Boolean = false
  ): EventConnection!

  """Get all `ProposalForms` that the user owns."""
  proposalForms(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """Only available proposalForms will be returned."""
    availableOnly: Boolean = false

    """
    Array of viewer's affiliation options for proposalForms returned from the connection.
                                For example, OWNER will include only proposalForms that the current viewer owns.
                                
    """
    affiliations: [ProposalFormAffiliation!]

    """the search query"""
    query: String

    """The ordering direction for proposalForms"""
    orderBy: ProposalFormOrder = {field: CREATED_AT, direction: DESC}
  ): ProposalFormConnection!

  """Get all mailingLists that the user owns."""
  mailingLists(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """
    Array of viewer's affiliation options for mailing campaigns returned from
                                the connection. For example, OWNER will include only mailing lists that the
                                current viewer owns.
                                
    """
    affiliations: [MailingListAffiliation!]

    """If provided, filter lists by name"""
    term: String
  ): MailingListConnection!

  """Get all emailing campaigns."""
  emailingCampaigns(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """optional filter by status"""
    status: EmailingCampaignStatusFilter

    """The ordering direction for sending date"""
    orderBy: EmailingCampaignOrder = {field: SEND_AT, direction: DESC}

    """
    Array of viewer's affiliation options for mailing campaigns returned from
                                the connection. For example, OWNER will include only mailing lists that the
                                current viewer owns.
                                
    """
    affiliations: [EmailingCampaignAffiliation!]

    """If provided, filter campaigns by name"""
    term: String
  ): EmailingCampaignConnection!

  """Get all userIdentificationCodeLists"""
  userIdentificationCodeLists(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
  ): UserIdentificationCodeListConnection!

  """Get all consultations."""
  consultations(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """
    If omitted, returns all consultations. If provided, returns the consultation of the particular id.
    """
    id: ID

    """Filter consultation by a given query."""
    query: String

    """Order consultation by a given criterias."""
    orderBy: ConsultationOrder = {field: POSITION, direction: ASC}
  ): ConsultationConnection!

  """Whether or not this author is the authenticated user."""
  isViewer: Boolean!

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime

  """A URL pointing to the user's Facebook account."""
  facebookUrl: URI

  """A URL pointing to the user's Twitter account."""
  twitterUrl: URI

  """A URL pointing to the user's LinkedIn account."""
  linkedInUrl: URI

  """A URL pointing to the user's public website/blog."""
  websiteUrl: URI

  """The user's public profile biography."""
  biography: String

  """Identifies the date and time when this user account was deleted."""
  deletedAccountAt: DateTime

  """A URL pointing to the user's Instagram account."""
  instagramUrl: URI

  """The type of the person."""
  userType: UserType

  """The responses answered by user."""
  responses(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
  ): ResponseConnection!

  """The user's personal email."""
  email: String

  """Whether or not this user consent internal communication."""
  consentInternalCommunication: Boolean

  """The author's public avatar URL."""
  avatarUrl: URI

  """Whether or not this user has a confirmed account."""
  enabled: Boolean!

  """The user's public profile name."""
  displayName: String!

  """The user's slug (unique)."""
  slug: String!

  """The user's public avatar file."""
  media: Media
  isProjectAdmin: Boolean!

  """The user's admin edit url"""
  adminUrl: URI!

  """Whether or not this user is a VIP."""
  vip: Boolean!

  """The user's account confirmation date."""
  confirmedAccountAt: DateTime

  """Last connection of the user."""
  lastLogin: DateTime

  """A user notifications preferences"""
  notificationsConfiguration: UserNotificationsConfiguration!
  locked: Boolean!
  phoneConfirmed: Boolean!
  phoneConfirmationSentAt: DateTime
  gender: GenderValue
  firstname: String
  lastname: String
  dateOfBirth: DateTime

  """Unattended roles as array."""
  roles: [UserRole!]!

  """Array of roles converted and translated to string."""
  rolesText: String

  """Is the personal archive of the user has been deleted"""
  isArchiveDeleted: Boolean!

  """Is the personal archive of the user is ready?"""
  isArchiveReady: Boolean!

  """
  Is the personal archive of the user is being asked for the first time?
  """
  firstArchive: Boolean!
  postalAddress: GoogleMapsAddress
  address: String
  address2: String
  zipCode: String
  city: String
  phone: String
  facebookId: String
  samlId: String
  franceConnectId: String

  """Get all sources of the user"""
  sources(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
  ): SourceConnection!

  """Get the count of votes made by the user"""
  opinionVotesCount: Int!
  argumentVotesCount: Int!

  """Get all proposals of the user."""
  proposals(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
  ): ProposalConnection!
  proposalVotesCount: Int!

  """Get all comment votes of the user."""
  commentVotes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
  ): CommentVoteConnection!

  """
  Provisional number of contributions who will be totally deleted if the user chose to delete his account.
  """
  contributionsToDeleteCount: Int!

  """A list of replies associated to the user."""
  replies(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
  ): ReplyConnection!

  """Get all comments of the user."""
  comments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
  ): CommentConnection!

  """Whether or not this user consent external communication."""
  consentExternalCommunication: Boolean!

  """Array of proposals followed by current user."""
  followingProposals(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 32

    """Ordering options for followers returning from the connection"""
    orderBy: String
  ): ProposalConnection!

  """Array of opinions followed by current user."""
  followingOpinions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """Ordering options for followers returning from the connection"""
    orderBy: String
  ): OpinionConnection!

  """Array of opinions by current user."""
  opinions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
  ): OpinionConnection!

  """Total of contributions count"""
  contributionsCount: Int!

  """Whether or not this user profile page is indexed."""
  profilePageIndexed: Boolean!

  """Your localisation"""
  neighborhood: String
  proposalVotes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
    orderBy: ProposalVoteOrder = {field: PUBLISHED_AT, direction: DESC}
    stepId: ID

    """(ROLE_SUPER_ADMIN only) Select also unpublished votes."""
    includeUnpublished: Boolean = false
  ): ProposalVoteConnection!

  """Get all medias the user has published."""
  medias: [Media]!

  """Get all votes of the user."""
  votes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """The id of the contribuable entity (Project, Step)"""
    contribuableId: ID

    """Get only accounted votes."""
    onlyAccounted: Boolean = true
  ): VoteConnection!

  """Get all groups where the user is."""
  groups(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
  ): GroupConnection!

  """Get all reports the user has done."""
  reports(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
  ): ReportConnection!

  """Return the user's contributions of the type requested."""
  contributions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """Ordering options for contributions returned from the connection."""
    orderBy: ContributionOrder = {field: CREATED_AT, direction: DESC}

    """Type of contribution requested"""
    type: ContributionType

    """Include the trashed contributions if its true"""
    includeTrashed: Boolean = false

    """The id of the contribuable entity (Project, Consultation, Step)"""
    contribuableId: ID
  ): ContributionConnection!

  """Is user subscribed to the proposal news posted by the author ?"""
  isSubscribedToProposalNews: Boolean!

  """Is user subscribed to the newsletter ?"""
  isSubscribedToNewsLetter: Boolean!

  """When the user subscribed to the newsletter."""
  subscribedToNewsLetterAt: DateTime

  """The new email to confirm ?"""
  newEmailToConfirm: String

  """Has the user confirmed his email address ?"""
  isEmailConfirmed: Boolean

  """When the user email confirmation was sent."""
  emailConfirmationSentAt: DateTime

  """The arguments created by user."""
  arguments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """Ordering options for contributions returned from the connection."""
    orderBy: ContributionOrder = {field: CREATED_AT, direction: DESC}

    """Include the trashed contributions if its true"""
    includeTrashed: Boolean = false

    """Include the unpublished contributions if its true"""
    includeUnpublished: Boolean = false
  ): ArgumentConnection!

  """The debate arguments created by user."""
  debateArguments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """Ordering options for contributions returned from the connection."""
    orderBy: DebateArgumentOrder = {field: PUBLISHED_AT, direction: DESC}
  ): DebateArgumentConnection!

  """The debate votes of the user."""
  debateVotes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
  ): DebateVoteConnection!
  isAdmin: Boolean!
  isSuperAdmin: Boolean!
  isOnlyProjectAdmin: Boolean!
  isAdminOrganization: Boolean!
  isOrganizationMember: Boolean!
  isMediator: Boolean!

  """Get any connection attempt"""
  connectionAttempt(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """Email of the user"""
    email: String

    """
    If true, returns only successful connection attempts /!\ only works with email, not userId
    """
    success: Boolean
  ): UserConnectionAttemptConnection

  """The opinion version created by user."""
  opinionVersions(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
  ): VersionConnection!

  """The event in awaiting or refused status of user."""
  awaitingOrRefusedEvents(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
  ): EventConnection

  """Get proposals assigned to the supervisor."""
  supervisedProposals(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
  ): ProposalConnection

  """Locale chosen by the user"""
  locale: String

  """The event in awaiting status."""
  adminAwaitingEvents: Int!
  birthPlace: String
  isFranceConnectAccount: Boolean
  hasPassword: Boolean

  """The user's identification code value"""
  userIdentificationCode: String

  """The user's openidId value"""
  openidId: String

  """The organizations of which user is a member"""
  organizations: [Organization]

  """
  The user (who has already participated / is participating) in a questionnaire or other type of interaction
  """
  participant: Participant
  projectsMediator(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
  ): ProjectConnection

  """
  A user that can access Evaluations page is a user that is assigned to at least
  one proposal, as analyst, supervisor or decision marker
  """
  isEvaluerOnNewTool: Boolean!
}

"""A connection to a list of items."""
type UserConnection {
  """Identifies the total count of items in the connection."""
  totalCount: Int!

  """
  Identifies the total count of anonymous items in the connection. (Not fetched from connection)
  """
  anonymousCount: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [UserEdge]
}

"""A user connection attempt"""
type UserConnectionAttempt {
  """The ID of an object"""
  id: ID!

  """Identifies the user if successfully logged in"""
  user: User

  """Identifies the date and time when the object was created."""
  datetime: DateTime!

  """The email used for the connection attempt"""
  email: String!

  """The IP Address"""
  ipAddress: String!
}

"""A connection to a list of items."""
type UserConnectionAttemptConnection {
  totalCount: Int

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [UserConnectionAttemptEdge]
}

"""An edge in a connection."""
type UserConnectionAttemptEdge {
  """The item at the end of the edge."""
  node: UserConnectionAttempt!

  """A cursor for use in pagination."""
  cursor: String!
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

"""A business-level error."""
type UserError {
  """The reason which caused the error."""
  message: String

  """Path to input field which caused the error."""
  field: [String!]
}

"""A list of userIdentificationCodes."""
type UserIdentificationCodeList {
  """The global id of the list."""
  id: ID!

  """The name of the list."""
  name: String!

  """The count of codes in the list."""
  codesCount: Int!

  """The count of codes in the list already used."""
  alreadyUsedCount: Int!
}

"""A connection to a list of items."""
type UserIdentificationCodeListConnection {
  totalCount: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [UserIdentificationCodeListEdge]
}

"""An edge in a connection."""
type UserIdentificationCodeListEdge {
  """The item at the end of the edge."""
  node: UserIdentificationCodeList!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Represent an owner of an UserIdentificationCodeList."""
interface UserIdentificationCodeListOwner {
  """Get all userIdentificationCodeLists"""
  userIdentificationCodeLists(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
  ): UserIdentificationCodeListConnection!
}

"""A user invitation availability."""
type UserInvitationAvailability {
  """The targeted email to be checked for availability"""
  email: String!

  """Is the email used in a user account."""
  availableForUser: Boolean!

  """Is the email used in an invitation that has not expired."""
  availableForInvitation: Boolean!
}

"""A connection to a list of items."""
type UserInvitationsAvailabilityConnection {
  totalCount: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [UserInvitationsAvailabilityEdge]
}

"""An edge in a connection."""
type UserInvitationsAvailabilityEdge {
  """The item at the end of the edge."""
  node: UserInvitationAvailability

  """A cursor for use in pagination."""
  cursor: String!
}

"""A user invitation"""
type UserInvite {
  """The ID of an object."""
  id: ID!

  """Get the invited email"""
  email: String!

  """Will the invited user be an admin?"""
  isAdmin: Boolean!

  """Will the invited user be a project admin?"""
  isProjectAdmin: Boolean!

  """The invitation status"""
  status: UserInviteStatus!

  """The groups associated to the invite"""
  groups: GroupConnection!

  """Number of relaunch for this invitation."""
  relaunchCount: Int!
}

"""A connection to a list of items."""
type UserInviteConnection {
  totalCount: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [UserInviteEdge]
}

"""An edge in a connection."""
type UserInviteEdge {
  """The item at the end of the edge."""
  node: UserInvite

  """A cursor for use in pagination."""
  cursor: String!
}

"""The invitation status"""
enum UserInviteStatus {
  """The invitation is still pending."""
  PENDING

  """The invitation has expired."""
  EXPIRED

  """Sending the invitation failed."""
  FAILED

  """The invitation has been accepted."""
  ACCEPTED
}

"""A user's notifications configuration"""
type UserNotificationsConfiguration {
  """
  A boolean representing if the user wants to receive notifications by mail when someone commented his proposal
  """
  onProposalCommentMail: Boolean!
}

"""User and NotRegistered"""
union UserOrNotRegistered = User | NotRegistered

"""Ways in which lists of users can be ordered upon return."""
input UserOrder {
  """The field to order users by."""
  field: UserOrderField! = CREATED_AT

  """The ordering direction."""
  direction: OrderDirection! = DESC
}

"""Properties by which users connections can be ordered"""
enum UserOrderField {
  """Allows ordering a list of users by when they were created."""
  CREATED_AT

  """Allowing ordering a list of user by their activity."""
  ACTIVITY
}

"""Represents a user answer to a questionnaire."""
type UserReply implements Node & Reply & Publishable & Contribution & Draftable {
  """The ID of an object"""
  id: ID!

  """Whether or not the entity is published."""
  published: Boolean!

  """Identifies when the entity can no more be published."""
  publishableUntil: DateTime

  """Identifies when the entity was published at."""
  publishedAt: DateTime

  """Reason that the entity is not published."""
  notPublishedReason: NotPublishedReason

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!

  """Whether or not the entity is a draft."""
  draft: Boolean!

  """Identifies when the entity was undraft at."""
  undraftAt: DateTime

  """The responses of the reply."""
  responses: [Response]!

  """The author of the Reply."""
  author: User!

  """
  Return the related contribution if the contribution is related to another.
  """
  related: Contribution

  """The url of the reply."""
  url: URI!

  """Identifies the form where the contribution was submitted."""
  questionnaire: Questionnaire!

  """The admin url of the reply."""
  adminUrl: URI

  """The status of the reply."""
  status: ReplyStatus

  """Whether or not the current viewer can delete the reply."""
  viewerCanDelete: Boolean!

  """Whether or not the current viewer can update the reply."""
  viewerCanUpdate: Boolean!

  """Whether or not the reply is private."""
  private: Boolean!

  """The reply status."""
  publicationStatus: ReplyPublicationStatus!
}

"""4 possible values"""
enum UserRole {
  """Represents a user."""
  ROLE_USER

  """Represents a project admin."""
  ROLE_PROJECT_ADMIN

  """Represents an administrator."""
  ROLE_ADMIN

  """Represents Cap Collectif account."""
  ROLE_SUPER_ADMIN

  """Represents a user who can vote in behalf of offline users."""
  ROLE_MEDIATOR
}

"""A type of person"""
type UserType implements Node {
  """The id of the type."""
  id: ID!

  """The name of the type."""
  name: String!
}

"""A response"""
type ValueResponse implements Response & CivicIAAnalyzable & Node {
  """The ID of an object."""
  id: ID!

  """The question."""
  question: Question!

  """Identifies the reply of the response."""
  reply: Reply

  """True if the viewer has starred the response."""
  hasViewerStarred: Boolean!

  """The response value which can be a string or a JSON."""
  value: String

  """The response value formatted."""
  formattedValue: String

  """Detected category by civicIA."""
  iaCategory: String

  """Detected readability by civicIA. The higher the more complex."""
  iaReadability: Float

  """Detected sentiment by civicIA."""
  iaSentiment: CivicIASentiment
}

"""Available errors for an `verifySmsVotePhoneNumber` mutation."""
enum VerifySmsVotePhoneNumberErrorCode {
  """The given code is expired."""
  CODE_EXPIRED

  """The given code is not valid."""
  CODE_NOT_VALID

  """An error occured while calling twilio api."""
  TWILIO_API_ERROR
}

input VerifySmsVotePhoneNumberInput {
  """The phone that received the code."""
  phone: String!

  """The verification code to verify the phone."""
  code: String!

  """The Node ID of the proposal to vote."""
  proposalId: ID!

  """The Node ID of the step."""
  stepId: ID!
  clientMutationId: String
}

type VerifySmsVotePhoneNumberPayload {
  errorCode: VerifySmsVotePhoneNumberErrorCode

  """The returned token to authenticate the user."""
  token: String
  clientMutationId: String
}

"""Available errors for an `verifyUserPhoneNumber` mutation."""
enum VerifyUserPhoneNumberErrorCode {
  """The given phone is already confirmed."""
  PHONE_ALREADY_CONFIRMED

  """The given given code is expired."""
  CODE_EXPIRED

  """The given code is not valid."""
  CODE_NOT_VALID

  """An error occured while calling twilio api."""
  TWILIO_API_ERROR
}

input VerifyUserPhoneNumberInput {
  """The validaton code sent by sms"""
  code: String!
  clientMutationId: String
}

type VerifyUserPhoneNumberPayload {
  """The updated User."""
  user: User

  """The error code, if failing."""
  errorCode: VerifyUserPhoneNumberErrorCode
  clientMutationId: String
}

"""A version of contribution"""
type Version implements Node & Contribution & Publishable & Trashable & UniformResourceLocatable & Sourceable & Reportable & Argumentable & ContributionWithAuthor & EditableContribution {
  """The ID of an object"""
  id: ID!
  contribuable: Boolean!
  step: ConsultationStep!

  """The sources related to the sourceable."""
  sources(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
    orderBy: SourceOrder = {field: PUBLISHED_AT, direction: DESC}
  ): SourceConnection!

  """
  The viewer unpublished sources related to the sourceable (only visible by viewer).
  """
  viewerSourcesUnpublished(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
  ): SourceConnection!

  """The available sources categories of to the sourceable."""
  availableSourceCategories: [SourceCategory]

  """Does the viewer already submitted a report ?"""
  viewerHasReport: Boolean!

  """The reportings related to the reportable."""
  reportings(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
    orderBy: ReportingOrder = {field: CREATED_AT, direction: DESC}
  ): ReportingConnection!

  """Check if a user can report"""
  viewerCanReport: Boolean!

  """The arguments related to the argumentable."""
  arguments(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
    orderBy: ArgumentOrder = {field: PUBLISHED_AT, direction: DESC}

    """If provided, returns the arguments of this particular type."""
    type: ArgumentValue

    """The connection will return the trashed results too."""
    includeTrashed: Boolean = false
  ): ArgumentConnection!

  """The unpublished arguments of to the viewer."""
  viewerArgumentsUnpublished(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100

    """If provided, returns the arguments of this particular type."""
    type: ArgumentValue
  ): ArgumentConnection

  """The author of the contribution."""
  author: User!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime

  """The opinion version's followers."""
  followers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
    orderBy: FollowerOrder = {field: FOLLOWED_AT, direction: DESC}
  ): FollowerConnection

  """The following viewer configuration."""
  viewerFollowingConfiguration: SubscriptionTypeValue

  """Either or not the viewer is following the content."""
  viewerIsFollowing: Boolean!

  """
  Return the related contribution if the contribution is related to another.
  """
  related: Contribution

  """The URL to this resource."""
  url: URI!

  """Whether or not the contribution is trashed."""
  trashed: Boolean!

  """Identifies the trashed visibility."""
  trashedStatus: TrashableStatus

  """Identifies the moment the moderator trashed the contribution."""
  trashedAt: DateTime

  """Identifies the reason why the moderator trashed the contribution."""
  trashedReason: String

  """Whether or not the entity is published."""
  published: Boolean!

  """Identifies when the entity can no more be published."""
  publishableUntil: DateTime

  """Identifies when the entity was published at."""
  publishedAt: DateTime

  """Reason that the entity is not published."""
  notPublishedReason: NotPublishedReason

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!

  """Explenation."""
  comment: HTML

  """The title of the contribution."""
  title: String!

  """The content of the contribution."""
  body: HTML!

  """The content of the contribution."""
  bodyText: HTML!
  parent: Opinion!

  """The related project."""
  project: Project

  """Is the comment using Jodit Wysiwyg."""
  commentUsingJoditWysiwyg: Boolean!
  votes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """Returns the first `n` elements from the list."""
    first: Int = 100
    orderBy: ProposalVoteOrder = {field: PUBLISHED_AT, direction: DESC}

    """Filters vote by value"""
    value: YesNoPairedVoteValue
  ): YesNoPairedVoteConnection!
  kind: String!

  """The section of the parent opinion."""
  section: Section!

  """Is the body using Jodit Wysiwyg."""
  bodyUsingJoditWysiwyg: Boolean!
  answer: Answer

  """The viewer vote."""
  viewerVote: OpinionVote
  diff: HTML
}

"""A connection to a list of items."""
type VersionConnection {
  """Identifies the total count of items in the connection."""
  totalCount: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [VersionEdge]
}

"""An edge in a connection."""
type VersionEdge {
  """The item at the end of the edge."""
  node: Version!

  """A cursor for use in pagination."""
  cursor: String!
}

"""Ways in which version connections can be ordered."""
input VersionOrder {
  """The field in which to order nodes by."""
  field: VersionOrderField!

  """The ordering direction."""
  direction: OrderDirection! = ASC
}

"""Properties by which version connections can be ordered"""
enum VersionOrderField {
  """Allows ordering a list of versions by when they were published."""
  PUBLISHED_AT

  """Allows ordering a list of versions by the number of votes it have."""
  VOTES

  """
  Allows ordering a list of versions by the number of arguments it have.
  """
  ARGUMENTS

  """Allows ordering a list of versions by the number of votes ok it have."""
  VOTES_OK

  """Allows ordering a list of versions randomly."""
  RANDOM
}

"""Entities that can be published."""
type VersionVote implements YesNoPairedVote & Publishable & Vote {
  """The ID of an object"""
  id: ID!

  """The date of the vote."""
  createdAt: DateTime!

  """The author of the contribution."""
  author: User

  """The contribution that was voted."""
  related: Contribution

  """Returns 'vote'."""
  kind: String!

  """Returns if vote is accounted or not"""
  isAccounted: Boolean!

  """The participant of the contribution."""
  participant: Participant

  """Whether or not the entity is published."""
  published: Boolean!

  """Identifies when the entity can no more be published."""
  publishableUntil: DateTime

  """Identifies when the entity was published at."""
  publishedAt: DateTime

  """Reason that the entity is not published."""
  notPublishedReason: NotPublishedReason
  value: YesNoPairedVoteValue!
}

interface Vote {
  id: ID!

  """The date of the vote."""
  createdAt: DateTime!

  """The author of the contribution."""
  author: User

  """The contribution that was voted."""
  related: Contribution

  """Returns Type of vote"""
  kind: String!

  """Returns if vote is accounted or not"""
  isAccounted: Boolean!

  """The participant of the contribution."""
  participant: Participant
}

"""A connection to a list of items."""
type VoteConnection {
  """Identifies the total count of items in the connection."""
  totalCount: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [VoteEdge]
}

"""An edge in a connection."""
type VoteEdge {
  """The item at the end of the edge."""
  node: Vote

  """A cursor for use in pagination."""
  cursor: String!
}

"""A vote"""
input VoteInput {
  """The vote id."""
  id: ID!

  """Update the vote privacy."""
  anonymous: Boolean!
}

"""Ways in which lists of votes can be ordered upon return."""
input VoteOrder {
  """The field to order votes by."""
  field: VoteOrderField! = PUBLISHED_AT

  """The ordering direction."""
  direction: OrderDirection! = DESC
}

"""Ordering options for votes returned from the connection."""
enum VoteOrderField {
  PUBLISHED_AT
  POSITION
}

"""Entities that can be published."""
interface YesNoPairedVote {
  """The ID of an object"""
  id: ID!

  """The date of the vote."""
  createdAt: DateTime!

  """The author of the contribution."""
  author: User

  """The contribution that was voted."""
  related: Contribution

  """Returns Type of vote"""
  kind: String!

  """Returns if vote is accounted or not"""
  isAccounted: Boolean!

  """The participant of the contribution."""
  participant: Participant

  """Whether or not the entity is published."""
  published: Boolean!

  """Identifies when the entity can no more be published."""
  publishableUntil: DateTime

  """Identifies when the entity was published at."""
  publishedAt: DateTime

  """Reason that the entity is not published."""
  notPublishedReason: NotPublishedReason
  value: YesNoPairedVoteValue!
}

"""A connection to a list of items."""
type YesNoPairedVoteConnection {
  totalCount: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [YesNoPairedVoteEdge]
}

"""An edge in a connection."""
type YesNoPairedVoteEdge {
  """The item at the end of the edge."""
  node: YesNoPairedVote

  """A cursor for use in pagination."""
  cursor: String!
}

"""3 possible values"""
enum YesNoPairedVoteValue {
  YES
  NO
  MITIGE
}

"""Available errors for an `updateCASSSOConfiguraton` mutation."""
enum updateCASSSOConfiguratonErrorCode {
  """No CAS configuration matching the id."""
  CONFIGURATION_NOT_FOUND
}
