// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<OpinionFollowButton /> <TestOpinionFollowButton /> should render a button to follow a proposal when viewer is not following. 1`] = `
Array [
  <div
    className="sc-bcXGCL gHoLKQ toasts-container toasts-container--top"
  />,
  <div
    className="sc-bcXGCL gHoLKQ toasts-container toasts-container--top"
  />,
  <div
    aria-controls="popover-overlay"
    aria-expanded={false}
    aria-haspopup="dialog"
    data-testid="Menu"
    disclosure={
      <Button
        className="dropdown-button custom-dropdown-button opinion__button__follow_options"
        id="opinion-follow-btn-opinion1"
        rightIcon="ARROW_DOWN_O"
        style={
          Object {
            "borderColor": "#333",
            "color": "#333",
          }
        }
        variant="secondary"
        variantColor="hierarchy"
      >
        <FormattedMessage
          id="following"
          values={Object {}}
        />
      </Button>
    }
    onClick={[Function]}
    onClickCapture={[Function]}
    onKeyDown={[Function]}
    onKeyPressCapture={[Function]}
    onKeyUp={[Function]}
    onMouseDown={[Function]}
    onMouseDownCapture={[Function]}
    placement="bottom"
    type="button"
  >
    <div
      data-testid="List"
      maxHeight="unset"
      overflow="visible"
    >
      <div
        data-testid="OptionGroup"
        onChange={[Function]}
        title={
          <Flex
            spacing={2}
            style={
              Object {
                "marginBottom": "unset",
              }
            }
          >
            <Heading
              as="h4"
              style={
                Object {
                  "fontSize": "16px",
                }
              }
            >
              to-be-notified-by-email
            </Heading>
            <Popover
              disclosure={
                <Icon
                  name="INFO"
                />
              }
              placement="top"
            >
              <Unknown>
                you-will-receive-a-summary-of-your-notifications-once-a-day
              </Unknown>
            </Popover>
          </Flex>
        }
        type="radio"
        value="MINIMAL"
      >
        <div
          className="opinion__follow__minimal"
          data-testid="OptionItem"
          id="opinion-follow-btn-minimal-opinion1"
          name="minimal"
          style={
            Object {
              "alignItems": "flex-start",
              "background": "transparent",
              "borderStyle": "solid",
              "borderTop": "none",
              "borderWidth": "1px",
              "marginBottom": 0,
            }
          }
          value="MINIMAL"
        >
          <div
            className="sc-bcXGCL jOiEKS"
          >
            <p
              className="sc-bcXGCL dAeKLr cap-text"
            >
              essential
            </p>
            <p
              className="sc-bcXGCL ikxTkL cap-text"
            >
              updates-and-news
            </p>
          </div>
        </div>
        <div
          className="opinion__follow__essential"
          data-testid="OptionItem"
          id="opinion-follow-btn-essential-opinion1"
          name="essential"
          style={
            Object {
              "alignItems": "flex-start",
              "background": "transparent",
              "borderStyle": "solid",
              "borderTop": "none",
              "borderWidth": "1px",
              "marginBottom": 0,
            }
          }
          value="ESSENTIAL"
        >
          <div
            className="sc-bcXGCL jOiEKS"
          >
            <p
              className="sc-bcXGCL dAeKLr cap-text"
            >
              intermediate
            </p>
            <p
              className="sc-bcXGCL ikxTkL cap-text"
            >
              updates-news-and-new-contributions
            </p>
          </div>
        </div>
        <div
          className="opinion__follow__all"
          data-testid="OptionItem"
          id="opinion-follow-btn-all-opinion1"
          name="all"
          style={
            Object {
              "alignItems": "flex-start",
              "background": "transparent",
              "borderStyle": "solid",
              "borderTop": "none",
              "borderWidth": "1px",
              "marginBottom": 0,
            }
          }
          value="ALL"
        >
          <div
            className="sc-bcXGCL jOiEKS"
          >
            <p
              className="sc-bcXGCL dAeKLr cap-text"
            >
              complete
            </p>
            <p
              className="sc-bcXGCL ikxTkL cap-text"
            >
              updates-news-new-contributions-votes-and-subscriptions
               
            </p>
          </div>
        </div>
      </div>
      <div
        as="a"
        className="opinion__unfollow"
        data-testid="Item"
        href="#"
        id="opinion-unfollow-btn-opinion1"
        onClick={[Function]}
      >
        <p
          className="sc-bcXGCL ikxTkL cap-text"
        >
          unfollow
        </p>
      </div>
    </div>
  </div>,
  <div
    animated={false}
    animating={false}
    aria-label="vote.popover.title"
    as={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [
          Object {
            "maxWidth": "280px",
            "zIndex": 1040,
          },
        ],
        "componentStyle": e {
          "baseHash": -1884068249,
          "baseStyle": e {
            "baseHash": -120292040,
            "baseStyle": undefined,
            "componentId": "sc-bcXGCL",
            "isStatic": false,
            "rules": Array [
              [Function],
              [Function],
              [Function],
              [Function],
            ],
            "staticRulesId": "",
          },
          "componentId": "LoginOverlay__PopoverContainer-jXFGkY",
          "isStatic": false,
          "rules": Array [
            "outline:none;",
          ],
          "staticRulesId": "",
        },
        "foldedComponentIds": "sc-bcXGCL",
        "render": [Function],
        "shouldForwardProp": [Function],
        "styledComponentId": "LoginOverlay__PopoverContainer-jXFGkY",
        "target": "div",
        "warnTooManyClasses": [Function],
      }
    }
    baseId="popover-overlay"
    borderRadius="popover"
    boxShadow="0 5px 10px rgb(0 0 0 / 20%)"
    data-testid="Popover"
    hide={[Function]}
    id="login-popover"
    modal={false}
    place={[Function]}
    placement="auto"
    setAnimated={[Function]}
    setBaseId={[Function]}
    setModal={[Function]}
    setVisible={[Function]}
    show={[Function]}
    stopAnimation={[Function]}
    tabIndex={0}
    toggle={[Function]}
    unstable_arrowRef={
      Object {
        "current": null,
      }
    }
    unstable_arrowStyles={Object {}}
    unstable_disclosureRef={
      Object {
        "current": null,
      }
    }
    unstable_idCountRef={
      Object {
        "current": 0,
      }
    }
    unstable_originalPlacement="auto"
    unstable_popoverRef={
      Object {
        "current": null,
      }
    }
    unstable_popoverStyles={
      Object {
        "left": "100%",
        "position": "fixed",
        "top": "100%",
      }
    }
    unstable_referenceRef={
      Object {
        "current": null,
      }
    }
    unstable_update={[Function]}
    visible={false}
  >
    <div
      className="sc-bcXGCL LoginOverlay__Arrow-jnwUOf hhRfVM csqehL"
      style={
        Object {
          "auto": "100%",
          "fontSize": 30,
          "height": "1em",
          "pointerEvents": "none",
          "width": "1em",
        }
      }
    >
      <svg
        style={
          Object {
            "transform": undefined,
          }
        }
        viewBox="0 0 30 30"
      >
        <path
          className="stroke"
          d="M23.7,27.1L17,19.9C16.5,19.3,15.8,19,15,19s-1.6,0.3-2.1,0.9l-6.6,7.2C5.3,28.1,3.4,29,2,29h26 C26.7,29,24.6,28.1,23.7,27.1z"
        />
        <path
          className="fill"
          d="M23,27.8c1.1,1.2,3.4,2.2,5,2.2h2H0h2c1.7,0,3.9-1,5-2.2l6.6-7.2c0.7-0.8,2-0.8,2.7,0L23,27.8L23,27.8z"
        />
      </svg>
    </div>
    <div
      className="sc-bcXGCL eHnnHB"
    >
      <p
        className="sc-bcXGCL juddyS cap-text"
      >
        vote.popover.title
      </p>
      <div
        className="sc-bcXGCL dQlBHo"
      >
        <p
          className="sc-bcXGCL FTdzv cap-text"
          style={
            Object {
              "marginLeft": 0,
              "marginTop": 0,
            }
          }
        >
          vote.popover.body
        </p>
        <span
          className="sc-gsGkXq iMAODW"
          clip="rect(0px, 0px, 0px, 0px)"
        >
          <button
            className="sc-bcXGCL sc-gGvGpy hSrtJu jrAhSN cap-button"
            onClick={[Function]}
            type="button"
          >
            global.close
          </button>
        </span>
        <button
          aria-label="open.connection_modal"
          className="sc-bcXGCL sc-gGvGpy iUOKky jrAhSN cap-button"
          id="login-button"
          onClick={[Function]}
          type="button"
        >
          global.login
        </button>
      </div>
    </div>
  </div>,
]
`;

exports[`<OpinionFollowButton /> <TestOpinionFollowButton /> should render a button to unfollow a proposal when viewer is following  1`] = `
Array [
  <div
    className="sc-bcXGCL gHoLKQ toasts-container toasts-container--top"
  />,
  <div
    className="sc-bcXGCL gHoLKQ toasts-container toasts-container--top"
  />,
  <div
    aria-controls="popover-overlay"
    aria-expanded={false}
    aria-haspopup="dialog"
    data-testid="Menu"
    disclosure={
      <Button
        className="dropdown-button custom-dropdown-button opinion__button__follow_options"
        id="opinion-follow-btn-opinion1"
        rightIcon="ARROW_DOWN_O"
        style={
          Object {
            "borderColor": "#333",
            "color": "#333",
          }
        }
        variant="secondary"
        variantColor="hierarchy"
      >
        <FormattedMessage
          id="following"
          values={Object {}}
        />
      </Button>
    }
    onClick={[Function]}
    onClickCapture={[Function]}
    onKeyDown={[Function]}
    onKeyPressCapture={[Function]}
    onKeyUp={[Function]}
    onMouseDown={[Function]}
    onMouseDownCapture={[Function]}
    placement="bottom"
    type="button"
  >
    <div
      data-testid="List"
      maxHeight="unset"
      overflow="visible"
    >
      <div
        data-testid="OptionGroup"
        onChange={[Function]}
        title={
          <Flex
            spacing={2}
            style={
              Object {
                "marginBottom": "unset",
              }
            }
          >
            <Heading
              as="h4"
              style={
                Object {
                  "fontSize": "16px",
                }
              }
            >
              to-be-notified-by-email
            </Heading>
            <Popover
              disclosure={
                <Icon
                  name="INFO"
                />
              }
              placement="top"
            >
              <Unknown>
                you-will-receive-a-summary-of-your-notifications-once-a-day
              </Unknown>
            </Popover>
          </Flex>
        }
        type="radio"
        value="MINIMAL"
      >
        <div
          className="opinion__follow__minimal"
          data-testid="OptionItem"
          id="opinion-follow-btn-minimal-opinion1"
          name="minimal"
          style={
            Object {
              "alignItems": "flex-start",
              "background": "transparent",
              "borderStyle": "solid",
              "borderTop": "none",
              "borderWidth": "1px",
              "marginBottom": 0,
            }
          }
          value="MINIMAL"
        >
          <div
            className="sc-bcXGCL jOiEKS"
          >
            <p
              className="sc-bcXGCL dAeKLr cap-text"
            >
              essential
            </p>
            <p
              className="sc-bcXGCL ikxTkL cap-text"
            >
              updates-and-news
            </p>
          </div>
        </div>
        <div
          className="opinion__follow__essential"
          data-testid="OptionItem"
          id="opinion-follow-btn-essential-opinion1"
          name="essential"
          style={
            Object {
              "alignItems": "flex-start",
              "background": "transparent",
              "borderStyle": "solid",
              "borderTop": "none",
              "borderWidth": "1px",
              "marginBottom": 0,
            }
          }
          value="ESSENTIAL"
        >
          <div
            className="sc-bcXGCL jOiEKS"
          >
            <p
              className="sc-bcXGCL dAeKLr cap-text"
            >
              intermediate
            </p>
            <p
              className="sc-bcXGCL ikxTkL cap-text"
            >
              updates-news-and-new-contributions
            </p>
          </div>
        </div>
        <div
          className="opinion__follow__all"
          data-testid="OptionItem"
          id="opinion-follow-btn-all-opinion1"
          name="all"
          style={
            Object {
              "alignItems": "flex-start",
              "background": "transparent",
              "borderStyle": "solid",
              "borderTop": "none",
              "borderWidth": "1px",
              "marginBottom": 0,
            }
          }
          value="ALL"
        >
          <div
            className="sc-bcXGCL jOiEKS"
          >
            <p
              className="sc-bcXGCL dAeKLr cap-text"
            >
              complete
            </p>
            <p
              className="sc-bcXGCL ikxTkL cap-text"
            >
              updates-news-new-contributions-votes-and-subscriptions
               
            </p>
          </div>
        </div>
      </div>
      <div
        as="a"
        className="opinion__unfollow"
        data-testid="Item"
        href="#"
        id="opinion-unfollow-btn-opinion1"
        onClick={[Function]}
      >
        <p
          className="sc-bcXGCL ikxTkL cap-text"
        >
          unfollow
        </p>
      </div>
    </div>
  </div>,
  <div
    animated={false}
    animating={false}
    aria-label="vote.popover.title"
    as={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [
          Object {
            "maxWidth": "280px",
            "zIndex": 1040,
          },
        ],
        "componentStyle": e {
          "baseHash": -1884068249,
          "baseStyle": e {
            "baseHash": -120292040,
            "baseStyle": undefined,
            "componentId": "sc-bcXGCL",
            "isStatic": false,
            "rules": Array [
              [Function],
              [Function],
              [Function],
              [Function],
            ],
            "staticRulesId": "",
          },
          "componentId": "LoginOverlay__PopoverContainer-jXFGkY",
          "isStatic": false,
          "rules": Array [
            "outline:none;",
          ],
          "staticRulesId": "",
        },
        "foldedComponentIds": "sc-bcXGCL",
        "render": [Function],
        "shouldForwardProp": [Function],
        "styledComponentId": "LoginOverlay__PopoverContainer-jXFGkY",
        "target": "div",
        "warnTooManyClasses": [Function],
      }
    }
    baseId="popover-overlay"
    borderRadius="popover"
    boxShadow="0 5px 10px rgb(0 0 0 / 20%)"
    data-testid="Popover"
    hide={[Function]}
    id="login-popover"
    modal={false}
    place={[Function]}
    placement="auto"
    setAnimated={[Function]}
    setBaseId={[Function]}
    setModal={[Function]}
    setVisible={[Function]}
    show={[Function]}
    stopAnimation={[Function]}
    tabIndex={0}
    toggle={[Function]}
    unstable_arrowRef={
      Object {
        "current": null,
      }
    }
    unstable_arrowStyles={Object {}}
    unstable_disclosureRef={
      Object {
        "current": null,
      }
    }
    unstable_idCountRef={
      Object {
        "current": 0,
      }
    }
    unstable_originalPlacement="auto"
    unstable_popoverRef={
      Object {
        "current": null,
      }
    }
    unstable_popoverStyles={
      Object {
        "left": "100%",
        "position": "fixed",
        "top": "100%",
      }
    }
    unstable_referenceRef={
      Object {
        "current": null,
      }
    }
    unstable_update={[Function]}
    visible={false}
  >
    <div
      className="sc-bcXGCL LoginOverlay__Arrow-jnwUOf hhRfVM csqehL"
      style={
        Object {
          "auto": "100%",
          "fontSize": 30,
          "height": "1em",
          "pointerEvents": "none",
          "width": "1em",
        }
      }
    >
      <svg
        style={
          Object {
            "transform": undefined,
          }
        }
        viewBox="0 0 30 30"
      >
        <path
          className="stroke"
          d="M23.7,27.1L17,19.9C16.5,19.3,15.8,19,15,19s-1.6,0.3-2.1,0.9l-6.6,7.2C5.3,28.1,3.4,29,2,29h26 C26.7,29,24.6,28.1,23.7,27.1z"
        />
        <path
          className="fill"
          d="M23,27.8c1.1,1.2,3.4,2.2,5,2.2h2H0h2c1.7,0,3.9-1,5-2.2l6.6-7.2c0.7-0.8,2-0.8,2.7,0L23,27.8L23,27.8z"
        />
      </svg>
    </div>
    <div
      className="sc-bcXGCL eHnnHB"
    >
      <p
        className="sc-bcXGCL juddyS cap-text"
      >
        vote.popover.title
      </p>
      <div
        className="sc-bcXGCL dQlBHo"
      >
        <p
          className="sc-bcXGCL FTdzv cap-text"
          style={
            Object {
              "marginLeft": 0,
              "marginTop": 0,
            }
          }
        >
          vote.popover.body
        </p>
        <span
          className="sc-gsGkXq iMAODW"
          clip="rect(0px, 0px, 0px, 0px)"
        >
          <button
            className="sc-bcXGCL sc-gGvGpy hSrtJu jrAhSN cap-button"
            onClick={[Function]}
            type="button"
          >
            global.close
          </button>
        </span>
        <button
          aria-label="open.connection_modal"
          className="sc-bcXGCL sc-gGvGpy iUOKky jrAhSN cap-button"
          id="login-button"
          onClick={[Function]}
          type="button"
        >
          global.login
        </button>
      </div>
    </div>
  </div>,
]
`;

exports[`<OpinionFollowButton /> <TestOpinionFollowButton /> should render correctly when not authenticated 1`] = `
Array [
  <div
    className="sc-bcXGCL gHoLKQ toasts-container toasts-container--top"
  />,
  <div
    className="sc-bcXGCL gHoLKQ toasts-container toasts-container--top"
  />,
  <div
    aria-controls="popover-overlay"
    aria-expanded={false}
    aria-haspopup="dialog"
    data-testid="Menu"
    disclosure={
      <Button
        className="dropdown-button custom-dropdown-button opinion__button__follow_options"
        id="opinion-follow-btn-opinion1"
        rightIcon="ARROW_DOWN_O"
        style={
          Object {
            "borderColor": "#333",
            "color": "#333",
          }
        }
        variant="secondary"
        variantColor="hierarchy"
      >
        <FormattedMessage
          id="following"
          values={Object {}}
        />
      </Button>
    }
    onClick={[Function]}
    onClickCapture={[Function]}
    onKeyDown={[Function]}
    onKeyPressCapture={[Function]}
    onKeyUp={[Function]}
    onMouseDown={[Function]}
    onMouseDownCapture={[Function]}
    placement="bottom"
    type="button"
  >
    <div
      data-testid="List"
      maxHeight="unset"
      overflow="visible"
    >
      <div
        data-testid="OptionGroup"
        onChange={[Function]}
        title={
          <Flex
            spacing={2}
            style={
              Object {
                "marginBottom": "unset",
              }
            }
          >
            <Heading
              as="h4"
              style={
                Object {
                  "fontSize": "16px",
                }
              }
            >
              to-be-notified-by-email
            </Heading>
            <Popover
              disclosure={
                <Icon
                  name="INFO"
                />
              }
              placement="top"
            >
              <Unknown>
                you-will-receive-a-summary-of-your-notifications-once-a-day
              </Unknown>
            </Popover>
          </Flex>
        }
        type="radio"
        value="MINIMAL"
      >
        <div
          className="opinion__follow__minimal"
          data-testid="OptionItem"
          id="opinion-follow-btn-minimal-opinion1"
          name="minimal"
          style={
            Object {
              "alignItems": "flex-start",
              "background": "transparent",
              "borderStyle": "solid",
              "borderTop": "none",
              "borderWidth": "1px",
              "marginBottom": 0,
            }
          }
          value="MINIMAL"
        >
          <div
            className="sc-bcXGCL jOiEKS"
          >
            <p
              className="sc-bcXGCL dAeKLr cap-text"
            >
              essential
            </p>
            <p
              className="sc-bcXGCL ikxTkL cap-text"
            >
              updates-and-news
            </p>
          </div>
        </div>
        <div
          className="opinion__follow__essential"
          data-testid="OptionItem"
          id="opinion-follow-btn-essential-opinion1"
          name="essential"
          style={
            Object {
              "alignItems": "flex-start",
              "background": "transparent",
              "borderStyle": "solid",
              "borderTop": "none",
              "borderWidth": "1px",
              "marginBottom": 0,
            }
          }
          value="ESSENTIAL"
        >
          <div
            className="sc-bcXGCL jOiEKS"
          >
            <p
              className="sc-bcXGCL dAeKLr cap-text"
            >
              intermediate
            </p>
            <p
              className="sc-bcXGCL ikxTkL cap-text"
            >
              updates-news-and-new-contributions
            </p>
          </div>
        </div>
        <div
          className="opinion__follow__all"
          data-testid="OptionItem"
          id="opinion-follow-btn-all-opinion1"
          name="all"
          style={
            Object {
              "alignItems": "flex-start",
              "background": "transparent",
              "borderStyle": "solid",
              "borderTop": "none",
              "borderWidth": "1px",
              "marginBottom": 0,
            }
          }
          value="ALL"
        >
          <div
            className="sc-bcXGCL jOiEKS"
          >
            <p
              className="sc-bcXGCL dAeKLr cap-text"
            >
              complete
            </p>
            <p
              className="sc-bcXGCL ikxTkL cap-text"
            >
              updates-news-new-contributions-votes-and-subscriptions
               
            </p>
          </div>
        </div>
      </div>
      <div
        as="a"
        className="opinion__unfollow"
        data-testid="Item"
        href="#"
        id="opinion-unfollow-btn-opinion1"
        onClick={[Function]}
      >
        <p
          className="sc-bcXGCL ikxTkL cap-text"
        >
          unfollow
        </p>
      </div>
    </div>
  </div>,
  <div
    animated={false}
    animating={false}
    aria-label="vote.popover.title"
    as={
      Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [
          Object {
            "maxWidth": "280px",
            "zIndex": 1040,
          },
        ],
        "componentStyle": e {
          "baseHash": -1884068249,
          "baseStyle": e {
            "baseHash": -120292040,
            "baseStyle": undefined,
            "componentId": "sc-bcXGCL",
            "isStatic": false,
            "rules": Array [
              [Function],
              [Function],
              [Function],
              [Function],
            ],
            "staticRulesId": "",
          },
          "componentId": "LoginOverlay__PopoverContainer-jXFGkY",
          "isStatic": false,
          "rules": Array [
            "outline:none;",
          ],
          "staticRulesId": "",
        },
        "foldedComponentIds": "sc-bcXGCL",
        "render": [Function],
        "shouldForwardProp": [Function],
        "styledComponentId": "LoginOverlay__PopoverContainer-jXFGkY",
        "target": "div",
        "warnTooManyClasses": [Function],
      }
    }
    baseId="popover-overlay"
    borderRadius="popover"
    boxShadow="0 5px 10px rgb(0 0 0 / 20%)"
    data-testid="Popover"
    hide={[Function]}
    id="login-popover"
    modal={false}
    place={[Function]}
    placement="auto"
    setAnimated={[Function]}
    setBaseId={[Function]}
    setModal={[Function]}
    setVisible={[Function]}
    show={[Function]}
    stopAnimation={[Function]}
    tabIndex={0}
    toggle={[Function]}
    unstable_arrowRef={
      Object {
        "current": null,
      }
    }
    unstable_arrowStyles={Object {}}
    unstable_disclosureRef={
      Object {
        "current": null,
      }
    }
    unstable_idCountRef={
      Object {
        "current": 0,
      }
    }
    unstable_originalPlacement="auto"
    unstable_popoverRef={
      Object {
        "current": null,
      }
    }
    unstable_popoverStyles={
      Object {
        "left": "100%",
        "position": "fixed",
        "top": "100%",
      }
    }
    unstable_referenceRef={
      Object {
        "current": null,
      }
    }
    unstable_update={[Function]}
    visible={false}
  >
    <div
      className="sc-bcXGCL LoginOverlay__Arrow-jnwUOf hhRfVM csqehL"
      style={
        Object {
          "auto": "100%",
          "fontSize": 30,
          "height": "1em",
          "pointerEvents": "none",
          "width": "1em",
        }
      }
    >
      <svg
        style={
          Object {
            "transform": undefined,
          }
        }
        viewBox="0 0 30 30"
      >
        <path
          className="stroke"
          d="M23.7,27.1L17,19.9C16.5,19.3,15.8,19,15,19s-1.6,0.3-2.1,0.9l-6.6,7.2C5.3,28.1,3.4,29,2,29h26 C26.7,29,24.6,28.1,23.7,27.1z"
        />
        <path
          className="fill"
          d="M23,27.8c1.1,1.2,3.4,2.2,5,2.2h2H0h2c1.7,0,3.9-1,5-2.2l6.6-7.2c0.7-0.8,2-0.8,2.7,0L23,27.8L23,27.8z"
        />
      </svg>
    </div>
    <div
      className="sc-bcXGCL eHnnHB"
    >
      <p
        className="sc-bcXGCL juddyS cap-text"
      >
        vote.popover.title
      </p>
      <div
        className="sc-bcXGCL dQlBHo"
      >
        <p
          className="sc-bcXGCL FTdzv cap-text"
          style={
            Object {
              "marginLeft": 0,
              "marginTop": 0,
            }
          }
        >
          vote.popover.body
        </p>
        <span
          className="sc-gsGkXq iMAODW"
          clip="rect(0px, 0px, 0px, 0px)"
        >
          <button
            className="sc-bcXGCL sc-gGvGpy hSrtJu jrAhSN cap-button"
            onClick={[Function]}
            type="button"
          >
            global.close
          </button>
        </span>
        <button
          aria-label="open.connection_modal"
          className="sc-bcXGCL sc-gGvGpy iUOKky jrAhSN cap-button"
          id="login-button"
          onClick={[Function]}
          type="button"
        >
          global.login
        </button>
      </div>
    </div>
  </div>,
]
`;
