// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<ProposalForm /> should render a create Proposal form 1`] = `
<form
  id="proposal-form"
>
  <WYSIWYGRender
    className="mb-15"
    value="Description 1"
  />
  <Field
    addonAfter={
      <Glyphicon
        bsClass="glyphicon"
        className=""
        glyph="refresh"
      />
    }
    autoComplete="off"
    component={[Function]}
    divClassName="bo_width_747 proposal_title_container"
    help="Title help"
    id="proposal_title"
    label={
      <FormattedMessage
        id="global.title"
        values={Object {}}
      />
    }
    name="title"
    placeholder={null}
    type="text"
  />
  <Collapse
    appear={false}
    dimension="height"
    getDimensionValue={[Function]}
    in={false}
    mountOnEnter={false}
    timeout={300}
    unmountOnExit={false}
  >
    <Uncontrolled(Panel)>
      <PanelHeading
        bsClass="panel"
        componentClass="div"
      >
        <PanelTitle
          bsClass="panel"
          componentClass="div"
        >
          <FormattedMessage
            id="proposal.suggest_header"
            values={
              Object {
                "matches": 0,
                "terms": 2,
              }
            }
          />
          <Button
            active={false}
            block={false}
            bsClass="btn"
            bsStyle="default"
            className="pull-right"
            disabled={false}
            onClick={[Function]}
            style={
              Object {
                "marginTop": -5,
              }
            }
          >
            global.close
          </Button>
        </PanelTitle>
      </PanelHeading>
      <ListGroup
        bsClass="list-group"
      />
    </Uncontrolled(Panel)>
  </Collapse>
  <Field
    autoComplete="off"
    component={[Function]}
    divClassName="bo_width_747 proposal_summary_container"
    help="Summary help"
    id="global.summary"
    label={
      <span>
        global.summary
        <Text
          as="span"
          color="#707070"
          fontWeight="normal"
        >
           
          global.optional
        </Text>
      </span>
    }
    maxLength="140"
    minLength="2"
    name="summary"
    placeholder={null}
    type="textarea"
  />
  <Field
    component={[Function]}
    divClassName="bo_width_560 proposal_theme_container"
    help="Theme help"
    id="global.theme"
    label={
      <span>
        global.theme
      </span>
    }
    name="theme"
    type="select"
  >
    <FormattedMessage
      id="proposal.select.theme"
      values={Object {}}
    >
      <Component />
    </FormattedMessage>
    <option
      key="theme1"
      value="theme1"
    >
      Theme 1
    </option>
  </Field>
  <Field
    component={[Function]}
    divClassName="bo_width_560 proposal_category_container"
    help="Category help"
    id="global.category"
    label={
      <span>
        global.category
      </span>
    }
    name="category"
    type="select"
  >
    <FormattedMessage
      id="proposal.select.category"
      values={Object {}}
    >
      <Component />
    </FormattedMessage>
    <option
      key="category1"
      value="category1"
    >
      Category 1
    </option>
    <option
      key="category2"
      value="category2"
    >
      Category 2
    </option>
  </Field>
  <Field
    addressProps={
      Object {
        "getAddress": [Function],
      }
    }
    component={[Function]}
    divClassName="bo_width_560 proposal_addressText_container"
    formName="proposal-form"
    help="Address help"
    id="proposal_address"
    label="proposal_form.address"
    name="addressText"
    placeholder="proposal.map.form.placeholder"
    type="address"
  />
  <ProposalFormMapPreview
    address={null}
    categories={
      Array [
        Object {
          "color": "blue",
          "icon": null,
          "id": "category1",
          "name": "Category 1",
        },
        Object {
          "color": "red",
          "icon": "tractor",
          "id": "category2",
          "name": "Category 2",
        },
      ]
    }
    category={null}
  />
  <Field
    component={[Function]}
    divClassName="bo_width_560 proposal_district_container"
    help="District help"
    id="proposal_district"
    label={
      <span>
        proposal.district
      </span>
    }
    name="district"
    type="select"
  >
    <FormattedMessage
      id="proposal.select.district"
      values={Object {}}
    >
      <Component />
    </FormattedMessage>
    <option
      key="district1"
      value="district1"
    >
      District 1
    </option>
    <option
      key="district2"
      value="district2"
    >
      District 2
    </option>
  </Field>
  <Field
    component={[Function]}
    divClassName="bo_width_560 proposal_body_container"
    help="Description help"
    id="proposal_body"
    label={
      <span>
        proposal.body
      </span>
    }
    name="body"
    placeholder={null}
    type="editor-ds"
  />
  <FieldArray
    change={[MockFunction]}
    component={[Function]}
    dispatch={[MockFunction]}
    divClassName="bo_width_747_container"
    form="formName"
    intl={
      Object {
        "formatDate": [Function],
        "formatHTMLMessage": [Function],
        "formatMessage": [Function],
        "formatNumber": [Function],
        "formatPlural": [Function],
        "formatRelative": [Function],
        "formatTime": [Function],
        "formats": Object {},
        "locale": "fr-FR",
        "messages": Object {},
        "now": [Function],
      }
    }
    memoize={[Function]}
    memoizeId="proposalForm1"
    name="responses"
    questions={
      Array [
        Object {
          "__typename": "SimpleQuestion",
          "alwaysJumpDestinationQuestion": null,
          "choices": Object {
            "edges": Array [],
            "pageInfo": Object {
              "hasNextPage": false,
            },
            "totalCount": 0,
          },
          "description": null,
          "destinationJumps": Array [],
          "helpText": "Question 1",
          "hidden": false,
          "id": "question1",
          "isOtherAllowed": false,
          "isRangeBetween": true,
          "jumps": Array [],
          "level": null,
          "number": 1,
          "position": 1,
          "private": true,
          "rangeMax": 10,
          "rangeMin": 0,
          "required": true,
          "title": "Lol",
          "type": "text",
          "validationRule": null,
        },
      ]
    }
    responses={Array []}
    unstable__enableCapcoUiDs={true}
  />
  <Field
    component={[Function]}
    divClassName="bo_width_747 proposal_media_container"
    help={
      <span>
        Illustration help
        Â 
        <FormattedHTMLMessage
          id="illustration-help-text"
          tagName="span"
          values={Object {}}
        />
      </span>
    }
    id="proposal_media"
    label={
      <span>
        proposal.media
        <Text
          as="span"
          color="#707070"
          fontWeight="normal"
        >
           
          global.optional
        </Text>
      </span>
    }
    maxSize="4000000"
    name="media"
    type="image"
  />
  <ProposalForm__ExternalLinks
    backgroundColor="#ffffff"
    className="external-links"
    paddingY={8}
  >
    <Text
      as="h3"
      color="#272B30"
      display="flex"
      fontSize="14px"
      fontWeight="600"
      lineHeight="24px"
      mb={6}
    >
      your-external-links
    </Text>
    <Field
      component={[Function]}
      id="proposal_wep_page"
      label="form.label_website"
      name="webPageUrl"
      placeholder="your-url"
      type="text"
    />
    <Field
      component={[Function]}
      id="proposal_twitter"
      label="share.twitter"
      name="twitterUrl"
      placeholder="https://x.com/pseudo"
      type="text"
    />
    <Field
      component={[Function]}
      id="proposal_facebook"
      label="share.facebook"
      name="facebookUrl"
      placeholder="https://facebook.com/pseudo"
      type="text"
    />
    <Field
      component={[Function]}
      id="proposal_instagram"
      label="instagram"
      name="instagramUrl"
      placeholder="https://instagram.com/pseudo"
      type="text"
    />
    <Field
      component={[Function]}
      id="proposal_linkedin"
      label="share.linkedin"
      name="linkedInUrl"
      placeholder="https://linkedin.com/in/pseudo"
      type="text"
    />
    <Field
      component={[Function]}
      id="proposal_youtube"
      label="youtube"
      name="youtubeUrl"
      placeholder="https://youtube.com/channel/pseudo"
      type="text"
    />
  </ProposalForm__ExternalLinks>
</form>
`;

exports[`<ProposalForm /> should render a create Proposal form from back office 1`] = `
<form
  id="proposal-form"
>
  <Field
    addonAfter={
      <Glyphicon
        bsClass="glyphicon"
        className=""
        glyph="refresh"
      />
    }
    autoComplete="off"
    component={[Function]}
    divClassName="bo_width_747 proposal_title_container"
    help={null}
    id="proposal_title"
    label={
      <FormattedMessage
        id="global.title"
        values={Object {}}
      />
    }
    name="title"
    placeholder="untitled-proposal"
    type="text"
  />
  <Collapse
    appear={false}
    dimension="height"
    getDimensionValue={[Function]}
    in={false}
    mountOnEnter={false}
    timeout={300}
    unmountOnExit={false}
  >
    <Uncontrolled(Panel)>
      <PanelHeading
        bsClass="panel"
        componentClass="div"
      >
        <PanelTitle
          bsClass="panel"
          componentClass="div"
        >
          <FormattedMessage
            id="proposal.suggest_header"
            values={
              Object {
                "matches": 0,
                "terms": 2,
              }
            }
          />
          <Button
            active={false}
            block={false}
            bsClass="btn"
            bsStyle="default"
            className="pull-right"
            disabled={false}
            onClick={[Function]}
            style={
              Object {
                "marginTop": -5,
              }
            }
          >
            global.close
          </Button>
        </PanelTitle>
      </PanelHeading>
      <ListGroup
        bsClass="list-group"
      />
    </Uncontrolled(Panel)>
  </Collapse>
  <Field
    autoComplete="off"
    component={[Function]}
    divClassName="bo_width_747 proposal_summary_container"
    help={null}
    id="global.summary"
    label={
      <span>
        global.summary
        <Text
          as="span"
          color="gray.500"
          fontWeight="normal"
        >
           
          global.optional
        </Text>
      </span>
    }
    maxLength="140"
    minLength="2"
    name="summary"
    placeholder="summarize-in-few-words"
    type="textarea"
  />
  <UserListField
    ariaControls="ProposalAdminContentForm-filter-user-listbox"
    authorOfEvent={false}
    autoload={false}
    className=""
    clearable={false}
    debounce={false}
    divClassName="bo_width_560 proposal_author_container"
    id="proposal-admin-author"
    inputClassName="fake-inputClassName"
    label={
      <FormattedMessage
        id="global.author"
        values={Object {}}
      />
    }
    labelClassName="control-label"
    multi={false}
    name="author"
    placeholder="global.author"
    selectFieldIsObject={true}
  />
  <Field
    addonAfter={
      <Icon
        name="CALENDAR"
        size="sm"
      />
    }
    component={[Function]}
    dateProps={
      Object {
        "dateFormat": "DD/MM/YYYY HH:mm:ss",
      }
    }
    divClassName="bo_width_200 proposal_publishedAt_container"
    formName="proposal-form"
    id="proposal-publishedAt"
    label="global.date.text"
    name="publishedAt"
    placeholder="date.placeholder"
    type="datetime"
  />
  <Field
    component={[Function]}
    divClassName="bo_width_560 proposal_theme_container"
    help={null}
    id="global.theme"
    label={
      <span>
        global.theme
      </span>
    }
    name="theme"
    type="select"
  >
    <FormattedMessage
      id="proposal.select.theme"
      values={Object {}}
    >
      <Component />
    </FormattedMessage>
    <option
      key="theme1"
      value="theme1"
    >
      Theme 1
    </option>
  </Field>
  <Field
    component={[Function]}
    divClassName="bo_width_560 proposal_category_container"
    help={null}
    id="global.category"
    label={
      <span>
        global.category
      </span>
    }
    name="category"
    type="select"
  >
    <FormattedMessage
      id="proposal.select.category"
      values={Object {}}
    >
      <Component />
    </FormattedMessage>
    <option
      key="category1"
      value="category1"
    >
      Category 1
    </option>
    <option
      key="category2"
      value="category2"
    >
      Category 2
    </option>
  </Field>
  <Field
    addressProps={
      Object {
        "getAddress": [Function],
      }
    }
    component={[Function]}
    divClassName="bo_width_560 proposal_addressText_container"
    formName="proposal-form"
    help={null}
    id="proposal_address"
    label="proposal_form.address"
    name="addressText"
    placeholder="proposal.map.form.placeholder"
    type="address"
  />
  <ProposalFormMapPreview
    address={null}
    categories={
      Array [
        Object {
          "color": "blue",
          "icon": null,
          "id": "category1",
          "name": "Category 1",
        },
        Object {
          "color": "red",
          "icon": "tractor",
          "id": "category2",
          "name": "Category 2",
        },
      ]
    }
    category={null}
  />
  <Field
    component={[Function]}
    divClassName="bo_width_560 proposal_district_container"
    help={null}
    id="proposal_district"
    label={
      <span>
        proposal.district
      </span>
    }
    name="district"
    type="select"
  >
    <FormattedMessage
      id="proposal.select.district"
      values={Object {}}
    >
      <Component />
    </FormattedMessage>
    <option
      key="district1"
      value="district1"
    >
      District 1
    </option>
    <option
      key="district2"
      value="district2"
    >
      District 2
    </option>
  </Field>
  <Field
    component={[Function]}
    divClassName="bo_width_560 proposal_body_container"
    help={null}
    id="proposal_body"
    label={
      <span>
        proposal.body
      </span>
    }
    name="body"
    placeholder="describe-your-project-in-details"
    type="editor-ds"
  />
  <FieldArray
    change={[MockFunction]}
    component={[Function]}
    dispatch={[MockFunction]}
    divClassName="bo_width_747_container"
    form="formName"
    intl={
      Object {
        "formatDate": [Function],
        "formatHTMLMessage": [Function],
        "formatMessage": [Function],
        "formatNumber": [Function],
        "formatPlural": [Function],
        "formatRelative": [Function],
        "formatTime": [Function],
        "formats": Object {},
        "locale": "fr-FR",
        "messages": Object {},
        "now": [Function],
      }
    }
    memoize={[Function]}
    memoizeId="proposalForm1"
    name="responses"
    questions={
      Array [
        Object {
          "__typename": "SimpleQuestion",
          "alwaysJumpDestinationQuestion": null,
          "choices": Object {
            "edges": Array [],
            "pageInfo": Object {
              "hasNextPage": false,
            },
            "totalCount": 0,
          },
          "description": null,
          "destinationJumps": Array [],
          "helpText": "Question 1",
          "hidden": false,
          "id": "question1",
          "isOtherAllowed": false,
          "isRangeBetween": true,
          "jumps": Array [],
          "level": null,
          "number": 1,
          "position": 1,
          "private": true,
          "rangeMax": 10,
          "rangeMin": 0,
          "required": true,
          "title": "Lol",
          "type": "text",
          "validationRule": null,
        },
      ]
    }
    responses={Array []}
    unstable__enableCapcoUiDs={true}
  />
  <Field
    component={[Function]}
    divClassName="bo_width_747 proposal_media_container"
    help={
      <span>
        Illustration help
        Â 
        <FormattedHTMLMessage
          id="illustration-help-text"
          tagName="span"
          values={Object {}}
        />
      </span>
    }
    id="proposal_media"
    label={
      <span>
        proposal.media
        <Text
          as="span"
          color="gray.500"
          fontWeight="normal"
        >
           
          global.optional
        </Text>
      </span>
    }
    maxSize="4000000"
    name="media"
    type="image"
  />
  <ProposalForm__ExternalLinks
    backgroundColor="#ffffff"
    className="external-links"
    paddingY={8}
  >
    <Text
      as="span"
      color="#272B30"
      display="flex"
      fontSize="14px"
      fontWeight="600"
      lineHeight="24px"
      mb={6}
    >
      your-external-links
    </Text>
    <Field
      component={[Function]}
      id="proposal_wep_page"
      label="form.label_website"
      name="webPageUrl"
      placeholder="your-url"
      type="text"
    />
    <Field
      component={[Function]}
      id="proposal_twitter"
      label="share.twitter"
      name="twitterUrl"
      placeholder="https://x.com/pseudo"
      type="text"
    />
    <Field
      component={[Function]}
      id="proposal_facebook"
      label="share.facebook"
      name="facebookUrl"
      placeholder="https://facebook.com/pseudo"
      type="text"
    />
    <Field
      component={[Function]}
      id="proposal_instagram"
      label="instagram"
      name="instagramUrl"
      placeholder="https://instagram.com/pseudo"
      type="text"
    />
    <Field
      component={[Function]}
      id="proposal_linkedin"
      label="share.linkedin"
      name="linkedInUrl"
      placeholder="https://linkedin.com/in/pseudo"
      type="text"
    />
    <Field
      component={[Function]}
      id="proposal_youtube"
      label="youtube"
      name="youtubeUrl"
      placeholder="https://youtube.com/channel/pseudo"
      type="text"
    />
  </ProposalForm__ExternalLinks>
</form>
`;

exports[`<ProposalForm /> should render a create Question form 1`] = `
<form
  id="proposal-form"
>
  <WYSIWYGRender
    className="mb-15"
    value="Description 1"
  />
  <Field
    addonAfter={
      <Glyphicon
        bsClass="glyphicon"
        className=""
        glyph="refresh"
      />
    }
    autoComplete="off"
    component={[Function]}
    divClassName="bo_width_747 proposal_title_container"
    help="Title help"
    id="proposal_title"
    label={
      <FormattedMessage
        id="title"
        values={Object {}}
      />
    }
    name="title"
    placeholder={null}
    type="text"
  />
  <Collapse
    appear={false}
    dimension="height"
    getDimensionValue={[Function]}
    in={false}
    mountOnEnter={false}
    timeout={300}
    unmountOnExit={false}
  >
    <Uncontrolled(Panel)>
      <PanelHeading
        bsClass="panel"
        componentClass="div"
      >
        <PanelTitle
          bsClass="panel"
          componentClass="div"
        >
          <FormattedMessage
            id="question.suggest_header"
            values={
              Object {
                "matches": 0,
                "terms": 2,
              }
            }
          />
          <Button
            active={false}
            block={false}
            bsClass="btn"
            bsStyle="default"
            className="pull-right"
            disabled={false}
            onClick={[Function]}
            style={
              Object {
                "marginTop": -5,
              }
            }
          >
            global.close
          </Button>
        </PanelTitle>
      </PanelHeading>
      <ListGroup
        bsClass="list-group"
      />
    </Uncontrolled(Panel)>
  </Collapse>
  <Field
    autoComplete="off"
    component={[Function]}
    divClassName="bo_width_747 proposal_summary_container"
    help="Summary help"
    id="global.summary"
    label={
      <span>
        global.summary
        <Text
          as="span"
          color="#707070"
          fontWeight="normal"
        >
           
          global.optional
        </Text>
      </span>
    }
    maxLength="140"
    minLength="2"
    name="summary"
    placeholder={null}
    type="textarea"
  />
  <Field
    component={[Function]}
    divClassName="bo_width_560 proposal_theme_container"
    help="Theme help"
    id="global.theme"
    label={
      <span>
        global.theme
      </span>
    }
    name="theme"
    type="select"
  >
    <FormattedMessage
      id="proposal.select.theme"
      values={Object {}}
    >
      <Component />
    </FormattedMessage>
    <option
      key="theme1"
      value="theme1"
    >
      Theme 1
    </option>
  </Field>
  <Field
    component={[Function]}
    divClassName="bo_width_560 proposal_category_container"
    help="Category help"
    id="global.category"
    label={
      <span>
        global.category
      </span>
    }
    name="category"
    type="select"
  >
    <FormattedMessage
      id="proposal.select.category"
      values={Object {}}
    >
      <Component />
    </FormattedMessage>
    <option
      key="category1"
      value="category1"
    >
      Category 1
    </option>
    <option
      key="category2"
      value="category2"
    >
      Category 2
    </option>
  </Field>
  <Field
    addressProps={
      Object {
        "getAddress": [Function],
      }
    }
    component={[Function]}
    divClassName="bo_width_560 proposal_addressText_container"
    formName="proposal-form"
    help="Address help"
    id="proposal_address"
    label="proposal_form.address"
    name="addressText"
    placeholder="proposal.map.form.placeholder"
    type="address"
  />
  <ProposalFormMapPreview
    address={null}
    categories={
      Array [
        Object {
          "color": "blue",
          "icon": null,
          "id": "category1",
          "name": "Category 1",
        },
        Object {
          "color": "red",
          "icon": "tractor",
          "id": "category2",
          "name": "Category 2",
        },
      ]
    }
    category={null}
  />
  <Field
    component={[Function]}
    divClassName="bo_width_560 proposal_district_container"
    help="District help"
    id="proposal_district"
    label={
      <span>
        proposal.district
      </span>
    }
    name="district"
    type="select"
  >
    <FormattedMessage
      id="proposal.select.district"
      values={Object {}}
    >
      <Component />
    </FormattedMessage>
    <option
      key="district1"
      value="district1"
    >
      District 1
    </option>
    <option
      key="district2"
      value="district2"
    >
      District 2
    </option>
  </Field>
  <Field
    component={[Function]}
    divClassName="bo_width_560 proposal_body_container"
    help="Description help"
    id="proposal_body"
    label={
      <span>
        proposal.body
      </span>
    }
    name="body"
    placeholder={null}
    type="editor-ds"
  />
  <FieldArray
    change={[MockFunction]}
    component={[Function]}
    dispatch={[MockFunction]}
    divClassName="bo_width_747_container"
    form="formName"
    intl={
      Object {
        "formatDate": [Function],
        "formatHTMLMessage": [Function],
        "formatMessage": [Function],
        "formatNumber": [Function],
        "formatPlural": [Function],
        "formatRelative": [Function],
        "formatTime": [Function],
        "formats": Object {},
        "locale": "fr-FR",
        "messages": Object {},
        "now": [Function],
      }
    }
    memoize={[Function]}
    memoizeId="proposalForm1"
    name="responses"
    questions={
      Array [
        Object {
          "__typename": "SimpleQuestion",
          "alwaysJumpDestinationQuestion": null,
          "choices": Object {
            "edges": Array [],
            "pageInfo": Object {
              "hasNextPage": false,
            },
            "totalCount": 0,
          },
          "description": null,
          "destinationJumps": Array [],
          "helpText": "Question 1",
          "hidden": false,
          "id": "question1",
          "isOtherAllowed": false,
          "isRangeBetween": true,
          "jumps": Array [],
          "level": null,
          "number": 1,
          "position": 1,
          "private": true,
          "rangeMax": 10,
          "rangeMin": 0,
          "required": true,
          "title": "Lol",
          "type": "text",
          "validationRule": null,
        },
      ]
    }
    responses={Array []}
    unstable__enableCapcoUiDs={true}
  />
  <Field
    component={[Function]}
    divClassName="bo_width_747 proposal_media_container"
    help={
      <span>
        Illustration help
        Â 
        <FormattedHTMLMessage
          id="illustration-help-text"
          tagName="span"
          values={Object {}}
        />
      </span>
    }
    id="proposal_media"
    label={
      <span>
        proposal.media
        <Text
          as="span"
          color="#707070"
          fontWeight="normal"
        >
           
          global.optional
        </Text>
      </span>
    }
    maxSize="4000000"
    name="media"
    type="image"
  />
  <ProposalForm__ExternalLinks
    backgroundColor="#ffffff"
    className="external-links"
    paddingY={8}
  >
    <Text
      as="h3"
      color="#272B30"
      display="flex"
      fontSize="14px"
      fontWeight="600"
      lineHeight="24px"
      mb={6}
    >
      your-external-links
    </Text>
    <Field
      component={[Function]}
      id="proposal_wep_page"
      label="form.label_website"
      name="webPageUrl"
      placeholder="your-url"
      type="text"
    />
    <Field
      component={[Function]}
      id="proposal_twitter"
      label="share.twitter"
      name="twitterUrl"
      placeholder="https://x.com/pseudo"
      type="text"
    />
    <Field
      component={[Function]}
      id="proposal_facebook"
      label="share.facebook"
      name="facebookUrl"
      placeholder="https://facebook.com/pseudo"
      type="text"
    />
    <Field
      component={[Function]}
      id="proposal_instagram"
      label="instagram"
      name="instagramUrl"
      placeholder="https://instagram.com/pseudo"
      type="text"
    />
    <Field
      component={[Function]}
      id="proposal_linkedin"
      label="share.linkedin"
      name="linkedInUrl"
      placeholder="https://linkedin.com/in/pseudo"
      type="text"
    />
    <Field
      component={[Function]}
      id="proposal_youtube"
      label="youtube"
      name="youtubeUrl"
      placeholder="https://youtube.com/channel/pseudo"
      type="text"
    />
  </ProposalForm__ExternalLinks>
</form>
`;

exports[`<ProposalForm /> should render a create Question form with hidden questions 1`] = `
<form
  id="proposal-form"
>
  <WYSIWYGRender
    className="mb-15"
    value="Description 1"
  />
  <Field
    addonAfter={
      <Glyphicon
        bsClass="glyphicon"
        className=""
        glyph="refresh"
      />
    }
    autoComplete="off"
    component={[Function]}
    divClassName="bo_width_747 proposal_title_container"
    help="Title help"
    id="proposal_title"
    label={
      <FormattedMessage
        id="title"
        values={Object {}}
      />
    }
    name="title"
    placeholder={null}
    type="text"
  />
  <Collapse
    appear={false}
    dimension="height"
    getDimensionValue={[Function]}
    in={false}
    mountOnEnter={false}
    timeout={300}
    unmountOnExit={false}
  >
    <Uncontrolled(Panel)>
      <PanelHeading
        bsClass="panel"
        componentClass="div"
      >
        <PanelTitle
          bsClass="panel"
          componentClass="div"
        >
          <FormattedMessage
            id="question.suggest_header"
            values={
              Object {
                "matches": 0,
                "terms": 2,
              }
            }
          />
          <Button
            active={false}
            block={false}
            bsClass="btn"
            bsStyle="default"
            className="pull-right"
            disabled={false}
            onClick={[Function]}
            style={
              Object {
                "marginTop": -5,
              }
            }
          >
            global.close
          </Button>
        </PanelTitle>
      </PanelHeading>
      <ListGroup
        bsClass="list-group"
      />
    </Uncontrolled(Panel)>
  </Collapse>
  <Field
    autoComplete="off"
    component={[Function]}
    divClassName="bo_width_747 proposal_summary_container"
    help="Summary help"
    id="global.summary"
    label={
      <span>
        global.summary
        <Text
          as="span"
          color="#707070"
          fontWeight="normal"
        >
           
          global.optional
        </Text>
      </span>
    }
    maxLength="140"
    minLength="2"
    name="summary"
    placeholder={null}
    type="textarea"
  />
  <Field
    component={[Function]}
    divClassName="bo_width_560 proposal_theme_container"
    help="Theme help"
    id="global.theme"
    label={
      <span>
        global.theme
      </span>
    }
    name="theme"
    type="select"
  >
    <FormattedMessage
      id="proposal.select.theme"
      values={Object {}}
    >
      <Component />
    </FormattedMessage>
    <option
      key="theme1"
      value="theme1"
    >
      Theme 1
    </option>
  </Field>
  <Field
    component={[Function]}
    divClassName="bo_width_560 proposal_category_container"
    help="Category help"
    id="global.category"
    label={
      <span>
        global.category
      </span>
    }
    name="category"
    type="select"
  >
    <FormattedMessage
      id="proposal.select.category"
      values={Object {}}
    >
      <Component />
    </FormattedMessage>
    <option
      key="category1"
      value="category1"
    >
      Category 1
    </option>
    <option
      key="category2"
      value="category2"
    >
      Category 2
    </option>
  </Field>
  <Field
    addressProps={
      Object {
        "getAddress": [Function],
      }
    }
    component={[Function]}
    divClassName="bo_width_560 proposal_addressText_container"
    formName="proposal-form"
    help="Address help"
    id="proposal_address"
    label="proposal_form.address"
    name="addressText"
    placeholder="proposal.map.form.placeholder"
    type="address"
  />
  <ProposalFormMapPreview
    address={null}
    categories={
      Array [
        Object {
          "color": "blue",
          "icon": null,
          "id": "category1",
          "name": "Category 1",
        },
        Object {
          "color": "red",
          "icon": "tractor",
          "id": "category2",
          "name": "Category 2",
        },
      ]
    }
    category={null}
  />
  <Field
    component={[Function]}
    divClassName="bo_width_560 proposal_district_container"
    help="District help"
    id="proposal_district"
    label={
      <span>
        proposal.district
      </span>
    }
    name="district"
    type="select"
  >
    <FormattedMessage
      id="proposal.select.district"
      values={Object {}}
    >
      <Component />
    </FormattedMessage>
    <option
      key="district1"
      value="district1"
    >
      District 1
    </option>
    <option
      key="district2"
      value="district2"
    >
      District 2
    </option>
  </Field>
  <Field
    component={[Function]}
    divClassName="bo_width_560 proposal_body_container"
    help="Description help"
    id="proposal_body"
    label={
      <span>
        proposal.body
      </span>
    }
    name="body"
    placeholder={null}
    type="editor-ds"
  />
  <FieldArray
    change={[MockFunction]}
    component={[Function]}
    dispatch={[MockFunction]}
    divClassName="bo_width_747_container"
    form="formName"
    intl={
      Object {
        "formatDate": [Function],
        "formatHTMLMessage": [Function],
        "formatMessage": [Function],
        "formatNumber": [Function],
        "formatPlural": [Function],
        "formatRelative": [Function],
        "formatTime": [Function],
        "formats": Object {},
        "locale": "fr-FR",
        "messages": Object {},
        "now": [Function],
      }
    }
    memoize={[Function]}
    memoizeId="proposalForm1"
    name="responses"
    questions={
      Array [
        Object {
          "__typename": "SimpleQuestion",
          "alwaysJumpDestinationQuestion": null,
          "choices": Object {
            "edges": Array [],
            "pageInfo": Object {
              "hasNextPage": false,
            },
            "totalCount": 0,
          },
          "description": null,
          "destinationJumps": Array [],
          "helpText": "Question 1",
          "hidden": true,
          "id": "question1",
          "isOtherAllowed": false,
          "isRangeBetween": false,
          "jumps": Array [],
          "level": 0,
          "number": 1,
          "position": 1,
          "private": true,
          "rangeMax": null,
          "rangeMin": null,
          "required": true,
          "title": "Lol",
          "type": "text",
          "validationRule": null,
        },
      ]
    }
    responses={Array []}
    unstable__enableCapcoUiDs={true}
  />
  <Field
    component={[Function]}
    divClassName="bo_width_747 proposal_media_container"
    help={
      <span>
        Illustration help
        Â 
        <FormattedHTMLMessage
          id="illustration-help-text"
          tagName="span"
          values={Object {}}
        />
      </span>
    }
    id="proposal_media"
    label={
      <span>
        proposal.media
        <Text
          as="span"
          color="#707070"
          fontWeight="normal"
        >
           
          global.optional
        </Text>
      </span>
    }
    maxSize="4000000"
    name="media"
    type="image"
  />
  <ProposalForm__ExternalLinks
    backgroundColor="#ffffff"
    className="external-links"
    paddingY={8}
  >
    <Text
      as="h3"
      color="#272B30"
      display="flex"
      fontSize="14px"
      fontWeight="600"
      lineHeight="24px"
      mb={6}
    >
      your-external-links
    </Text>
    <Field
      component={[Function]}
      id="proposal_wep_page"
      label="form.label_website"
      name="webPageUrl"
      placeholder="your-url"
      type="text"
    />
    <Field
      component={[Function]}
      id="proposal_twitter"
      label="share.twitter"
      name="twitterUrl"
      placeholder="https://x.com/pseudo"
      type="text"
    />
    <Field
      component={[Function]}
      id="proposal_facebook"
      label="share.facebook"
      name="facebookUrl"
      placeholder="https://facebook.com/pseudo"
      type="text"
    />
    <Field
      component={[Function]}
      id="proposal_instagram"
      label="instagram"
      name="instagramUrl"
      placeholder="https://instagram.com/pseudo"
      type="text"
    />
    <Field
      component={[Function]}
      id="proposal_linkedin"
      label="share.linkedin"
      name="linkedInUrl"
      placeholder="https://linkedin.com/in/pseudo"
      type="text"
    />
    <Field
      component={[Function]}
      id="proposal_youtube"
      label="youtube"
      name="youtubeUrl"
      placeholder="https://youtube.com/channel/pseudo"
      type="text"
    />
  </ProposalForm__ExternalLinks>
</form>
`;

exports[`<ProposalForm /> should render an edit form 1`] = `
<form
  id="proposal-form"
>
  <WYSIWYGRender
    className="mb-15"
    value="Description 1"
  />
  <Field
    addonAfter={
      <Glyphicon
        bsClass="glyphicon"
        className=""
        glyph="refresh"
      />
    }
    autoComplete="off"
    component={[Function]}
    divClassName="bo_width_747 proposal_title_container"
    help="Title help"
    id="proposal_title"
    label={
      <FormattedMessage
        id="global.title"
        values={Object {}}
      />
    }
    name="title"
    placeholder={null}
    type="text"
  />
  <Collapse
    appear={false}
    dimension="height"
    getDimensionValue={[Function]}
    in={false}
    mountOnEnter={false}
    timeout={300}
    unmountOnExit={false}
  >
    <Uncontrolled(Panel)>
      <PanelHeading
        bsClass="panel"
        componentClass="div"
      >
        <PanelTitle
          bsClass="panel"
          componentClass="div"
        >
          <FormattedMessage
            id="proposal.suggest_header"
            values={
              Object {
                "matches": 0,
                "terms": 2,
              }
            }
          />
          <Button
            active={false}
            block={false}
            bsClass="btn"
            bsStyle="default"
            className="pull-right"
            disabled={false}
            onClick={[Function]}
            style={
              Object {
                "marginTop": -5,
              }
            }
          >
            global.close
          </Button>
        </PanelTitle>
      </PanelHeading>
      <ListGroup
        bsClass="list-group"
      />
    </Uncontrolled(Panel)>
  </Collapse>
  <Field
    autoComplete="off"
    component={[Function]}
    divClassName="bo_width_747 proposal_summary_container"
    help="Summary help"
    id="global.summary"
    label={
      <span>
        global.summary
        <Text
          as="span"
          color="#707070"
          fontWeight="normal"
        >
           
          global.optional
        </Text>
      </span>
    }
    maxLength="140"
    minLength="2"
    name="summary"
    placeholder={null}
    type="textarea"
  />
  <Field
    component={[Function]}
    divClassName="bo_width_560 proposal_theme_container"
    help="Theme help"
    id="global.theme"
    label={
      <span>
        global.theme
      </span>
    }
    name="theme"
    type="select"
  >
    <FormattedMessage
      id="proposal.select.theme"
      values={Object {}}
    >
      <Component />
    </FormattedMessage>
    <option
      key="theme1"
      value="theme1"
    >
      Theme 1
    </option>
  </Field>
  <Field
    component={[Function]}
    divClassName="bo_width_560 proposal_category_container"
    help="Category help"
    id="global.category"
    label={
      <span>
        global.category
      </span>
    }
    name="category"
    type="select"
  >
    <FormattedMessage
      id="proposal.select.category"
      values={Object {}}
    >
      <Component />
    </FormattedMessage>
    <option
      key="category1"
      value="category1"
    >
      Category 1
    </option>
    <option
      key="category2"
      value="category2"
    >
      Category 2
    </option>
  </Field>
  <Field
    addressProps={
      Object {
        "getAddress": [Function],
      }
    }
    component={[Function]}
    divClassName="bo_width_560 proposal_addressText_container"
    formName="proposal-form"
    help="Address help"
    id="proposal_address"
    label="proposal_form.address"
    name="addressText"
    placeholder="proposal.map.form.placeholder"
    type="address"
  />
  <ProposalFormMapPreview
    address={null}
    categories={
      Array [
        Object {
          "color": "blue",
          "icon": null,
          "id": "category1",
          "name": "Category 1",
        },
        Object {
          "color": "red",
          "icon": "tractor",
          "id": "category2",
          "name": "Category 2",
        },
      ]
    }
    category={null}
  />
  <Field
    component={[Function]}
    divClassName="bo_width_560 proposal_district_container"
    help="District help"
    id="proposal_district"
    label={
      <span>
        proposal.district
      </span>
    }
    name="district"
    type="select"
  >
    <FormattedMessage
      id="proposal.select.district"
      values={Object {}}
    >
      <Component />
    </FormattedMessage>
    <option
      key="district1"
      value="district1"
    >
      District 1
    </option>
    <option
      key="district2"
      value="district2"
    >
      District 2
    </option>
  </Field>
  <Field
    component={[Function]}
    divClassName="bo_width_560 proposal_body_container"
    help="Description help"
    id="proposal_body"
    label={
      <span>
        proposal.body
      </span>
    }
    name="body"
    placeholder={null}
    type="editor-ds"
  />
  <FieldArray
    change={[MockFunction]}
    component={[Function]}
    dispatch={[MockFunction]}
    divClassName="bo_width_747_container"
    form="formName"
    intl={
      Object {
        "formatDate": [Function],
        "formatHTMLMessage": [Function],
        "formatMessage": [Function],
        "formatNumber": [Function],
        "formatPlural": [Function],
        "formatRelative": [Function],
        "formatTime": [Function],
        "formats": Object {},
        "locale": "fr-FR",
        "messages": Object {},
        "now": [Function],
      }
    }
    memoize={[Function]}
    memoizeId="proposalForm1"
    name="responses"
    questions={
      Array [
        Object {
          "__typename": "SimpleQuestion",
          "alwaysJumpDestinationQuestion": null,
          "choices": Object {
            "edges": Array [],
            "pageInfo": Object {
              "hasNextPage": false,
            },
            "totalCount": 0,
          },
          "description": null,
          "destinationJumps": Array [],
          "helpText": "Question 1",
          "hidden": false,
          "id": "question1",
          "isOtherAllowed": false,
          "isRangeBetween": true,
          "jumps": Array [],
          "level": null,
          "number": 1,
          "position": 1,
          "private": true,
          "rangeMax": 10,
          "rangeMin": 0,
          "required": true,
          "title": "Lol",
          "type": "text",
          "validationRule": null,
        },
      ]
    }
    responses={Array []}
    unstable__enableCapcoUiDs={true}
  />
  <Field
    component={[Function]}
    divClassName="bo_width_747 proposal_media_container"
    help={
      <span>
        Illustration help
        Â 
        <FormattedHTMLMessage
          id="illustration-help-text"
          tagName="span"
          values={Object {}}
        />
      </span>
    }
    id="proposal_media"
    label={
      <span>
        proposal.media
        <Text
          as="span"
          color="#707070"
          fontWeight="normal"
        >
           
          global.optional
        </Text>
      </span>
    }
    maxSize="4000000"
    name="media"
    type="image"
  />
  <ProposalForm__ExternalLinks
    backgroundColor="#ffffff"
    className="external-links"
    paddingY={8}
  >
    <Text
      as="h3"
      color="#272B30"
      display="flex"
      fontSize="14px"
      fontWeight="600"
      lineHeight="24px"
      mb={6}
    >
      your-external-links
    </Text>
    <Field
      component={[Function]}
      id="proposal_wep_page"
      label="form.label_website"
      name="webPageUrl"
      placeholder="your-url"
      type="text"
    />
    <Field
      component={[Function]}
      id="proposal_twitter"
      label="share.twitter"
      name="twitterUrl"
      placeholder="https://x.com/pseudo"
      type="text"
    />
    <Field
      component={[Function]}
      id="proposal_facebook"
      label="share.facebook"
      name="facebookUrl"
      placeholder="https://facebook.com/pseudo"
      type="text"
    />
    <Field
      component={[Function]}
      id="proposal_instagram"
      label="instagram"
      name="instagramUrl"
      placeholder="https://instagram.com/pseudo"
      type="text"
    />
    <Field
      component={[Function]}
      id="proposal_linkedin"
      label="share.linkedin"
      name="linkedInUrl"
      placeholder="https://linkedin.com/in/pseudo"
      type="text"
    />
    <Field
      component={[Function]}
      id="proposal_youtube"
      label="youtube"
      name="youtubeUrl"
      placeholder="https://youtube.com/channel/pseudo"
      type="text"
    />
  </ProposalForm__ExternalLinks>
</form>
`;
