// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<DebateStepPageAbsoluteVoteAndShare /> when the query is on desktop renders correctly 1`] = `
Array [
  <div
    className="sc-bcXGCL cgAMhb toasts-container toasts-container--top"
  />,
  <div
    className="sc-bcXGCL cgAMhb toasts-container toasts-container--top"
  />,
  <div
    className="sc-bcXGCL haernw"
  >
    <div
      className="sc-bcXGCL Hoyqa container"
    >
      <div
        className="sc-bcXGCL iPeShj"
      >
        <p
          className="sc-bcXGCL igxOtZ cap-text"
          style={
            Object {
              "marginLeft": 0,
              "marginTop": 0,
            }
          }
        >
          &lt;mock-value-for-field-"title"&gt;
        </p>
        <div
          className="sc-bcXGCL jUtUph"
          style={
            Object {
              "opacity": 0,
            }
          }
        >
          <button
            aria-controls="popover-overlay"
            aria-expanded={false}
            aria-haspopup="dialog"
            className="sc-bcXGCL itMhoZ"
            onClick={[Function]}
            onClickCapture={[Function]}
            onKeyDown={[Function]}
            onKeyPressCapture={[Function]}
            onKeyUp={[Function]}
            onMouseDown={[Function]}
            onMouseDownCapture={[Function]}
            onMouseEnter={[Function]}
            onMouseLeave={[Function]}
            type="button"
          >
            <div
              className="sc-bcXGCL jNQjOz"
            >
              <svg
                className="sc-bcXGCL sc-eJDTud fBGKel hEjMCZ cap-icon"
                fill="none"
                viewBox="0 0 32 29"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  d="M32 13.09a3.334 3.334 0 00-3.333-3.333h-8.415a.333.333 0 01-.316-.437 11.58 11.58 0 00.693-5.876c-.784-2.8-2.445-3.6-3.744-3.42a2.667 2.667 0 00-2.218 2.733c0 3.662-2.839 7.662-5.379 9.415a.666.666 0 00-.288.55v13.487a.667.667 0 00.54.655c.476.09.908.18 1.316.267 1.794.427 3.633.637 5.477.628H25c2.61 0 3-1.467 3-2.334 0-.46-.105-.914-.308-1.326a3.001 3.001 0 001.333-4 3 3 0 001.279-4.104A3.334 3.334 0 0032 13.09zM7 12.757a1.333 1.333 0 00-1.333-1.333H1.333A1.333 1.333 0 000 12.757v14.667a1.333 1.333 0 001.333 1.333h4.334A1.334 1.334 0 007 27.424V12.757zM5 25.091a1 1 0 11-2 0 1 1 0 012 0z"
                  fill="currentColor"
                />
              </svg>
              <p
                className="sc-bcXGCL jMALnA cap-text"
              >
                global.for
              </p>
            </div>
          </button>
          <div
            animated={false}
            animating={false}
            aria-label="vote.popover.title"
            as={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [
                  Object {
                    "maxWidth": "280px",
                    "zIndex": 1040,
                  },
                ],
                "componentStyle": e {
                  "baseHash": -1884068249,
                  "baseStyle": e {
                    "baseHash": -120292040,
                    "baseStyle": undefined,
                    "componentId": "sc-bcXGCL",
                    "isStatic": false,
                    "rules": Array [
                      [Function],
                      [Function],
                      [Function],
                      [Function],
                    ],
                    "staticRulesId": "",
                  },
                  "componentId": "LoginOverlay__PopoverContainer-jXFGkY",
                  "isStatic": false,
                  "rules": Array [
                    "outline:none;",
                  ],
                  "staticRulesId": "",
                },
                "foldedComponentIds": "sc-bcXGCL",
                "render": [Function],
                "shouldForwardProp": [Function],
                "styledComponentId": "LoginOverlay__PopoverContainer-jXFGkY",
                "target": "div",
                "warnTooManyClasses": [Function],
              }
            }
            baseId="popover-overlay"
            borderRadius="popover"
            boxShadow="0 5px 10px rgb(0 0 0 / 20%)"
            data-testid="Popover"
            hide={[Function]}
            id="login-popover"
            modal={false}
            place={[Function]}
            placement="bottom"
            setAnimated={[Function]}
            setBaseId={[Function]}
            setModal={[Function]}
            setVisible={[Function]}
            show={[Function]}
            stopAnimation={[Function]}
            tabIndex={0}
            toggle={[Function]}
            unstable_arrowRef={
              Object {
                "current": null,
              }
            }
            unstable_arrowStyles={Object {}}
            unstable_disclosureRef={
              Object {
                "current": null,
              }
            }
            unstable_idCountRef={
              Object {
                "current": 0,
              }
            }
            unstable_originalPlacement="bottom"
            unstable_popoverRef={
              Object {
                "current": null,
              }
            }
            unstable_popoverStyles={
              Object {
                "left": "100%",
                "position": "fixed",
                "top": "100%",
              }
            }
            unstable_referenceRef={
              Object {
                "current": null,
              }
            }
            unstable_update={[Function]}
            visible={false}
          >
            <div
              className="sc-bcXGCL LoginOverlay__Arrow-jnwUOf fQMUzr bAlxBy"
              style={
                Object {
                  "bottom": "100%",
                  "fontSize": 30,
                  "height": "1em",
                  "pointerEvents": "none",
                  "width": "1em",
                }
              }
            >
              <svg
                style={
                  Object {
                    "transform": "rotateZ(360deg)",
                  }
                }
                viewBox="0 0 30 30"
              >
                <path
                  className="stroke"
                  d="M23.7,27.1L17,19.9C16.5,19.3,15.8,19,15,19s-1.6,0.3-2.1,0.9l-6.6,7.2C5.3,28.1,3.4,29,2,29h26 C26.7,29,24.6,28.1,23.7,27.1z"
                />
                <path
                  className="fill"
                  d="M23,27.8c1.1,1.2,3.4,2.2,5,2.2h2H0h2c1.7,0,3.9-1,5-2.2l6.6-7.2c0.7-0.8,2-0.8,2.7,0L23,27.8L23,27.8z"
                />
              </svg>
            </div>
            <div
              className="sc-bcXGCL rfkcq"
            >
              <p
                className="sc-bcXGCL yBlZV cap-text"
              >
                vote.popover.title
              </p>
              <div
                className="sc-bcXGCL ecTirb"
              >
                <p
                  className="sc-bcXGCL bMwsnA cap-text"
                  style={
                    Object {
                      "marginLeft": 0,
                      "marginTop": 0,
                    }
                  }
                >
                  vote.popover.body
                </p>
                <span
                  className="sc-dEVMhd gAPqvV"
                  clip="rect(0px, 0px, 0px, 0px)"
                >
                  <button
                    className="sc-bcXGCL sc-laZSpB cbEpJS ktRJXy cap-button"
                    onClick={[Function]}
                    type="button"
                  >
                    global.close
                  </button>
                </span>
                <button
                  aria-label="open.connection_modal"
                  className="sc-bcXGCL sc-laZSpB kXelHu ktRJXy cap-button"
                  id="login-button"
                  onClick={[Function]}
                  type="button"
                >
                  global.login
                </button>
              </div>
            </div>
          </div>
          <button
            aria-controls="popover-overlay"
            aria-expanded={false}
            aria-haspopup="dialog"
            className="sc-bcXGCL eleOfw"
            onClick={[Function]}
            onClickCapture={[Function]}
            onKeyDown={[Function]}
            onKeyPressCapture={[Function]}
            onKeyUp={[Function]}
            onMouseDown={[Function]}
            onMouseDownCapture={[Function]}
            onMouseEnter={[Function]}
            onMouseLeave={[Function]}
            type="button"
          >
            <div
              className="sc-bcXGCL jNQjOz"
            >
              <svg
                className="sc-bcXGCL sc-eJDTud fBGKel hEjMCZ cap-icon"
                fill="none"
                viewBox="0 0 32 29"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  d="M0 15.667A3.333 3.333 0 003.333 19h8.415a.333.333 0 01.316.437 11.58 11.58 0 00-.693 5.876c.784 2.8 2.445 3.6 3.744 3.42A2.666 2.666 0 0017.333 26c0-3.661 2.839-7.661 5.379-9.415a.667.667 0 00.288-.549V2.548a.667.667 0 00-.54-.655 62.62 62.62 0 01-1.316-.266 23.148 23.148 0 00-5.477-.628H7C4.39 1 4 2.46 4 3.333c-.002.463.104.919.308 1.334a3.001 3.001 0 00-1.333 4 3 3 0 00-1.279 4.104A3.333 3.333 0 000 15.667zM25 16a1.333 1.333 0 001.333 1.333h4.334A1.333 1.333 0 0032 16V1.333A1.334 1.334 0 0030.667 0h-4.334A1.333 1.333 0 0025 1.333V16zm2-12.333a1 1 0 112 0 1 1 0 01-2 0z"
                  fill="currentColor"
                />
              </svg>
              <p
                className="sc-bcXGCL jMALnA cap-text"
              >
                global.against
              </p>
            </div>
          </button>
          <div
            animated={false}
            animating={false}
            aria-label="vote.popover.title"
            as={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [
                  Object {
                    "maxWidth": "280px",
                    "zIndex": 1040,
                  },
                ],
                "componentStyle": e {
                  "baseHash": -1884068249,
                  "baseStyle": e {
                    "baseHash": -120292040,
                    "baseStyle": undefined,
                    "componentId": "sc-bcXGCL",
                    "isStatic": false,
                    "rules": Array [
                      [Function],
                      [Function],
                      [Function],
                      [Function],
                    ],
                    "staticRulesId": "",
                  },
                  "componentId": "LoginOverlay__PopoverContainer-jXFGkY",
                  "isStatic": false,
                  "rules": Array [
                    "outline:none;",
                  ],
                  "staticRulesId": "",
                },
                "foldedComponentIds": "sc-bcXGCL",
                "render": [Function],
                "shouldForwardProp": [Function],
                "styledComponentId": "LoginOverlay__PopoverContainer-jXFGkY",
                "target": "div",
                "warnTooManyClasses": [Function],
              }
            }
            baseId="popover-overlay"
            borderRadius="popover"
            boxShadow="0 5px 10px rgb(0 0 0 / 20%)"
            data-testid="Popover"
            hide={[Function]}
            id="login-popover"
            modal={false}
            place={[Function]}
            placement="bottom"
            setAnimated={[Function]}
            setBaseId={[Function]}
            setModal={[Function]}
            setVisible={[Function]}
            show={[Function]}
            stopAnimation={[Function]}
            tabIndex={0}
            toggle={[Function]}
            unstable_arrowRef={
              Object {
                "current": null,
              }
            }
            unstable_arrowStyles={Object {}}
            unstable_disclosureRef={
              Object {
                "current": null,
              }
            }
            unstable_idCountRef={
              Object {
                "current": 0,
              }
            }
            unstable_originalPlacement="bottom"
            unstable_popoverRef={
              Object {
                "current": null,
              }
            }
            unstable_popoverStyles={
              Object {
                "left": "100%",
                "position": "fixed",
                "top": "100%",
              }
            }
            unstable_referenceRef={
              Object {
                "current": null,
              }
            }
            unstable_update={[Function]}
            visible={false}
          >
            <div
              className="sc-bcXGCL LoginOverlay__Arrow-jnwUOf fQMUzr bAlxBy"
              style={
                Object {
                  "bottom": "100%",
                  "fontSize": 30,
                  "height": "1em",
                  "pointerEvents": "none",
                  "width": "1em",
                }
              }
            >
              <svg
                style={
                  Object {
                    "transform": "rotateZ(360deg)",
                  }
                }
                viewBox="0 0 30 30"
              >
                <path
                  className="stroke"
                  d="M23.7,27.1L17,19.9C16.5,19.3,15.8,19,15,19s-1.6,0.3-2.1,0.9l-6.6,7.2C5.3,28.1,3.4,29,2,29h26 C26.7,29,24.6,28.1,23.7,27.1z"
                />
                <path
                  className="fill"
                  d="M23,27.8c1.1,1.2,3.4,2.2,5,2.2h2H0h2c1.7,0,3.9-1,5-2.2l6.6-7.2c0.7-0.8,2-0.8,2.7,0L23,27.8L23,27.8z"
                />
              </svg>
            </div>
            <div
              className="sc-bcXGCL rfkcq"
            >
              <p
                className="sc-bcXGCL yBlZV cap-text"
              >
                vote.popover.title
              </p>
              <div
                className="sc-bcXGCL ecTirb"
              >
                <p
                  className="sc-bcXGCL bMwsnA cap-text"
                  style={
                    Object {
                      "marginLeft": 0,
                      "marginTop": 0,
                    }
                  }
                >
                  vote.popover.body
                </p>
                <span
                  className="sc-dEVMhd gAPqvV"
                  clip="rect(0px, 0px, 0px, 0px)"
                >
                  <button
                    className="sc-bcXGCL sc-laZSpB cbEpJS ktRJXy cap-button"
                    onClick={[Function]}
                    type="button"
                  >
                    global.close
                  </button>
                </span>
                <button
                  aria-label="open.connection_modal"
                  className="sc-bcXGCL sc-laZSpB kXelHu ktRJXy cap-button"
                  id="login-button"
                  onClick={[Function]}
                  type="button"
                >
                  global.login
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>,
]
`;

exports[`<DebateStepPageAbsoluteVoteAndShare /> when the query is on desktop renders correctly when argumented 1`] = `
Array [
  <div
    className="sc-bcXGCL cgAMhb toasts-container toasts-container--top"
  />,
  <div
    className="sc-bcXGCL cgAMhb toasts-container toasts-container--top"
  />,
  <div
    className="sc-bcXGCL haernw"
  >
    <div
      className="sc-bcXGCL Hoyqa container"
    >
      <div
        style={
          Object {
            "opacity": 0,
            "width": "100%",
          }
        }
      >
        <div
          className="sc-bcXGCL eSIWuZ"
        >
          <span
            aria-label="vote"
            className="DebateStepPageVoteForm___StyledSpan2-llVMxp jJypkj"
            role="img"
          >
            🎉
          </span>
          <span
            dangerouslySetInnerHTML={
              Object {
                "__html": "thanks-for-debate-richer",
              }
            }
          />
          <button
            className="sc-bcXGCL sc-laZSpB hNWlWk csqMOQ cap-button"
            onClick={[Function]}
            type="button"
          >
            delete.vote.against
          </button>
        </div>
        <div
          className="sc-bcXGCL kVWsnw"
        >
          <iframe
            allow="autoplay; clipboard-write; encrypted-media; picture-in-picture; web-share"
            allowFullScreen={true}
            frameBorder="0"
            height="20"
            scrolling="no"
            src="https://www.facebook.com/plugins/share_button.php?href=/debate/pour-ou-contre&layout=button_count&size=small&width=91&height=20&appId"
            style={
              Object {
                "marginLeft": 0,
                "marginTop": 0,
              }
            }
            title="facebook share button"
            width="91"
          />
          <a
            className="twitter-share-button"
            data-show-count="false"
            href="https://twitter.com/share?ref_src=twsrc%5Etfw"
          >
            Tweet
          </a>
          <div
            data-testid="Tooltip"
            label="copied-link"
          >
            <button
              className="sc-bcXGCL sc-laZSpB gHhxfT jEfYyY cap-button"
              onClick={[Function]}
              type="button"
            >
              <svg
                className="sc-bcXGCL sc-eJDTud fpzUrh knzWyK cap-icon"
                fill="none"
                viewBox="0 0 32 32"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  d="M13.944 24.499l-3.65 3.648a3.804 3.804 0 01-5.255 0l-1.19-1.188a3.716 3.716 0 010-5.255l7.734-7.733a3.719 3.719 0 015.256 0l1.19 1.189a1.337 1.337 0 001.891-1.89l-1.19-1.19a6.388 6.388 0 00-9.029 0l-7.733 7.733a6.383 6.383 0 000 9.027l1.19 1.188a6.38 6.38 0 009.027 0l3.648-3.647a1.335 1.335 0 00-1.885-1.886l-.004.004z"
                  fill="currentColor"
                />
                <path
                  d="M30.035 3.15l-1.19-1.189a6.4 6.4 0 00-9.026 0l-3.874 3.867a1.333 1.333 0 001.886 1.885l3.866-3.866a3.72 3.72 0 015.255 0l1.19 1.19a3.715 3.715 0 010 5.256l-7.733 7.734a3.692 3.692 0 01-2.628 1.089 3.687 3.687 0 01-2.625-1.088 1.334 1.334 0 10-1.887 1.883 6.336 6.336 0 004.512 1.866 6.336 6.336 0 004.514-1.866l7.733-7.734a6.38 6.38 0 000-9.028l.007.002z"
                  fill="currentColor"
                />
              </svg>
              global.link
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>,
]
`;

exports[`<DebateStepPageAbsoluteVoteAndShare /> when the query is on desktop renders correctly when voted 1`] = `
Array [
  <div
    className="sc-bcXGCL cgAMhb toasts-container toasts-container--top"
  />,
  <div
    className="sc-bcXGCL cgAMhb toasts-container toasts-container--top"
  />,
  <div
    className="sc-bcXGCL hyuAwu"
  >
    <div
      className="sc-bcXGCL Hoyqa container"
    >
      <div
        style={
          Object {
            "opacity": 0,
            "width": "100%",
          }
        }
      >
        <div
          className="sc-bcXGCL eSIWuZ"
        >
          <span
            aria-label="vote"
            className="DebateStepPageVoteForm___StyledSpan2-llVMxp jJypkj"
            role="img"
          >
            🗳️
          </span>
          <span
            dangerouslySetInnerHTML={
              Object {
                "__html": "thanks-for-your-vote",
              }
            }
          />
          <button
            className="sc-bcXGCL sc-laZSpB hNWlWk csqMOQ cap-button"
            onClick={[Function]}
            type="button"
          >
            delete.vote.against
          </button>
        </div>
        <div
          className="sc-bcXGCL dLHpLx cap-card DebateStepPageVoteForm___StyledCard-fhHJyb kRMgRs"
        >
          <form
            className="DebateStepPageVoteForm__Form-kprBSF GzXgt"
            disabled={false}
            id="debate-argument-form"
            onSubmit={[Function]}
          >
            <div
              className="form-group"
            >
              <textarea
                aria-describedby="label-body "
                aria-invalid={false}
                autoComplete="off"
                autoFocus={false}
                className="form-control"
                id="body"
                minLength="1"
                name="body"
                onBlur={[Function]}
                onChange={[Function]}
                onDragStart={[Function]}
                onDrop={[Function]}
                onFocus={[Function]}
                placeholder="why-are-you-against"
                type="textarea"
                value=""
                warnings={null}
              />
              <div
                className="Notepad__Container-imViwV dJKVKi visible-print-block"
              >
                <span />
                <span />
                <span />
                <span />
                <span />
                <span />
                <span />
                <span />
                <span />
                <span />
                <span />
                <span />
                <span />
                <span />
                <span />
              </div>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>,
]
`;

exports[`<DebateStepPageAbsoluteVoteAndShare /> when the query is on mobile renders correctly 1`] = `
Array [
  <div
    className="sc-bcXGCL cgAMhb toasts-container toasts-container--top"
  />,
  <div
    className="sc-bcXGCL cgAMhb toasts-container toasts-container--top"
  />,
  <div
    className="sc-bcXGCL kNdHYq"
  >
    <div
      className="sc-bcXGCL Hoyqa container"
    >
      <div
        className="sc-bcXGCL iPeShj"
      >
        <p
          className="sc-bcXGCL igxOtZ cap-text"
          style={
            Object {
              "marginLeft": 0,
              "marginTop": 0,
            }
          }
        >
          &lt;mock-value-for-field-"title"&gt;
        </p>
        <div
          className="sc-bcXGCL jUtUph"
          style={
            Object {
              "opacity": 0,
            }
          }
        >
          <button
            aria-controls="popover-overlay"
            aria-expanded={false}
            aria-haspopup="dialog"
            className="sc-bcXGCL itMhoZ"
            onClick={[Function]}
            onClickCapture={[Function]}
            onKeyDown={[Function]}
            onKeyPressCapture={[Function]}
            onKeyUp={[Function]}
            onMouseDown={[Function]}
            onMouseDownCapture={[Function]}
            onMouseEnter={[Function]}
            onMouseLeave={[Function]}
            type="button"
          >
            <div
              className="sc-bcXGCL jNQjOz"
            >
              <svg
                className="sc-bcXGCL sc-eJDTud fBGKel hEjMCZ cap-icon"
                fill="none"
                viewBox="0 0 32 29"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  d="M32 13.09a3.334 3.334 0 00-3.333-3.333h-8.415a.333.333 0 01-.316-.437 11.58 11.58 0 00.693-5.876c-.784-2.8-2.445-3.6-3.744-3.42a2.667 2.667 0 00-2.218 2.733c0 3.662-2.839 7.662-5.379 9.415a.666.666 0 00-.288.55v13.487a.667.667 0 00.54.655c.476.09.908.18 1.316.267 1.794.427 3.633.637 5.477.628H25c2.61 0 3-1.467 3-2.334 0-.46-.105-.914-.308-1.326a3.001 3.001 0 001.333-4 3 3 0 001.279-4.104A3.334 3.334 0 0032 13.09zM7 12.757a1.333 1.333 0 00-1.333-1.333H1.333A1.333 1.333 0 000 12.757v14.667a1.333 1.333 0 001.333 1.333h4.334A1.334 1.334 0 007 27.424V12.757zM5 25.091a1 1 0 11-2 0 1 1 0 012 0z"
                  fill="currentColor"
                />
              </svg>
              <p
                className="sc-bcXGCL jMALnA cap-text"
              >
                global.for
              </p>
            </div>
          </button>
          <div
            animated={false}
            animating={false}
            aria-label="vote.popover.title"
            as={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [
                  Object {
                    "maxWidth": "280px",
                    "zIndex": 1040,
                  },
                ],
                "componentStyle": e {
                  "baseHash": -1884068249,
                  "baseStyle": e {
                    "baseHash": -120292040,
                    "baseStyle": undefined,
                    "componentId": "sc-bcXGCL",
                    "isStatic": false,
                    "rules": Array [
                      [Function],
                      [Function],
                      [Function],
                      [Function],
                    ],
                    "staticRulesId": "",
                  },
                  "componentId": "LoginOverlay__PopoverContainer-jXFGkY",
                  "isStatic": false,
                  "rules": Array [
                    "outline:none;",
                  ],
                  "staticRulesId": "",
                },
                "foldedComponentIds": "sc-bcXGCL",
                "render": [Function],
                "shouldForwardProp": [Function],
                "styledComponentId": "LoginOverlay__PopoverContainer-jXFGkY",
                "target": "div",
                "warnTooManyClasses": [Function],
              }
            }
            baseId="popover-overlay"
            borderRadius="popover"
            boxShadow="0 5px 10px rgb(0 0 0 / 20%)"
            data-testid="Popover"
            hide={[Function]}
            id="login-popover"
            modal={false}
            place={[Function]}
            placement="top"
            setAnimated={[Function]}
            setBaseId={[Function]}
            setModal={[Function]}
            setVisible={[Function]}
            show={[Function]}
            stopAnimation={[Function]}
            tabIndex={0}
            toggle={[Function]}
            unstable_arrowRef={
              Object {
                "current": null,
              }
            }
            unstable_arrowStyles={Object {}}
            unstable_disclosureRef={
              Object {
                "current": null,
              }
            }
            unstable_idCountRef={
              Object {
                "current": 0,
              }
            }
            unstable_originalPlacement="top"
            unstable_popoverRef={
              Object {
                "current": null,
              }
            }
            unstable_popoverStyles={
              Object {
                "left": "100%",
                "position": "fixed",
                "top": "100%",
              }
            }
            unstable_referenceRef={
              Object {
                "current": null,
              }
            }
            unstable_update={[Function]}
            visible={false}
          >
            <div
              className="sc-bcXGCL LoginOverlay__Arrow-jnwUOf isVmUj csqehL"
              style={
                Object {
                  "fontSize": 30,
                  "height": "1em",
                  "pointerEvents": "none",
                  "top": "100%",
                  "width": "1em",
                }
              }
            >
              <svg
                style={
                  Object {
                    "transform": "rotateZ(180deg)",
                  }
                }
                viewBox="0 0 30 30"
              >
                <path
                  className="stroke"
                  d="M23.7,27.1L17,19.9C16.5,19.3,15.8,19,15,19s-1.6,0.3-2.1,0.9l-6.6,7.2C5.3,28.1,3.4,29,2,29h26 C26.7,29,24.6,28.1,23.7,27.1z"
                />
                <path
                  className="fill"
                  d="M23,27.8c1.1,1.2,3.4,2.2,5,2.2h2H0h2c1.7,0,3.9-1,5-2.2l6.6-7.2c0.7-0.8,2-0.8,2.7,0L23,27.8L23,27.8z"
                />
              </svg>
            </div>
            <div
              className="sc-bcXGCL rfkcq"
            >
              <p
                className="sc-bcXGCL yBlZV cap-text"
              >
                vote.popover.title
              </p>
              <div
                className="sc-bcXGCL ecTirb"
              >
                <p
                  className="sc-bcXGCL bMwsnA cap-text"
                  style={
                    Object {
                      "marginLeft": 0,
                      "marginTop": 0,
                    }
                  }
                >
                  vote.popover.body
                </p>
                <span
                  className="sc-dEVMhd gAPqvV"
                  clip="rect(0px, 0px, 0px, 0px)"
                >
                  <button
                    className="sc-bcXGCL sc-laZSpB cbEpJS ktRJXy cap-button"
                    onClick={[Function]}
                    type="button"
                  >
                    global.close
                  </button>
                </span>
                <button
                  aria-label="open.connection_modal"
                  className="sc-bcXGCL sc-laZSpB kXelHu ktRJXy cap-button"
                  id="login-button"
                  onClick={[Function]}
                  type="button"
                >
                  global.login
                </button>
              </div>
            </div>
          </div>
          <button
            aria-controls="popover-overlay"
            aria-expanded={false}
            aria-haspopup="dialog"
            className="sc-bcXGCL eleOfw"
            onClick={[Function]}
            onClickCapture={[Function]}
            onKeyDown={[Function]}
            onKeyPressCapture={[Function]}
            onKeyUp={[Function]}
            onMouseDown={[Function]}
            onMouseDownCapture={[Function]}
            onMouseEnter={[Function]}
            onMouseLeave={[Function]}
            type="button"
          >
            <div
              className="sc-bcXGCL jNQjOz"
            >
              <svg
                className="sc-bcXGCL sc-eJDTud fBGKel hEjMCZ cap-icon"
                fill="none"
                viewBox="0 0 32 29"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  d="M0 15.667A3.333 3.333 0 003.333 19h8.415a.333.333 0 01.316.437 11.58 11.58 0 00-.693 5.876c.784 2.8 2.445 3.6 3.744 3.42A2.666 2.666 0 0017.333 26c0-3.661 2.839-7.661 5.379-9.415a.667.667 0 00.288-.549V2.548a.667.667 0 00-.54-.655 62.62 62.62 0 01-1.316-.266 23.148 23.148 0 00-5.477-.628H7C4.39 1 4 2.46 4 3.333c-.002.463.104.919.308 1.334a3.001 3.001 0 00-1.333 4 3 3 0 00-1.279 4.104A3.333 3.333 0 000 15.667zM25 16a1.333 1.333 0 001.333 1.333h4.334A1.333 1.333 0 0032 16V1.333A1.334 1.334 0 0030.667 0h-4.334A1.333 1.333 0 0025 1.333V16zm2-12.333a1 1 0 112 0 1 1 0 01-2 0z"
                  fill="currentColor"
                />
              </svg>
              <p
                className="sc-bcXGCL jMALnA cap-text"
              >
                global.against
              </p>
            </div>
          </button>
          <div
            animated={false}
            animating={false}
            aria-label="vote.popover.title"
            as={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [
                  Object {
                    "maxWidth": "280px",
                    "zIndex": 1040,
                  },
                ],
                "componentStyle": e {
                  "baseHash": -1884068249,
                  "baseStyle": e {
                    "baseHash": -120292040,
                    "baseStyle": undefined,
                    "componentId": "sc-bcXGCL",
                    "isStatic": false,
                    "rules": Array [
                      [Function],
                      [Function],
                      [Function],
                      [Function],
                    ],
                    "staticRulesId": "",
                  },
                  "componentId": "LoginOverlay__PopoverContainer-jXFGkY",
                  "isStatic": false,
                  "rules": Array [
                    "outline:none;",
                  ],
                  "staticRulesId": "",
                },
                "foldedComponentIds": "sc-bcXGCL",
                "render": [Function],
                "shouldForwardProp": [Function],
                "styledComponentId": "LoginOverlay__PopoverContainer-jXFGkY",
                "target": "div",
                "warnTooManyClasses": [Function],
              }
            }
            baseId="popover-overlay"
            borderRadius="popover"
            boxShadow="0 5px 10px rgb(0 0 0 / 20%)"
            data-testid="Popover"
            hide={[Function]}
            id="login-popover"
            modal={false}
            place={[Function]}
            placement="top"
            setAnimated={[Function]}
            setBaseId={[Function]}
            setModal={[Function]}
            setVisible={[Function]}
            show={[Function]}
            stopAnimation={[Function]}
            tabIndex={0}
            toggle={[Function]}
            unstable_arrowRef={
              Object {
                "current": null,
              }
            }
            unstable_arrowStyles={Object {}}
            unstable_disclosureRef={
              Object {
                "current": null,
              }
            }
            unstable_idCountRef={
              Object {
                "current": 0,
              }
            }
            unstable_originalPlacement="top"
            unstable_popoverRef={
              Object {
                "current": null,
              }
            }
            unstable_popoverStyles={
              Object {
                "left": "100%",
                "position": "fixed",
                "top": "100%",
              }
            }
            unstable_referenceRef={
              Object {
                "current": null,
              }
            }
            unstable_update={[Function]}
            visible={false}
          >
            <div
              className="sc-bcXGCL LoginOverlay__Arrow-jnwUOf isVmUj csqehL"
              style={
                Object {
                  "fontSize": 30,
                  "height": "1em",
                  "pointerEvents": "none",
                  "top": "100%",
                  "width": "1em",
                }
              }
            >
              <svg
                style={
                  Object {
                    "transform": "rotateZ(180deg)",
                  }
                }
                viewBox="0 0 30 30"
              >
                <path
                  className="stroke"
                  d="M23.7,27.1L17,19.9C16.5,19.3,15.8,19,15,19s-1.6,0.3-2.1,0.9l-6.6,7.2C5.3,28.1,3.4,29,2,29h26 C26.7,29,24.6,28.1,23.7,27.1z"
                />
                <path
                  className="fill"
                  d="M23,27.8c1.1,1.2,3.4,2.2,5,2.2h2H0h2c1.7,0,3.9-1,5-2.2l6.6-7.2c0.7-0.8,2-0.8,2.7,0L23,27.8L23,27.8z"
                />
              </svg>
            </div>
            <div
              className="sc-bcXGCL rfkcq"
            >
              <p
                className="sc-bcXGCL yBlZV cap-text"
              >
                vote.popover.title
              </p>
              <div
                className="sc-bcXGCL ecTirb"
              >
                <p
                  className="sc-bcXGCL bMwsnA cap-text"
                  style={
                    Object {
                      "marginLeft": 0,
                      "marginTop": 0,
                    }
                  }
                >
                  vote.popover.body
                </p>
                <span
                  className="sc-dEVMhd gAPqvV"
                  clip="rect(0px, 0px, 0px, 0px)"
                >
                  <button
                    className="sc-bcXGCL sc-laZSpB cbEpJS ktRJXy cap-button"
                    onClick={[Function]}
                    type="button"
                  >
                    global.close
                  </button>
                </span>
                <button
                  aria-label="open.connection_modal"
                  className="sc-bcXGCL sc-laZSpB kXelHu ktRJXy cap-button"
                  id="login-button"
                  onClick={[Function]}
                  type="button"
                >
                  global.login
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>,
]
`;

exports[`<DebateStepPageAbsoluteVoteAndShare /> when the query is on mobile renders correctly when argumented 1`] = `
Array [
  <div
    className="sc-bcXGCL cgAMhb toasts-container toasts-container--top"
  />,
  <div
    className="sc-bcXGCL cgAMhb toasts-container toasts-container--top"
  />,
  <div
    className="sc-bcXGCL haernw"
  >
    <div
      className="sc-bcXGCL Hoyqa container"
    >
      <div
        style={
          Object {
            "opacity": 0,
            "width": "100%",
          }
        }
      >
        <div
          className="sc-bcXGCL eSIWuZ"
        >
          <span
            aria-label="vote"
            className="DebateStepPageVoteForm___StyledSpan2-llVMxp jJypkj"
            role="img"
          >
            🎉
          </span>
          <span
            dangerouslySetInnerHTML={
              Object {
                "__html": "thanks-for-debate-richer",
              }
            }
          />
          <button
            className="sc-bcXGCL sc-laZSpB hNWlWk csqMOQ cap-button"
            onClick={[Function]}
            type="button"
          >
            delete.vote.against
          </button>
        </div>
        <div
          className="sc-bcXGCL kVWsnw"
        >
          <iframe
            allow="autoplay; clipboard-write; encrypted-media; picture-in-picture; web-share"
            allowFullScreen={true}
            frameBorder="0"
            height="20"
            scrolling="no"
            src="https://www.facebook.com/plugins/share_button.php?href=/debate/pour-ou-contre&layout=button_count&size=small&width=91&height=20&appId"
            style={
              Object {
                "marginLeft": 0,
                "marginTop": 0,
              }
            }
            title="facebook share button"
            width="91"
          />
          <a
            className="twitter-share-button"
            data-show-count="false"
            href="https://twitter.com/share?ref_src=twsrc%5Etfw"
          >
            Tweet
          </a>
          <div
            data-testid="Tooltip"
            label="copied-link"
          >
            <button
              className="sc-bcXGCL sc-laZSpB gHhxfT jEfYyY cap-button"
              onClick={[Function]}
              type="button"
            >
              <svg
                className="sc-bcXGCL sc-eJDTud fpzUrh knzWyK cap-icon"
                fill="none"
                viewBox="0 0 32 32"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  d="M13.944 24.499l-3.65 3.648a3.804 3.804 0 01-5.255 0l-1.19-1.188a3.716 3.716 0 010-5.255l7.734-7.733a3.719 3.719 0 015.256 0l1.19 1.189a1.337 1.337 0 001.891-1.89l-1.19-1.19a6.388 6.388 0 00-9.029 0l-7.733 7.733a6.383 6.383 0 000 9.027l1.19 1.188a6.38 6.38 0 009.027 0l3.648-3.647a1.335 1.335 0 00-1.885-1.886l-.004.004z"
                  fill="currentColor"
                />
                <path
                  d="M30.035 3.15l-1.19-1.189a6.4 6.4 0 00-9.026 0l-3.874 3.867a1.333 1.333 0 001.886 1.885l3.866-3.866a3.72 3.72 0 015.255 0l1.19 1.19a3.715 3.715 0 010 5.256l-7.733 7.734a3.692 3.692 0 01-2.628 1.089 3.687 3.687 0 01-2.625-1.088 1.334 1.334 0 10-1.887 1.883 6.336 6.336 0 004.512 1.866 6.336 6.336 0 004.514-1.866l7.733-7.734a6.38 6.38 0 000-9.028l.007.002z"
                  fill="currentColor"
                />
              </svg>
              global.link
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>,
]
`;

exports[`<DebateStepPageAbsoluteVoteAndShare /> when the query is on mobile renders correctly when voted 1`] = `
Array [
  <div
    className="sc-bcXGCL cgAMhb toasts-container toasts-container--top"
  />,
  <div
    className="sc-bcXGCL cgAMhb toasts-container toasts-container--top"
  />,
  <div
    className="sc-bcXGCL kNdHYq"
  >
    <div
      className="sc-bcXGCL Hoyqa container"
    >
      <div
        style={
          Object {
            "opacity": 1,
            "width": "100%",
          }
        }
      >
        <div
          className="sc-bcXGCL eSIWuZ"
        >
          <p
            className="sc-bcXGCL eDWurL cap-text"
          >
            <span
              aria-label="vote"
              className="DebateStepPageVoteForm___StyledSpan-bFgDPf jqyYXc"
              role="img"
            >
              🗳️
            </span>
            <span
              dangerouslySetInnerHTML={
                Object {
                  "__html": "thanks-for-your-vote",
                }
              }
            />
          </p>
        </div>
        <button
          className="sc-bcXGCL sc-laZSpB fknmkT ktRJXy cap-button"
          onClick={[Function]}
          type="button"
        >
          publish-argument
        </button>
      </div>
    </div>
  </div>,
]
`;
