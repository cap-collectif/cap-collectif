// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<RegistrationModal /> renders a form 1`] = `
<Fragment>
  <Connect(ChartModal) />
  <RegistrationModal__ModalContainer
    animation={false}
    aria-labelledby="contained-modal-title-lg"
    autoFocus={true}
    backdrop="static"
    bsSize="small"
    enforceFocus={false}
    onHide={[Function]}
    show={true}
  >
    <ModalHeader
      bsClass="modal-header"
      closeButton={true}
      closeLabel="close.modal"
    >
      <ModalTitle
        bsClass="modal-title"
        componentClass="h1"
        id="contained-modal-title-lg"
      >
        <FormattedMessage
          id="global.register"
          values={Object {}}
        />
      </ModalTitle>
    </ModalHeader>
    <ModalBody
      bsClass="modal-body"
      componentClass="div"
    >
      <LoginSocialButtons
        query={
          Object {
            " $fragmentRefs": null,
            " $refType": null,
          }
        }
      />
      <Relay(Connect(injectIntl(ReduxForm)))
        locale="fr-FR"
        query={
          Object {
            " $fragmentRefs": null,
            " $refType": null,
          }
        }
      />
    </ModalBody>
    <ModalFooter
      bsClass="modal-footer"
      componentClass="div"
    >
      <CloseButton
        label="global.cancel"
        onClose={[Function]}
      />
      <Connect(SubmitButton)
        id="confirm-register"
        isSubmitting={false}
        label="global.register"
        onSubmit={[Function]}
      />
    </ModalFooter>
  </RegistrationModal__ModalContainer>
</Fragment>
`;

exports[`<RegistrationModal /> renders a top text and a bottom text if specified 1`] = `
<Fragment>
  <Connect(ChartModal) />
  <RegistrationModal__ModalContainer
    animation={false}
    aria-labelledby="contained-modal-title-lg"
    autoFocus={true}
    backdrop="static"
    bsSize="small"
    enforceFocus={false}
    onHide={[Function]}
    show={true}
  >
    <ModalHeader
      bsClass="modal-header"
      closeButton={true}
      closeLabel="close.modal"
    >
      <ModalTitle
        bsClass="modal-title"
        componentClass="h1"
        id="contained-modal-title-lg"
      >
        <FormattedMessage
          id="global.register"
          values={Object {}}
        />
      </ModalTitle>
    </ModalHeader>
    <ModalBody
      bsClass="modal-body"
      componentClass="div"
    >
      <Alert
        bsClass="alert"
        bsStyle="info"
        className="text-center"
        closeLabel="Close alert"
      >
        <WYSIWYGRender
          value="Texte du haut"
        />
      </Alert>
      <LoginSocialButtons
        query={
          Object {
            " $fragmentRefs": null,
            " $refType": null,
          }
        }
      />
      <Relay(Connect(injectIntl(ReduxForm)))
        locale="fr-FR"
        query={
          Object {
            " $fragmentRefs": null,
            " $refType": null,
          }
        }
      />
      <WYSIWYGRender
        className="text-center small excerpt mt-15"
        value="Texte du bas"
      />
    </ModalBody>
    <ModalFooter
      bsClass="modal-footer"
      componentClass="div"
    >
      <CloseButton
        label="global.cancel"
        onClose={[Function]}
      />
      <Connect(SubmitButton)
        id="confirm-register"
        isSubmitting={false}
        label="global.register"
        onSubmit={[Function]}
      />
    </ModalFooter>
  </RegistrationModal__ModalContainer>
</Fragment>
`;

exports[`<RegistrationModal /> renders hidden modal if not shown 1`] = `
<Fragment>
  <Connect(ChartModal) />
  <RegistrationModal__ModalContainer
    animation={false}
    aria-labelledby="contained-modal-title-lg"
    autoFocus={true}
    backdrop="static"
    bsSize="small"
    enforceFocus={false}
    onHide={[Function]}
    show={false}
  >
    <ModalHeader
      bsClass="modal-header"
      closeButton={true}
      closeLabel="close.modal"
    >
      <ModalTitle
        bsClass="modal-title"
        componentClass="h1"
        id="contained-modal-title-lg"
      >
        <FormattedMessage
          id="global.register"
          values={Object {}}
        />
      </ModalTitle>
    </ModalHeader>
    <ModalBody
      bsClass="modal-body"
      componentClass="div"
    >
      <LoginSocialButtons
        query={
          Object {
            " $fragmentRefs": null,
            " $refType": null,
          }
        }
      />
      <Relay(Connect(injectIntl(ReduxForm)))
        locale="fr-FR"
        query={
          Object {
            " $fragmentRefs": null,
            " $refType": null,
          }
        }
      />
    </ModalBody>
    <ModalFooter
      bsClass="modal-footer"
      componentClass="div"
    >
      <CloseButton
        label="global.cancel"
        onClose={[Function]}
      />
      <Connect(SubmitButton)
        id="confirm-register"
        isSubmitting={false}
        label="global.register"
        onSubmit={[Function]}
      />
    </ModalFooter>
  </RegistrationModal__ModalContainer>
</Fragment>
`;

exports[`<RegistrationModal /> renders modal and chart 1`] = `
<Fragment>
  <Connect(ChartModal) />
  <RegistrationModal__ModalContainer
    animation={false}
    aria-labelledby="contained-modal-title-lg"
    autoFocus={true}
    backdrop="static"
    bsSize="small"
    enforceFocus={false}
    onHide={[Function]}
    show={true}
  >
    <ModalHeader
      bsClass="modal-header"
      closeButton={true}
      closeLabel="close.modal"
    >
      <ModalTitle
        bsClass="modal-title"
        componentClass="h1"
        id="contained-modal-title-lg"
      >
        <FormattedMessage
          id="global.register"
          values={Object {}}
        />
      </ModalTitle>
    </ModalHeader>
    <ModalBody
      bsClass="modal-body"
      componentClass="div"
    >
      <LoginSocialButtons
        query={
          Object {
            " $fragmentRefs": null,
            " $refType": null,
          }
        }
      />
      <Relay(Connect(injectIntl(ReduxForm)))
        locale="fr-FR"
        query={
          Object {
            " $fragmentRefs": null,
            " $refType": null,
          }
        }
      />
    </ModalBody>
    <ModalFooter
      bsClass="modal-footer"
      componentClass="div"
    >
      <CloseButton
        label="global.cancel"
        onClose={[Function]}
      />
      <Connect(SubmitButton)
        id="confirm-register"
        isSubmitting={false}
        label="global.register"
        onSubmit={[Function]}
      />
    </ModalFooter>
  </RegistrationModal__ModalContainer>
</Fragment>
`;

exports[`<RegistrationModal /> renders modal and not chart 1`] = `
<Fragment>
  <Connect(ChartModal) />
  <RegistrationModal__ModalContainer
    animation={false}
    aria-labelledby="contained-modal-title-lg"
    autoFocus={true}
    backdrop="static"
    bsSize="small"
    enforceFocus={false}
    onHide={[Function]}
    show={false}
  >
    <ModalHeader
      bsClass="modal-header"
      closeButton={true}
      closeLabel="close.modal"
    >
      <ModalTitle
        bsClass="modal-title"
        componentClass="h1"
        id="contained-modal-title-lg"
      >
        <FormattedMessage
          id="global.register"
          values={Object {}}
        />
      </ModalTitle>
    </ModalHeader>
    <ModalBody
      bsClass="modal-body"
      componentClass="div"
    >
      <LoginSocialButtons
        query={
          Object {
            " $fragmentRefs": null,
            " $refType": null,
          }
        }
      />
      <Relay(Connect(injectIntl(ReduxForm)))
        locale="fr-FR"
        query={
          Object {
            " $fragmentRefs": null,
            " $refType": null,
          }
        }
      />
    </ModalBody>
    <ModalFooter
      bsClass="modal-footer"
      componentClass="div"
    >
      <CloseButton
        label="global.cancel"
        onClose={[Function]}
      />
      <Connect(SubmitButton)
        id="confirm-register"
        isSubmitting={false}
        label="global.register"
        onSubmit={[Function]}
      />
    </ModalFooter>
  </RegistrationModal__ModalContainer>
</Fragment>
`;

exports[`<RegistrationModal /> renders modal if shown 1`] = `
<Fragment>
  <Connect(ChartModal) />
  <RegistrationModal__ModalContainer
    animation={false}
    aria-labelledby="contained-modal-title-lg"
    autoFocus={true}
    backdrop="static"
    bsSize="small"
    enforceFocus={false}
    onHide={[Function]}
    show={true}
  >
    <ModalHeader
      bsClass="modal-header"
      closeButton={true}
      closeLabel="close.modal"
    >
      <ModalTitle
        bsClass="modal-title"
        componentClass="h1"
        id="contained-modal-title-lg"
      >
        <FormattedMessage
          id="global.register"
          values={Object {}}
        />
      </ModalTitle>
    </ModalHeader>
    <ModalBody
      bsClass="modal-body"
      componentClass="div"
    >
      <LoginSocialButtons
        query={
          Object {
            " $fragmentRefs": null,
            " $refType": null,
          }
        }
      />
      <Relay(Connect(injectIntl(ReduxForm)))
        locale="fr-FR"
        query={
          Object {
            " $fragmentRefs": null,
            " $refType": null,
          }
        }
      />
    </ModalBody>
    <ModalFooter
      bsClass="modal-footer"
      componentClass="div"
    >
      <CloseButton
        label="global.cancel"
        onClose={[Function]}
      />
      <Connect(SubmitButton)
        id="confirm-register"
        isSubmitting={false}
        label="global.register"
        onSubmit={[Function]}
      />
    </ModalFooter>
  </RegistrationModal__ModalContainer>
</Fragment>
`;
