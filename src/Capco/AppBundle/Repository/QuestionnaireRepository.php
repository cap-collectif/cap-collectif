<?php

namespace Capco\AppBundle\Repository;

use Capco\AppBundle\Entity\AnalysisConfiguration;
use Capco\AppBundle\Entity\Interfaces\Owner;
use Capco\AppBundle\Entity\ProposalForm;
use Capco\AppBundle\Enum\QuestionnaireAffiliation;
use Capco\UserBundle\Entity\User;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\NonUniqueResultException;
use Doctrine\ORM\NoResultException;
use Doctrine\ORM\Query\ResultSetMapping;
use Doctrine\ORM\QueryBuilder;

/**
 * QuestionnaireRepository.
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class QuestionnaireRepository extends EntityRepository
{
    /**
     * @param $id
     *
     * @throws \Doctrine\ORM\NonUniqueResultException
     *
     * @return mixed
     */
    public function getOne($id)
    {
        $qb = $this->createQueryBuilder('q')
            ->addSelect('q', 'qaq', 'qt')
            ->leftJoin('q.questions', 'qaq')
            ->leftJoin('qaq.question', 'qt')
            ->andWhere('q.id = :id')
            ->setParameter('id', $id)
        ;

        return $qb->getQuery()->getOneOrNullResult();
    }

    public function getAvailableQuestionnaires(?string $term = null)
    {
        $qb = $this->createQueryBuilder('q');
        $qb->leftJoin(ProposalForm::class, 'prf', 'WITH', 'prf.evaluationForm = q.id')
            ->leftJoin(AnalysisConfiguration::class, 'ac', 'WITH', 'ac.evaluationForm = q.id')
            ->leftJoin('q.proposalForm', 'pf')
            ->where(
                $qb
                    ->expr()
                    ->andX(
                        $qb->expr()->isNull('pf.id'),
                        $qb->expr()->isNull('q.step'),
                        $qb->expr()->isNull('prf.evaluationForm'),
                        $qb->expr()->isNull('ac.evaluationForm')
                    )
            )
        ;

        if (null !== $term) {
            $qb->where('q.title LIKE :query');
            $qb->setParameter('query', "%{$term}%");
        }

        return $qb->getQuery()->execute();
    }

    public function getAllQueryBuilder(
        ?int $offset,
        ?int $limit,
        ?array $affiliations,
        ?User $user,
        ?string $query,
        ?string $orderByField,
        ?string $orderByDirection,
        ?bool $availableOnly,
        ?array $types
    ): QueryBuilder {
        $qb = $this->createQueryBuilder('q');

        if ($query) {
            $qb->where('q.title LIKE :query');
            $qb->setParameter('query', "%{$query}%");
        }

        if ($affiliations && \in_array(QuestionnaireAffiliation::OWNER, $affiliations) && $user) {
            $qb->join('q.owner', 'o');
            $qb->andWhere('q.owner = :user');
            $qb->setParameter('user', $user);
        }

        if ($availableOnly) {
            $qb->leftJoin(ProposalForm::class, 'prf', 'WITH', 'prf.evaluationForm = q.id')
                ->leftJoin(AnalysisConfiguration::class, 'ac', 'WITH', 'ac.evaluationForm = q.id')
                ->leftJoin('q.proposalForm', 'pf')
                ->andWhere(
                    $qb
                        ->expr()
                        ->andX(
                            $qb->expr()->isNull('pf.id'),
                            $qb->expr()->isNull('q.step'),
                            $qb->expr()->isNull('prf.evaluationForm'),
                            $qb->expr()->isNull('ac.evaluationForm')
                        )
                )
            ;
        }

        if ($types) {
            $qb->andWhere('q.type IN (:types)');
            $qb->setParameter('types', $types);
        }

        if ($orderByField) {
            $qb->orderBy("q.{$orderByField}", $orderByDirection);
        }

        if ($offset) {
            $qb->setFirstResult($offset);
        }

        if ($limit) {
            $qb->setMaxResults($limit);
        }

        return $qb;
    }

    public function getAll(
        ?int $offset,
        ?int $limit,
        ?array $affiliations,
        ?User $user,
        ?string $query,
        ?string $orderByField,
        ?string $orderByDirection,
        ?bool $availableOnly,
        ?array $types
    ) {
        return $this->getAllQueryBuilder(
            $offset,
            $limit,
            $affiliations,
            $user,
            $query,
            $orderByField,
            $orderByDirection,
            $availableOnly,
            $types
        )
            ->getQuery()
            ->getResult()
        ;
    }

    public function getAllCount(
        ?int $offset,
        ?int $limit,
        ?array $affiliations,
        ?User $user,
        ?string $query,
        ?string $orderByField,
        ?string $orderByDirection,
        ?bool $availableOnly,
        ?array $types
    ): int {
        $qb = $this->getAllQueryBuilder(
            $offset,
            $limit,
            $affiliations,
            $user,
            $query,
            $orderByField,
            $orderByDirection,
            $availableOnly,
            $types
        );
        $qb->select('COUNT(q.id)');

        return (int) $qb->getQuery()->getSingleScalarResult();
    }

    public function getByOwner(Owner $owner, int $offset, int $limit, array $options): array
    {
        return $this->getByOwnerQueryBuilder($owner, $options)
            ->setFirstResult($offset)
            ->setMaxResults($limit)
            ->getQuery()
            ->getResult()
        ;
    }

    public function countByOwner(Owner $owner, array $options): int
    {
        return $this->getByOwnerQueryBuilder($owner, $options)
            ->select('count(p.id)')
            ->getQuery()
            ->getSingleScalarResult()
        ;
    }

    /**
     * @throws NonUniqueResultException
     * @throws NoResultException
     */
    public function hasRecentRepliesOrUpdatedUsers(mixed $questionnaireId, \DateTime $date): bool
    {
        $rsm = new ResultSetMapping();
        $rsm->addScalarResult('hasRecentRepliesOrUpdatedUsers', 'hasRecentRepliesOrUpdatedUsers', 'boolean');

        $sql = '
            SELECT
                CASE
                    WHEN COUNT(r.id) > 0 OR COUNT(ra.id) > 0 OR COUNT(u.id) > 0 THEN TRUE
                    ELSE FALSE
                END AS hasRecentRepliesOrUpdatedUsers
            FROM
                questionnaire q
            LEFT JOIN
                reply r ON q.id = r.questionnaire_id
            LEFT JOIN
                reply_anonymous ra ON q.id = ra.questionnaire_id
            LEFT JOIN
                fos_user u ON r.author_id = u.id
            WHERE
                q.id = :questionnaireId
                AND (r.updated_at > :date OR ra.updated_at > :date OR u.updated_at > :date)
        ';

        $query = $this->getEntityManager()->createNativeQuery($sql, $rsm);
        $query->setParameter('questionnaireId', $questionnaireId);
        $query->setParameter('date', $date->format('Y-m-d H:i:s'));

        return $query->getSingleScalarResult();
    }

    private function getByOwnerQueryBuilder(Owner $owner, array $options): QueryBuilder
    {
        $ownerField = $owner instanceof User ? 'p.owner' : 'p.organizationOwner';

        $qb = $this->createQueryBuilder('p')
            ->where("{$ownerField} = :owner")
            ->setParameter('owner', $owner)
        ;

        if ($query = $options['query']) {
            $qb->andWhere('p.title LIKE :query');
            $qb->setParameter('query', "%{$query}%");
        }
        if ($options['availableOnly']) {
            $qb->andWhere('p.step IS NULL');
        }

        return $qb;
    }
}
