InternalQuery:
    type: object
    inherits:
        - PreviewQuery
    config:
        name: Query
        description: 'Root of the schema.'
        fields:
            proposalFromSlug:
                description: 'Lookup a proposal from its unique slug.'
                type: 'InternalProposal'
                args:
                    slug:
                        type: 'String!'
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\Query\\QueryProposalFromSlugResolver", args, getUser())'
            pages:
                description: 'Lookup pages.'
                type: '[InternalPage!]!'
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\Query\\QueryPagesResolver", args)'
            posts:
                type: 'InternalPostConnection!'
                description: 'Lookup blog posts.'
                argsBuilder: 'Relay::ForwardConnection'
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\Query\\QueryPostsResolver", args)'
                args:
                    theme:
                        type: 'ID'
                    project:
                        type: 'ID'
                    orderBy:
                        type: 'PostOrder'
                        defaultValue: { field: PUBLISHED_AT, direction: DESC }
                        description: 'Ordering options for posts returning from the connection.'
            viewer:
                type: 'InternalUser!'
            themes:
                description: 'Lookup themes.'
                type: '[InternalTheme!]!'
                args:
                    title:
                        type: 'String'
                        defaultValue: null
                        description: 'Filter by title.'
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\Query\\QueryThemesResolver", args)'
            mapTokens:
                type: '[MapToken!]!'
                description: 'Get the available map tokens'
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\Query\\QueryMapTokensResolver")'
            mapToken:
                type: 'MapToken'
                description: 'Search a particular map token by its provider'
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\Query\\QueryMapTokenResolver", args)'
                args:
                    provider:
                        type: 'MapTokenProvider!'
                        description: 'The map provider'
                    includeDefault:
                        type: 'Boolean'
                        defaultValue: true
                        description: 'Whether or not resolves the default map tokens if no custom tokens are specified'
            siteFavicon:
                type: 'SiteImage!'
                description: 'Get the current favicon'
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\Query\\SiteFaviconQueryResolver")'
            siteImage:
                type: 'SiteImage'
                description: 'Get a site image'
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\Query\\SiteImageQueryResolver", args)'
                args:
                    keyname:
                        type: 'String!'
                        description: 'The site image keyname'
            registrationForm:
                type: 'InternalRegistrationForm'
                description: 'Get the current registration form'
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\Query\\RegistrationFormQueryResolver")'
            registrationScript:
                type: 'String'
                description: 'Get the current post registration script'
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\Query\\RegistrationScriptQueryResolver")'
            # Return a password complexity score from 0 to 4 where O is very weak and 4 is very strong
            passwordComplexityScore:
                type: 'Int'
                description: 'Validate the registration credentials'
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\Query\\PasswordComplexityScoreResolver", args)'
                args:
                    username:
                        type: 'String'
                        description: 'The username of the user'
                    email:
                        type: 'String'
                        description: 'The email of the user'
                    password:
                        type: 'String!'
                        description: 'The password of the user'
            contactForms:
                type: '[InternalContactForm!]'
                description: 'Get the contact forms'
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\Query\\ContactFormQueryResolver")'
            projects:
                type: 'InternalProjectConnection!'
                args:
                    # TODO
                    # Support multi-authors
                    author:
                        type: 'ID'
                        description: 'ID of a User to filter by. If non-null, only projects authored by this user will be returned.'
                    # TODO before preview
                    # Not sure if "term" is a good name
                    # "query" looks better
                    term:
                        type: 'String'
                        description: 'If provided, searches projects by title.'
                    # TODO before preview
                    # Not sure if "status" is a good name
                    status:
                        type: 'ID'
                        description: 'ID of a Status to filter by. If non-null, filter projects by statuses.'
                    # TODO before preview
                    # Release ProjectType to preview schema
                    type:
                        type: 'ID'
                        description: 'ID of a ProjectType to filter by. If non-null, filter projects by types'
                    district:
                        type: 'ID'
                        description: 'ID of a GlobalDistrict to filter by. If non-null, filter projects by district'
                    # TODO before preview
                    # rename "withEventsOnly"
                    withEventOnly:
                        type: 'Boolean'
                        description: 'If true, only projects with at least 1 event will be returned.'
                        defaultValue: false
                    # TODO before preview
                    # Change this to an enum filter "ProjectVisibilityMode"
                    onlyPublic:
                        type: 'Boolean'
                        description: 'If true, only projects with public visibility will be returned.'
                        defaultValue: false
                    locale:
                        type: 'String'
                        description: 'code of a Locale to filter by. If non-null, filter projects by locale'
                        defaultValue: null
                    archived:
                        type: 'ProjectArchiveFilter'
                        description: 'If true, only projects with public visibility will be returned.'
            events:
                type: 'InternalEventConnection!'
                args:
                    # TODO
                    # rename to query.
                    search:
                        type: 'String'
                        description: 'If provided, searches events by title and description.'
                    locale:
                        type: 'TranslationLocale'
                        description: 'If provided, searches events by locale.'
                        #onlyCurrentLocale
                    # TODO
                    # dont know if right way
                    isFuture:
                        type: 'Boolean'
                        description: 'If non-null, filters events by comparing the start date with present.'
                    # TODO before preview
                    # Release Theme to preview schema
                    theme:
                        type: 'ID'
                        description: 'If non-null, filters events with the given theme.'
                    district:
                        type: 'ID'
                        description: 'If non-null, filters events with the given district.'
                    # TODO
                    # Support multi-authors
                    author:
                        type: 'ID'
                        description: 'If non-null, filters events with the given author.'
                    # TODO before preview
                    # Release UserType to preview schema
                    userType:
                        type: 'ID'
                        description: 'If non-null, filters events with the given author type.'
                    # TODO
                    # dont know if right way
                    isRegistrable:
                        type: 'Boolean'
                        description: 'If true, filter the events with registration link or internal registration enable, if false  filter the events with both registration type at false'
                    # TODO this my be admin only
                    enabled:
                        type: 'Boolean'
                        defaultValue: true
                        description: 'If true get enabled only, if false get disabled, if null get all events'
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\Query\\QueryEventsResolver", args, info, serv("request_stack"))'
            projectAuthors:
                type: '[Author!]!'
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\Project\\ProjectAuthorsResolver", args, getUser())'
            projectTypes:
                type: '[InternalProjectType!]!'
                args:
                    onlyUsedByProjects:
                        type: 'Boolean'
                        description: 'If true, filter the projectTypes only used by the projects'
                        defaultValue: false
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\Project\\ProjectTypesResolver", args, getUser())'
            users:
                type: 'InternalUserConnection!'
                argsBuilder: 'Relay::ForwardConnection'
                args:
                    superAdmin:
                        type: 'Boolean'
                        defaultValue: false
                        description: 'Remove super admin from export.'
                    withDisabled:
                        type: 'Boolean'
                        defaultValue: false
                        description: 'Get user list with disabled users'
                    emailConfirmed:
                        type: 'Boolean'
                        defaultValue: null
                        description: 'Filter the list by email confirmation'
                    consentInternalCommunication:
                        type: 'Boolean'
                        defaultValue: null
                        description: 'Filter the list by consent to internal communication'
                    onlyProjectAdmins:
                        type: 'Boolean'
                        defaultValue: null
                        description: 'Filter the list by project admins'
                    orderBy:
                        type: 'UserOrder'
                        description: 'Ordering options for users returning from the connection.'
                        defaultValue:
                            {
                                field: !php/const Capco\AppBundle\Enum\SortField::CREATED_AT,
                                direction: !php/const Capco\AppBundle\Enum\OrderDirection::DESC,
                            }
            userSearch:
                type: '[InternalUser]'
                args:
                    isMediatorCompliant:
                        type: 'Boolean'
                        defaultValue: false
                        description: 'Filter users with ROLE_USER only and who does not belong to an organization.'
                    displayName:
                        type: 'String'
                        defaultValue: null
                        description: 'Filter by displayName.'
                    notInIds:
                        type: '[String]'
                        defaultValue: null
                        description: 'Return all users except the ones in the array.'
                    authorsOfEventOnly:
                        type: 'Boolean'
                        defaultValue: false
                        description: 'If true, retrieve only users that created an event.'
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\Query\\UserSearchQueryResolver", args)'
            consultationSteps:
                type: '[InternalConsultationStep!]!'
                args:
                    id:
                        description: 'If omitted, returns all consultations steps. If provided, returns the consultation step of the particular id.'
                        type: 'ID'
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\Query\\ConsultationStepsQueryResolver", args)'
            consultations:
                type: 'InternalConsultationConnection!'
                description: 'Get all consultations.'
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\Query\\ConsultationsQueryResolver", args)'
                argsBuilder: 'Relay::ForwardConnection'
                args:
                    id:
                        description: 'If omitted, returns all consultations. If provided, returns the consultation of the particular id.'
                        type: 'ID'
                    query:
                        description: 'Filter consultation by a given query.'
                        type: 'String'
                    orderBy:
                        description: 'Order consultation by a given criterias.'
                        type: 'ConsultationOrder'
                        defaultValue: { field: 'POSITION', direction: 'ASC' }
            groups:
                description: 'Lookup groups.'
                type: 'GroupConnection!'
                args:
                    term:
                        description: 'The term to filter groups'
                        type: 'String'
                argsBuilder: 'Relay::ForwardConnection'
                access: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\Organization\\OrganizationMemberAccessResolver", getUser())'
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\Group\\GroupListResolver", args)'
            proposalForms:
                description: 'Lookup forms.'
                type: '[InternalProposalForm]!'
                args:
                    query:
                        type: 'String'
                        description: 'Filter proposal form by title'
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\Query\\QueryProposalFormResolver", args)'
            categoryImages:
                description: 'Lookup category images.'
                type: '[CategoryImage!]!'
                args:
                    isDefault:
                        type: 'Boolean'
                        description: 'If true, get default category image, if false get custom category image, if null get all'
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\Query\\QueryCategoryImagesResolver", args)'
            availableDistrictsForLocalisation:
                type: '[InternalProposalDistrict!]!'
                description: 'Lookup availables districts on a proposalForm for a given address.'
                args:
                    proposalFormId:
                        type: 'ID!'
                    latitude:
                        type: 'Float!'
                    longitude:
                        type: 'Float!'
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\District\\DistrictsForLocalisationResolver", args["proposalFormId"], args["latitude"], args["longitude"])'
            contributions:
                type: '[InternalOpinion!]!'
                description: 'TO BE REMOVED'
                args:
                    consultation:
                        description: 'Returns all contributions of the provided consultation.'
                        type: 'ID!'
                resolve: "@=query('contributions', args)"
            question:
                type: 'InternalQuestion!'
                description: 'TO BE REMOVED'
                args:
                    id:
                        type: 'Int!'
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\Question\\QuestionQueryResolver", args)'
            availableQuestionnaires:
                type: '[InternalQuestionnaire!]!'
                args:
                    term:
                        description: 'the term to filter questions'
                        type: 'String'
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\Question\\AvailableQuestionnaireResolver", args)'
            globalDistricts:
                description: 'List all the district project in the platform.'
                type: 'InternalGlobalDistrictConnection!'
                argsBuilder: 'Relay::ForwardConnection'
                args:
                    name:
                        type: 'String'
                        defaultValue: null
                        description: 'Filter by name.'
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\District\\QueryGlobalDistrictResolver", args)'
            allContributors:
                description: 'List all the contributors in the platform, totalCount includes anon replies and votes.'
                type: 'InternalUserConnection!'
                argsBuilder: 'Relay::ForwardConnection'
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\Query\\QueryContributorsResolver", args)'
            allContributions:
                description: 'Return the number of contributions in the platform.'
                type: 'Int!'
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\Query\\QueryContributionsResolver", args)'
            votes:
                description: 'List all the votes in the platform.'
                type: 'InternalVoteConnection!'
                argsBuilder: 'Relay::ForwardConnection'
                args:
                    onlyAccounted:
                        type: 'Boolean'
                        defaultValue: true
                        description: 'Get only accounted votes.'
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\Query\\QueryVotesResolver", args)'
            shieldAdminForm:
                type: 'InternalShieldAdminForm!'
                description: 'Get the current shield admin form.'
                access: "@=hasRole('ROLE_ADMIN')"
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\Query\\ShieldAdminFormQueryResolver")'
            ssoConfigurations:
                type: 'InternalSSOConfigurationConnection!'
                argsBuilder: 'Relay::ForwardConnection'
                description: 'List all SSO Configurations.'
                args:
                    ssoType:
                        type: 'SSOType'
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\Query\\SSOConfigurationQueryResolver", args)'
            sections:
                type: '[Section!]!'
                description: 'List all sections.'
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\Query\\QueryOpinionTypeResolver", args)'
                args:
                    user:
                        type: 'ID'
                        description: 'Filter by contributor of section.'
            medias:
                type: 'MediaConnection!'
                argsBuilder: 'Relay::ForwardConnection'
                description: 'List all medias'
                access: "@=hasRole('ROLE_ADMIN')"
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\Query\\MediaQueryResolver", args)'
                args:
                    term:
                        type: 'String'
                        description: 'Search by term.'
                    showProfilePictures:
                        type: 'Boolean!'
                        description: 'Filter medias linked to a profile.'
                        defaultValue: true

            availableLocales:
                description: 'List all locales on the platform.'
                access: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\Organization\\OrganizationMemberAccessResolver", getUser())'
                args:
                    includeDisabled:
                        type: 'Boolean'
                type: '[Locale!]!'
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\Locale\\AvailableLocalesQueryResolver", args, getUser())'
            locales:
                description: 'List all locales published.'
                type: '[Locale!]!'
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\Locale\\LocalesQueryResolver", getUser())'
            defaultLocale:
                description: 'Get the default locale.'
                type: 'Locale!'
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\Locale\\DefaultLocaleQueryResolver")'
            fonts:
                description: 'List all available fonts on the platform.'
                args:
                    splitFontsFromSameFile:
                        type: 'Boolean'
                        defaultValue: false
                        description: 'If true, get all fonts uploaded from a same file'
                type: '[InternalFont!]!'
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\Font\\FontsQueryResolver", args)'
            notificationsFromEmail:
                type: Email
                description: 'Retrieve the configured notifications from email.'
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\Query\\QueryNotificationsFromEmailResolver")'
            siteParameter:
                description: 'get a site parameter from its keyname'
                args:
                    keyname:
                        type: 'String!'
                        description: 'keyname of the site parameter to get'
                type: 'SiteParameter'
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\SiteParameter\\SiteParameterQueryResolver", args)'
            availableConsultations:
                type: '[InternalConsultation]!'
                description: 'get consultations without step'
                args:
                    term:
                        type: 'String'
                        description: 'Retrieve consultation where title match term param.'
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\Consultation\\AvailableConsultationsQueryResolver", args["term"])'
            viewerAssignedProjectsToAnalyse:
                description: 'Fetch projects with assignment'
                access: "@=hasRole('ROLE_USER')"
                type: '[InternalProject!]'
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\Query\\QueryViewerAssignedProjectsToAnalyseQueryResolver", args, getUser())'
            viewerCanSeeEvaluationsPage:
                type: Boolean!
                access: "@=hasRole('ROLE_USER')"
                description: 'Whether or not this user can access our evaluations page.'
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\User\\UserSupervisedProposalsResolver", getUser(), args)'
            geocode:
                type: 'PreviewGoogleMapsAddress'
                args:
                    latitude:
                        type: 'Float!'
                        description: 'the latitude of geocode'
                    longitude:
                        type: 'Float!'
                        description: 'the longitude of geocode'
                description: 'An address from Google Maps.'
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\Query\\QueryGeocodeResolver", args["latitude"], args["longitude"])'
            featureFlags:
                description: 'List all feature flags.'
                type: '[InternalFeatureFlag!]!'
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\Query\\QueryFeatureFlagsResolver")'
            userInvitations:
                description: 'List all invited users.'
                type: 'UserInviteConnection!'
                access: "@=hasRole('ROLE_ADMIN')"
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\Query\\QueryUserInvitationsResolver", args, info)'
                argsBuilder: 'Relay::ForwardConnection'
                args:
                    first:
                        type: 'Int'
                        defaultValue: 50
                    term:
                        type: 'String'
                        defaultValue: null
                    status:
                        type: 'UserInviteStatus'
                        defaultValue: null
            userInvitationsAvailabilitySearch:
                type: 'UserInvitationsAvailabilityConnection!'
                description: 'Check availability of a given email list among existing users and invitations.'
                args:
                    emails:
                        type: '[String!]!'
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\Query\\UserInvitationsAvailabilitySearchQueryResolver", args)'
            siteColors:
                description: 'List all site colors.'
                type: '[InternalSiteColor!]!'
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\Query\\QuerySiteColorsResolver")'
            appVersion:
                description: 'Retrieve the current version of the app.'
                type: 'String'
                resolve: '@=parameter("app_version")'
            mailingLists:
                type: MailingListConnection!
                description: 'Get all mailing lists'
                access: "@=hasRole('ROLE_ADMIN')"
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\Emailing\\MailingListResolver", args)'
                argsBuilder: 'Relay::ForwardConnection'
                args:
                    term:
                        type: 'String'
                        description: 'If provided, filter lists by name'
            emailingCampaigns:
                type: EmailingCampaignConnection!
                description: 'Get all emailing campaigns'
                access: "@=hasRole('ROLE_ADMIN')"
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\Emailing\\EmailingCampaignResolver", args)'
                argsBuilder: 'Relay::ForwardConnection'
                args:
                    status:
                        type: 'EmailingCampaignStatusFilter'
                        description: 'optional filter by status'
                    orderBy:
                        type: 'EmailingCampaignOrder'
                        defaultValue:
                            {
                                field: !php/const Capco\AppBundle\Enum\EmailingCampaignOrderField::SEND_AT,
                                direction: !php/const Capco\AppBundle\Enum\OrderDirection::DESC,
                            }
                        description: 'The ordering direction for sending date'
                    term:
                        type: 'String'
                        description: 'If provided, filter campaigns by name'
            proposalCategoryOptions:
                type: 'ProposalCategoryOptions!'
                description: 'Get the options for creating a category within a proposal form'
                access: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\Organization\\OrganizationMemberAccessResolver", getUser())'
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\Query\\ProposalCategoryOptionsResolver")'
            homePageProjectsSectionConfiguration:
                type: 'HomePageProjectsSectionConfiguration!'
                description: 'Get HomePageProjectsSectionConfiguration'
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\Query\\HomePageProjectsSectionConfigurationResolver", args)'
            homePageProjectsMapSectionConfiguration:
                type: 'HomePageProjectsMapSectionConfiguration!'
                description: 'Get HomePageProjectsMapSectionConfiguration'
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\Query\\HomePageProjectsMapSectionConfigurationResolver", args)'
            carrouselConfiguration:
                type: 'CarrouselConfiguration!'
                description: 'Get CarrouselConfiguration'
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\Query\\CarrouselConfigurationResolver", args)'
                args:
                    type:
                        type: 'String!'
                        description: 'Section type.'
            analytics:
                type: 'InternalPlatformAnalytics!'
                description: 'Return the platform analytics'
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\Query\\QueryAnalyticsResolver", args, info)'
                args:
                    filter:
                        type: 'InternalQueryAnalyticsFilter!'
            isEmailAlreadyTaken:
                type: 'Boolean!'
                args:
                    email:
                        type: 'Email!'
                        description: 'Email to check.'
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\Query\\IsEmailAlreadyTakenResolver", args)'
            externalServiceConfiguration:
                type: 'ExternalServiceConfiguration!'
                args:
                    type:
                        type: 'ExternalServiceConfigurationType!'
                        description: 'The type of configuration asked'
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\ExternalServiceConfigurationResolver", args)'
                access: "@=hasRole('ROLE_ADMIN')"
            senderEmailDomains:
                type: '[SenderEmailDomain!]!'
                description: 'Get all domains registered'
                access: "@=hasRole('ROLE_ADMIN') and hasFeatureFlag('emailing')"
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\Emailing\\SenderEmailDomainResolver", args)'
            senderEmails:
                type: '[SenderEmail!]!'
                description: 'Get all sending addresses registered'
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\Emailing\\SenderEmailResolver", getUser())'
            siteSettings:
                type: 'InternalSiteSettings'
                description: 'Get site settings.'
                access: "@=hasRole('ROLE_ADMIN')"
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\SiteSettings\\SiteSettingsResolver")'
            smsOrders:
                type: 'SmsOrderConnection!'
                argsBuilder: 'Relay::ForwardConnection'
                description: 'Get list of sms orders.'
                access: "@=hasRole('ROLE_ADMIN')"
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\Sms\\SmsOrdersResolver", args)'
                args:
                    filter:
                        type: 'SmsOrdersFilters'
                        description: 'Filter sms orders.'
                        defaultValue: !php/const Capco\AppBundle\Enum\SmsOrdersFilters::UNPROCESSED
            smsCredits:
                type: 'SmsCreditConnection!'
                argsBuilder: 'Relay::ForwardConnection'
                description: 'Get list of sms credits.'
                access: "@=hasRole('ROLE_ADMIN')"
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\Sms\\SmsCreditsResolver", args)'
            smsAnalytics:
                type: 'InternalSmsAnalytics!'
                description: 'Get sms analytics'
                access: "@=hasRole('ROLE_ADMIN')"
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\Sms\\SmsAnalyticsResolver", args)'
            organizations:
                type: 'OrganizationConnection!'
                argsBuilder: 'Relay::ForwardConnection'
                access: "@=hasRole('ROLE_ADMIN')"
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\Organization\\OrganizationsResolver", getUser(), args)'
                args:
                    search:
                        type: 'String'
                        description: 'search an organization by its name or by member email'
                    affiliations:
                        type: '[OrganizationAffiliation!]'
                        description: |
                            Array of affiliations of viewer to organizations.
                            For example, ADMIN will return only organizations the viewer is member of
            participants:
                type: 'ParticipantConnection!'
                argsBuilder: 'Relay::ForwardConnection'
                access: "@=hasRole('ROLE_ADMIN')"
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\Participant\\ParticipantsResolver", args)'
                args:
                    consentInternalCommunication:
                        type: 'Boolean'
                        description: 'Filter participants who consent receiving internal communication.'
                    emailConfirmed:
                        type: 'Boolean'
                        description: 'Filter participants who confirmed their email.'
            participant:
                type: 'InternalParticipant'
                args:
                    token:
                        type: 'String'
                        description: 'get a participant by its token'
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\Participant\\ParticipantResolver", args)'
            menuItems:
                type: '[InternalMenuItem!]!'
                description: 'The navbar menu items.'
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\MenuItemsResolver", args)'
            arguments:
                type: 'ArgumentConnection!'
                description: 'List of arguments'
                access: "@=hasRole('ROLE_ADMIN')"
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\Argument\\ArgumentListResolver", args)'
                argsBuilder: 'Relay::ForwardConnection'
                args:
                    orderBy:
                        type: 'ArgumentOrder'
                        defaultValue:
                            {
                                field: !php/const Capco\AppBundle\Enum\ArgumentOrderField::CREATED_AT,
                                direction: !php/const Capco\AppBundle\Enum\OrderDirection::DESC,
                            }
                        description: 'The ordering direction for the argument creation or updated date'
                    term:
                        type: 'String'
                        description: 'The term to filter arguments on the body or the author username.'
            comments:
                type: 'CommentConnection!'
                description: 'List of comments'
                access: "@=hasRole('ROLE_ADMIN')"
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\Comment\\CommentListResolver", args)'
                argsBuilder: 'Relay::ForwardConnection'
                args:
                    orderBy:
                        type: 'CommentOrder'
                        defaultValue:
                            {
                                field: !php/const Capco\AppBundle\Enum\CommentOrderField::CREATED_AT,
                                direction: !php/const Capco\AppBundle\Enum\OrderDirection::DESC,
                            }
                        description: 'The ordering direction for the comment creation or updated date'
                    term:
                        type: 'String'
                        description: 'The term to filter comments on the body or the author username.'
            userTypes:
                type: '[InternalUserType!]!'
                description: 'List of user types.'
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\Query\\QueryUserTypesResolver")'
            sources:
                type: 'SourceConnection!'
                description: 'List of sources'
                access: "@=hasRole('ROLE_ADMIN')"
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\Source\\SourceListResolver", args)'
                argsBuilder: 'Relay::ForwardConnection'
                args:
                    orderBy:
                        type: 'SourceOrder'
                        defaultValue:
                            {
                                field: !php/const Capco\AppBundle\Enum\SourceOrderField::CREATED_AT,
                                direction: !php/const Capco\AppBundle\Enum\OrderDirection::DESC,
                            }
                        description: 'The ordering direction for the source creation or updated date'
                    term:
                        type: 'String'
                        description: 'The term to filter sources on the body or the author username.'
            isAuthenticated:
                type: 'Boolean!'
                description: 'Whether or not the viewer is authenticated.'
                resolve: '@=getUser() !== null'
            footer:
                type: 'Footer!'
                description: 'Footer configuration'
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\FooterResolver", args)'
            nodeSlug:
                type: 'NodeSlug'
                args:
                    entity:
                        type: 'SluggableEntity!'
                        description: 'The name of the entity'
                    slug:
                        type: 'String!'
                        description: 'The slug to search for.'
                    projectSlug:
                        type: 'String'
                        description: 'The project slug to search on when requiring a step'
                description: 'Get a node by its slug.'
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\NodeSlugResolver", args)'
            contributors:
                type: 'InternalContributorConnection!'
                description: 'List of users and participants'
                args:
                    search:
                        type: 'ContributorSearchInput'
                        description: 'Filter by term based on given fields.'
                    roles:
                        type: '[ContributorsRole]!'
                        description: 'Filter by roles.'
                    orderBy:
                        type: 'ContributorOrder'
                        description: 'The ordering direction for the user last login date'
                resolve: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\Query\\ContributorsResolver", [args])'
                argsBuilder: 'Relay::ForwardConnection'
