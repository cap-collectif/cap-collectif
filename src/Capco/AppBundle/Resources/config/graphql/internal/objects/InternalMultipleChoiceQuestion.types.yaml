InternalMultipleChoiceQuestion:
    type: object
    inherits:
        - InternalQuestion
    config:
        name: MultipleChoiceQuestion
        interfaces:
            - InternalQuestion
            - Node
        description: 'A multiple choice question'
        fields:
            kind:
                resolve: 'multiple_choice'
            # TODO we can probably design this better
            isOtherAllowed:
                type: 'Boolean!'
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\QuestionChoice\\QuestionChoiceIsOtherAllowedResolver", value)'
            # TODO we can probably design this better
            otherResponses:
                type: 'InternalResponseConnection!'
                argsBuilder: 'Relay::ForwardConnection'
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\QuestionChoice\\OtherQuestionChoiceResponseResolver", value, args)'
                description: 'Responses of the `other` question choice.'
            choices:
                type: 'InternalQuestionChoiceConnection!'
                argsBuilder: 'Relay::ForwardConnection'
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\Question\\QuestionChoicesResolver", value, args, getUser(), serv("request_stack"))'
                args:
                    first:
                        type: 'Int'
                        description: Returns the first `n` elements from the list.
                        defaultValue: 9999
                    term:
                        type: 'String'
                        description: 'The searched term in multiple question choices.'
                    allowRandomize:
                        type: 'Boolean'
                        defaultValue: false
                        description: 'If the question has `randomQuestionChoices: true` will return choices in a random order.'
            validationRule:
                type: 'MultipleChoiceQuestionValidationRule'
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\Question\\QuestionValidationRuleResolver", value)'
            randomQuestionChoices:
                type: 'Boolean!'
                resolve: '@=value.isRandomQuestionChoices()'
            responseColorsDisabled:
                type: 'Boolean!'
                description: 'When the question is of type button, do we disable the colors for the responses'
            groupedResponsesEnabled:
                type: 'Boolean!'
                description: 'When the question is of type button, do we show the responses in a compact bar instead'
            tagCloud:
                type: '[TagCloudItem!]!'
                args:
                    size:
                        type: 'Int'
                        defaultValue: 20
                        description: 'Defines the number of aggregation for the tag cloud.'
                description: "Return array containing object with number of occurrences by response's keywords."
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\Question\\QuestionTagCloudResolver", value, args)'
