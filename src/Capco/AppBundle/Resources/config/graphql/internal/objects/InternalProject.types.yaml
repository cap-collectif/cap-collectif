InternalProject:
    type: object
    inherits:
        - PreviewProject
        - UniformResourceAdminLocatable
        - InternalWithProposals
        - InternalPrimaryKey
        - InternalTimeRangeable
        - InternalOwnerable
    config:
        name: Project
        interfaces:
            - UniformResourceAdminLocatable
        description: 'A participatory project.'
        fields:
            # Override PublicProject or PreviewProject fields
            hasAnalysis:
                type: Boolean!
                resolve: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\Project\\ProjectHasAnalysisResolver", [value])'
            contributors:
                type: 'InternalContributorConnection!'
                args:
                    step:
                        type: 'ID'
                        description: 'The step in which the user has contributed.'
                    vip:
                        type: 'Boolean'
                        description: 'Does the user has verified his account.'
                    userType:
                        type: 'ID'
                        description: 'The user type to filter by.'
                    emailConfirmed:
                        type: 'Boolean'
                        defaultValue: false
                        description: 'Set true to get only confirmed users.'
                    consentInternalCommunication:
                        type: 'Boolean'
                        defaultValue: false
                        description: 'Set true to get only users consenting to receive internal communication.'
                    orderBy:
                        type: 'UserOrder'
                        defaultValue: { field: CREATED_AT, direction: DESC }
                    term:
                        type: 'String'
                        description: 'Search contributor by his email, username, lastname'
            emailableContributors:
                type: 'InternalEmailableConnection!'
                description: 'A list of contributors associated with the project.'
                argsBuilder: 'Relay::ForwardConnection'
                resolve: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\Project\\ProjectEmailableContributorsResolver", [value, args])'
            votes:
                type: 'InternalVoteConnection!'
                args:
                    anonymous:
                        type: 'Boolean'
                        defaultValue: null
                        description: 'Wether it retrieves anonymous votes or not.'
            paperVotesTotalCount:
                description: 'Count of paper votes on the project.'
                type: 'Int!'
                argsBuilder: 'Relay::ForwardConnection'
                resolve: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\Proposal\\ProjectPaperVoteTotalCountResolver", [value, args])'
            paperVotesTotalPointsCount:
                description: 'Count of paper votes points on the project.'
                type: 'Int!'
                argsBuilder: 'Relay::ForwardConnection'
                resolve: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\Proposal\\ProjectPaperVoteTotalPointsCountResolver", [value, args])'
            steps:
                args:
                    orderBy:
                        type: 'StepOrder'
                        defaultValue: { field: POSITION, direction: ASC }
                    excludePresentationStep:
                        type: 'Boolean'
                        defaultValue: false
                resolve: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\Project\\ProjectStepsResolver", [value, args])'
                type: '[InternalStep!]!'
            cover:
                type: 'InternalMedia'
            authors:
                type: '[Author!]!'
                resolve: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\Project\\InternalProjectAuthorsResolver", [value])'
            type:
                type: 'InternalProjectType'
            # Internal fields
            proposals:
                type: 'InternalProposalConnection!'
                resolve: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\Project\\ProjectProposalsResolver", [value, args, getUser()])'
                args:
                    step:
                        type: 'ID'
                        description: 'ID of a Step to filter by. If non-null, filters proposals with the given step.'
            slug:
                type: 'String!'
                description: 'Slug of a project'
            canEnableProposalStepSplitView:
                type: 'Boolean!'
                resolve: '@=value.canEnableProposalStepSplitView()'
                description: 'Can the split view be enabled'
            isProposalStepSplitViewEnabled:
                type: 'Boolean!'
                description: 'Whether the split view is enabled or not.'
            video:
                type: 'String'
            firstCollectStep:
                type: InternalCollectStep
                resolve: '@=value.getFirstCollectStep()'
                description: 'Identifies the first collect step of the project, if any.'
            firstDebateStep:
                type: InternalDebateStep
                resolve: '@=value.getFirstDebateStep()'
                description: 'Identifies the first debate step of the project, if any.'
            firstQuestionnaireStep:
                type: InternalQuestionnaireStep
                resolve: '@=value.getFirstQuestionnaireStep()'
                description: 'Identifies the first questionnaire step of the project, if any.'
            firstAnalysisStep:
                type: ProposalStep
                resolve: '@=value.getFirstAnalysisStep()'
                description: 'Identifies the first analysis step of the project, if any.'
            hasParticipativeStep:
                type: Boolean!
                resolve: '@=value.hasParticipativeStep(args["exceptStepId"])'
                args:
                    exceptStepId:
                        type: 'ID'
                        description: 'If specified, get if the project is participative while excluding the specified step. It allows to know if a particular step is the only participative step in project.'
                        defaultValue: null
            themes:
                type: '[InternalTheme!]'
            votableSteps:
                type: '[ProposalStep!]!'
                resolve: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\Project\\ProjectVotableStepsResolver", [value])'
            visibility:
                type: 'ProjectVisibility!'
                description: 'The visibility of the project.'
            adminAlphaUrl:
                type: 'URI!'
                resolve: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\Project\\ProjectAdminAlphaUrlResolver", [value])'
            adminUrl:
                type: 'URI!'
                resolve: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\Project\\ProjectAdminUrlResolver", [value])'
            opinionCanBeFollowed:
                type: 'Boolean!'
                description: 'State of activation of Opinion subscription.'
            restrictedViewers:
                type: 'GroupConnection'
                argsBuilder: 'Relay::ForwardConnection'
                resolve: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\Project\\ProjectAllowedGroupsResolver", [value, args])'
                description: 'Viewers that can access the project, null otherwise.'
            districts:
                type: 'InternalGlobalDistrictConnection'
            comments:
                description: 'The comments related to the project.'
                type: 'CommentConnection!'
                resolve: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\Project\\ProjectCommentsResolver", [value, args])'
                argsBuilder: 'Relay::ForwardConnection'
                args:
                    onlyTrashed:
                        type: 'Boolean'
                        description: 'The connection will return only the trashed results.'
                        defaultValue: false
                    orderBy:
                        type: 'CommentOrder'
                        defaultValue: { field: PUBLISHED_AT, direction: DESC }
            isVotesCounterDisplayable:
                type: 'Boolean!'
            isContributionsCounterDisplayable:
                type: 'Boolean!'
            isParticipantsCounterDisplayable:
                type: 'Boolean!'
            isExternal:
                type: 'Boolean!'
                description: "Whether it's an external project or not."
            externalLink:
                type: 'URI'
                description: 'URL of the external project.'
            contributions:
                args:
                    type:
                        type: 'ContributionType'
                        description: 'Filter contributions by a specific type.'
                    orderBy:
                        type: 'InternalContributionOrder'
                        defaultValue: { field: CREATED_AT, direction: DESC }
            externalContributionsCount:
                type: 'Int'
                description: 'Contributions count of the external project.'
            externalParticipantsCount:
                type: 'Int'
                description: 'Participant count of the external project.'
            externalVotesCount:
                type: 'Int'
                description: 'Vote count of the external project.'
            headerType:
                type: 'ProjectHeaderType'
                description: "The header's format of the project."
            coverFilterOpacityPercent:
                type: 'Int'
                description: 'The cover filter opacity percent value.'
            locale:
                type: 'Locale'
                description: 'the locale for the project, if any'
            viewerAssignedProposals:
                type: 'InternalProposalConnection!'
                resolve: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\Project\\ProjectViewerAssignedProposalsResolver", [value, args, getUser()])'
                argsBuilder: 'Relay::ForwardConnection'
                description: 'Get all assigned proposals of the viewer.'
                access: "@=hasRole('ROLE_USER')"
                args:
                    term:
                        type: 'String'
                    theme:
                        type: 'ID'
                    district:
                        type: 'ID'
                    analysts:
                        type: '[ID!]'
                    supervisor:
                        type: 'ID'
                    decisionMaker:
                        type: 'ID'
                    category:
                        type: 'ID'
                    orderBy:
                        type: 'InternalProposalOrder'
                        defaultValue: { field: CREATED_AT, direction: DESC }
                    state:
                        type: 'ProposalTaskState'
                        description: 'The current status of the proposal'
            analysts:
                type: '[InternalUser]!'
                description: 'list of analysts assigned on the project'
                resolve: '@=value.getAnalysts()'
            supervisors:
                type: '[InternalUser]!'
                description: 'list of supervisors assigned on the project'
                resolve: '@=value.getSupervisors()'
            decisionMakers:
                type: '[InternalUser]!'
                description: 'list of decision makers assigned on the project'
                resolve: '@=value.getDecisionMakers()'
            categories:
                type: '[InternalProposalCategory!]!'
                description: 'list of proposal categories on the project'
                resolve: '@=value.getCategories()'
            exportableSteps:
                access: '@=service("Capco\\AppBundle\\GraphQL\\Resolver\\Project\\ProjectExportableSteps").isGranted(value.getId())'
                type: '[InternalProjectAbstractStep]!'
                description: 'list of exportable steps in the project'
                resolve: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\Project\\ProjectExportableSteps", [value])'
            currentStep:
                type: 'InternalStep'
                description: 'The current step of the step timeline.'
                resolve: '@=value.getCurrentStep()'
            archived:
                type: 'Boolean!'
                description: 'if it is archived'
                resolve: '@=value.isArchived()'
            owner:
                type: 'InternalProjectOwner'
                description: 'The owner of the project.'
            exportContributorsUrl:
                type: 'URI'
                resolve: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\Project\\ProjectExportContributorsResolver", [value])'
            posts:
                type: 'InternalPostConnection!'
                description: 'The posts relative to the project.'
                argsBuilder: 'Relay::ForwardConnection'
                resolve: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\Project\\ProjectPostsResolver", [value])'
            consultationStepOpen:
                type: 'InternalConsultationStep'
                description: 'The open consultation step of the project, if any.'
            address:
                description: 'The address of the project.'
                type: 'PreviewGoogleMapsAddress'
                resolve: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\Project\\ProjectAddressResolver", [value])'
            canEdit:
                description: 'Wether or not the logged in user has the authorization to edit'
                type: 'Boolean'
                resolve: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\Project\\ProjectCanEditResolver", [value, getUser()])'
            description:
                type: 'String'
                description: 'The project description.'
                resolve: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\Project\\ProjectDescriptionResolver", [value, getUser()])'
            customCode:
                type: 'String'
                description: 'Custom code that will be applied to every steps.'
            createdAt:
                type: 'DateTime!'
                description: 'Identifies the date and time when the object was created.'
