InternalUser:
    type: object
    inherits:
        - InternalPrimaryKey
        - InternalProjectOwner
        - InternalPostOwner
        - InternalQuestionnaireOwner
        - InternalEventOwner
        - InternalProposalFormOwner
        - InternalMailingListOwner
        - InternalEmailingCampaignOwner
        - InternalUserIdentificationCodeListOwner
        - InternalConsultationOwner
        - PreviewUser
        - Author
    config:
        description: "A user is an individual's account."
        name: User
        interfaces:
            - InternalProjectOwner
            - InternalPostOwner
            - InternalQuestionnaireOwner
            - InternalEventOwner
            - InternalProposalFormOwner
            - InternalMailingListOwner
            - InternalEmailingCampaignOwner
            - InternalUserIdentificationCodeListOwner
            - InternalContributor
            - InternalConsultationOwner
            - Author
        fields:
            adminUrl:
                type: 'URI!'
                description: "The user's admin edit url"
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\User\\UserAdminUrlResolver", value)'
            media:
                type: 'InternalMedia'
                description: "The user's public avatar file."
            # TODO rename this to `name`
            displayName:
                type: 'String!'
                description: "The user's public profile name."
            # TODO rename this to `isVip`
            vip:
                type: 'Boolean!'
                description: 'Whether or not this user is a VIP.'
            slug:
                type: 'String!'
                description: "The user's slug (unique)."
            confirmedAccountAt:
                type: 'DateTime'
                description: "The user's account confirmation date."
            # TODO rename this to `lastLoginAt`
            lastLogin:
                type: 'DateTime'
                description: 'Last connection of the user.'
                access: '@=service("Capco\\AppBundle\\GraphQL\\Resolver\\UserIsGrantedResolver").isGranted(getUser(),value,context)'
            notificationsConfiguration:
                type: 'UserNotificationsConfiguration!'
                description: 'A user notifications preferences'
                access: '@=service("Capco\\AppBundle\\GraphQL\\Resolver\\UserIsGrantedResolver").isGranted(getUser(),value,context)'
            # TODO rename this to `isLocked`
            locked:
                type: 'Boolean!'
                access: '@=service("Capco\\AppBundle\\GraphQL\\Resolver\\UserIsGrantedResolver").isGranted(getUser(),value,context)'
            phoneConfirmed:
                type: 'Boolean!'
                access: '@=service("Capco\\AppBundle\\GraphQL\\Resolver\\UserIsGrantedResolver").isGranted(getUser(),value,context)'
            phoneConfirmationSentAt:
                type: 'DateTime'
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\User\\UserPhoneConfirmationSentAtResolver", value)'
                access: '@=service("Capco\\AppBundle\\GraphQL\\Resolver\\UserIsGrantedResolver").isGranted(getUser(),value,context)'
            gender:
                type: 'GenderValue'
                access: '@=service("Capco\\AppBundle\\GraphQL\\Resolver\\UserIsGrantedResolver").isGranted(getUser(),value,context)'
            firstname:
                type: 'String'
                access: '@=service("Capco\\AppBundle\\GraphQL\\Resolver\\UserIsGrantedResolver").isGranted(getUser(),value,context)'
            lastname:
                type: 'String'
                access: '@=service("Capco\\AppBundle\\GraphQL\\Resolver\\UserIsGrantedResolver").isGranted(getUser(),value,context)'
            dateOfBirth:
                type: 'DateTime'
                access: '@=service("Capco\\AppBundle\\GraphQL\\Resolver\\UserIsGrantedResolver").isGranted(getUser(),value,context)'
            roles:
                type: '[UserRole!]!'
                access: "@=hasRole('ROLE_USER')"
                description: 'Unattended roles as array.'
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\User\\UserRolesResolver", value, getUser())'
            rolesText:
                type: 'String'
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\User\\UserRolesTextResolver", value, getUser(),context)'
                description: 'Array of roles converted and translated to string.'
            isArchiveDeleted:
                access: '@=service("Capco\\AppBundle\\GraphQL\\Resolver\\UserIsGrantedResolver").isGranted(getUser(),value,context)'
                type: 'Boolean!'
                description: 'Is the personal archive of the user has been deleted'
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\User\\UserArchiveDeletedResolver", getUser())'
            isArchiveReady:
                access: '@=service("Capco\\AppBundle\\GraphQL\\Resolver\\UserIsGrantedResolver").isGranted(getUser(),value,context)'
                type: 'Boolean!'
                description: 'Is the personal archive of the user is ready?'
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\User\\UserArchiveReadyResolver", getUser())'
            firstArchive:
                access: '@=service("Capco\\AppBundle\\GraphQL\\Resolver\\UserIsGrantedResolver").isGranted(getUser(),value,context)'
                type: 'Boolean!'
                description: 'Is the personal archive of the user is being asked for the first time?'
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\User\\UserArchiveFirstResolver", getUser())'
            postalAddress:
                type: 'PreviewGoogleMapsAddress'
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\User\\PostalAddressResolver", value)'
                access: '@=service("Capco\\AppBundle\\GraphQL\\Resolver\\UserIsGrantedResolver").isGranted(getUser(),value,context)'
            address:
                type: 'String'
                access: '@=service("Capco\\AppBundle\\GraphQL\\Resolver\\UserIsGrantedResolver").isGranted(getUser(),value,context)'
            address2:
                type: 'String'
                access: '@=service("Capco\\AppBundle\\GraphQL\\Resolver\\UserIsGrantedResolver").isGranted(getUser(),value,context)'
            zipCode:
                type: 'String'
                access: '@=service("Capco\\AppBundle\\GraphQL\\Resolver\\UserIsGrantedResolver").isGranted(getUser(),value,context)'
            city:
                type: 'String'
                access: '@=service("Capco\\AppBundle\\GraphQL\\Resolver\\UserIsGrantedResolver").isGranted(getUser(),value,context)'
            phone:
                type: 'String'
                access: '@=service("Capco\\AppBundle\\GraphQL\\Resolver\\UserIsGrantedResolver").isGranted(getUser(),value,context)'
            facebookId:
                type: 'String'
                access: '@=service("Capco\\AppBundle\\GraphQL\\Resolver\\UserIsGrantedResolver").isGranted(getUser(),value,context)'
            samlId:
                type: 'String'
                access: '@=service("Capco\\AppBundle\\GraphQL\\Resolver\\UserIsGrantedResolver").isGranted(getUser(),value,context)'
            franceConnectId:
                type: 'String'
                access: '@=service("Capco\\AppBundle\\GraphQL\\Resolver\\UserIsGrantedResolver").isGranted(getUser(),value,context)'
            sources:
                type: 'SourceConnection!'
                argsBuilder: 'Relay::ForwardConnection'
                description: 'Get all sources of the user'
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\User\\UserSourcesResolver", getUser(), value, args, context)'
            opinionVotesCount:
                type: 'Int!'
                description: 'Get the count of votes made by the user'
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\User\\UserOpinionVoteCountResolver", getUser(), value, args, context)'
            argumentVotesCount:
                type: 'Int!'
            proposals:
                type: 'InternalProposalConnection!'
                argsBuilder: 'Relay::ForwardConnection'
                description: 'Get all proposals of the user.'
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\User\\UserProposalsResolver", getUser(), value, args, context, info)'
            proposalVotesCount:
                type: 'Int!'
            commentVotes:
                type: 'CommentVoteConnection!'
                argsBuilder: 'Relay::ForwardConnection'
                description: 'Get all comment votes of the user.'
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\User\\UserCommentVotesResolver", value, args)'
            contributionsToDeleteCount:
                type: 'Int!'
                description: 'Provisional number of contributions who will be totally deleted if the user chose to delete his account.'
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\User\\UserContributionsToDeleteCount", value)'
            replies:
                type: 'InternalReplyConnection!'
                argsBuilder: 'Relay::ForwardConnection'
                description: 'A list of replies associated to the user.'
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\User\\UserRepliesResolver", getUser(), value, args, context)'
            comments:
                type: 'CommentConnection!'
                argsBuilder: 'Relay::ForwardConnection'
                description: 'Get all comments of the user.'
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\User\\UserCommentsResolver", getUser(), value, args, context)'
            consentExternalCommunication:
                type: 'Boolean!'
                description: 'Whether or not this user consent external communication.'
                access: '@=service("Capco\\AppBundle\\GraphQL\\Resolver\\UserIsGrantedResolver").isGranted(getUser(),value,context)'
            followingProposals:
                type: 'InternalProposalConnection!'
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\Proposal\\ProposalsFollowedByUserResolver", value, args)'
                description: 'Array of proposals followed by current user.'
                argsBuilder:
                    builder: 'Relay::ForwardConnection'
                    config:
                        defaultLimit: 32
                args:
                    orderBy:
                        type: 'String'
                        description: 'Ordering options for followers returning from the connection'
            followingOpinions:
                type: 'OpinionConnection!'
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\Opinion\\OpinionsFollowedByUserResolver", value, args)'
                description: 'Array of opinions followed by current user.'
                argsBuilder: 'Relay::ForwardConnection'
                args:
                    orderBy:
                        type: 'String'
                        description: 'Ordering options for followers returning from the connection'
            opinions:
                type: 'OpinionConnection!'
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\User\\UserOpinionsResolver", value, getUser(), args)'
                description: 'Array of opinions by current user.'
                argsBuilder: 'Relay::ForwardConnection'
            contributionsCount:
                type: 'Int!'
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\User\\UserContributionsCountResolver", value, getUser())'
                description: 'Total of contributions count'
            profilePageIndexed:
                type: 'Boolean!'
                description: 'Whether or not this user profile page is indexed.'
                access: '@=service("Capco\\AppBundle\\GraphQL\\Resolver\\UserIsGrantedResolver").isGranted(getUser(),value,context)'
            neighborhood:
                type: 'String'
                description: 'Your localisation'
                access: '@=service("Capco\\AppBundle\\GraphQL\\Resolver\\UserIsGrantedResolver").isGranted(getUser(),value,context)'
            proposalVotes:
                type: 'InternalProposalVoteConnection!'
                argsBuilder: 'Relay::ForwardConnection'
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\User\\ViewerProposalVotesResolver", value, args, context, getUser())'
                args:
                    orderBy:
                        type: 'InternalProposalVoteOrder'
                        defaultValue: { field: PUBLISHED_AT, direction: DESC }
                    stepId:
                        type: 'ID'
                    includeUnpublished:
                        type: 'Boolean'
                        description: '(ROLE_SUPER_ADMIN only) Select also unpublished votes.'
                        defaultValue: false
            medias:
                type: '[InternalMedia]!'
                description: 'Get all medias the user has published.'
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\User\\UserMediasResolver", value, args)'
            votes:
                type: 'InternalVoteConnection!'
                argsBuilder: 'Relay::ForwardConnection'
                description: 'Get all votes of the user.'
                args:
                    contribuableId:
                        type: 'ID'
                        description: 'The id of the contribuable entity (Project, Step)'
                    onlyAccounted:
                        type: 'Boolean'
                        defaultValue: true
                        description: 'Get only accounted votes.'
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\User\\UserVotesResolver", getUser(), value, args, context)'
            groups:
                type: 'GroupConnection!'
                argsBuilder: 'Relay::ForwardConnection'
                description: 'Get all groups where the user is.'
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\User\\UserGroupsResolver", value, args)'
            reports:
                type: 'ReportConnection!'
                argsBuilder: 'Relay::ForwardConnection'
                description: 'Get all reports the user has done.'
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\User\\UserReportsResolver", value, args)'
            contributions:
                type: 'ContributionConnection!'
                argsBuilder: 'Relay::ForwardConnection'
                args:
                    orderBy:
                        type: 'InternalContributionOrder'
                        description: 'Ordering options for contributions returned from the connection.'
                        defaultValue: { field: CREATED_AT, direction: DESC }
                    type:
                        type: 'ContributionType'
                        description: 'Type of contribution requested'
                    includeTrashed:
                        type: 'Boolean'
                        description: 'Include the trashed contributions if its true'
                        defaultValue: false
                    contribuableId:
                        type: 'ID'
                        description: 'The id of the contribuable entity (Project, Consultation, Step)'
                description: "Return the user's contributions of the type requested."
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\User\\UserContributionResolver", value, args, getUser(), serv("request_stack"))'
            isSubscribedToProposalNews:
                type: 'Boolean!'
                description: 'Is user subscribed to the proposal news posted by the author ?'
            isSubscribedToNewsLetter:
                type: 'Boolean!'
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\User\\UserIsSubscribedToNewsLetterResolver", value)'
                description: 'Is user subscribed to the newsletter ?'
            subscribedToNewsLetterAt:
                type: 'DateTime'
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\User\\UserSubscribedToNewsLetterAtResolver", value)'
                description: 'When the user subscribed to the newsletter.'
            newEmailToConfirm:
                type: 'String'
                description: 'The new email to confirm ?'
            isEmailConfirmed:
                type: 'Boolean'
                description: 'Has the user confirmed his email address ?'
            emailConfirmationSentAt:
                type: 'DateTime'
                description: 'When the user email confirmation was sent.'
            arguments:
                type: 'ArgumentConnection!'
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\User\\UserArgumentsResolver", getUser(), value, args, context)'
                description: 'The arguments created by user.'
                argsBuilder: 'Relay::ForwardConnection'
                args:
                    orderBy:
                        type: 'InternalContributionOrder'
                        description: 'Ordering options for contributions returned from the connection.'
                        defaultValue: { field: CREATED_AT, direction: DESC }
                    includeTrashed:
                        type: 'Boolean'
                        description: 'Include the trashed contributions if its true'
                        defaultValue: false
                    includeUnpublished:
                        type: 'Boolean'
                        description: 'Include the unpublished contributions if its true'
                        defaultValue: false
            debateArguments:
                type: 'DebateArgumentConnection!'
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\User\\UserDebateArgumentsResolver", getUser(), value, args)'
                description: 'The debate arguments created by user.'
                argsBuilder: 'Relay::ForwardConnection'
                args:
                    orderBy:
                        type: 'DebateArgumentOrder'
                        description: 'Ordering options for contributions returned from the connection.'
                        defaultValue: { field: PUBLISHED_AT, direction: DESC }
            debateVotes:
                type: 'DebateVoteConnection!'
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\Debate\\AuthorVotesResolver", value, args)'
                description: 'The debate votes of the user.'
                argsBuilder: 'Relay::ForwardConnection'
            responses:
                type: 'InternalResponseConnection!'
            url:
                description: 'The user profile URL.'
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\User\\UserUrlResolver", value)'
            isAdmin:
                type: 'Boolean!'
            isSuperAdmin:
                type: 'Boolean!'
            isProjectAdmin:
                type: 'Boolean!'
            isOnlyProjectAdmin:
                type: 'Boolean!'
            isAdminOrganization:
                type: 'Boolean!'
            isOrganizationMember:
                type: 'Boolean!'
            isMediator:
                access: "hasFeatureFlag('mediator')"
                type: 'Boolean!'
            connectionAttempt:
                argsBuilder: 'Relay::ForwardConnection'
                type: 'UserConnectionAttemptConnection'
                description: 'Get any connection attempt'
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\User\\UserConnectionResolver", value, args, getUser(), context)'
                args:
                    email:
                        type: 'String'
                        description: 'Email of the user'
                    success:
                        type: 'Boolean'
                        description: 'If true, returns only successful connection attempts /!\ only works with email, not userId'
            opinionVersions:
                type: 'VersionConnection!'
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\User\\UserOpinionVersionResolver", getUser(), value, args)'
                description: 'The opinion version created by user.'
                argsBuilder: 'Relay::ForwardConnection'
            awaitingOrRefusedEvents:
                type: 'InternalEventConnection'
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\User\\ViewerAwaitingOrRefusedEventResolver", getUser(), value, args)'
                description: 'The event in awaiting or refused status of user.'
                argsBuilder: 'Relay::ForwardConnection'
            supervisedProposals:
                access: '@=service("Capco\\AppBundle\\GraphQL\\Resolver\\UserIsGrantedResolver").isGranted(getUser(),value,context)'
                argsBuilder: 'Relay::ForwardConnection'
                type: 'InternalProposalConnection'
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\User\\UserSupervisedProposalsResolver", getUser(), args)'
                description: 'Get proposals assigned to the supervisor.'
            locale:
                type: 'String'
                description: 'Locale chosen by the user'
            adminAwaitingEvents:
                type: 'Int!'
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\User\\AdminAwaitingEventResolver",  getUser())'
                description: 'The event in awaiting status.'
            birthPlace:
                type: 'String'
                access: '@=service("Capco\\AppBundle\\GraphQL\\Resolver\\UserIsGrantedResolver").isGranted(getUser(),value,context)'
            isFranceConnectAccount:
                type: 'Boolean'
                access: '@=service("Capco\\AppBundle\\GraphQL\\Resolver\\UserIsGrantedResolver").isGranted(getUser(),value,context)'
            hasPassword:
                type: 'Boolean'
                access: '@=service("Capco\\AppBundle\\GraphQL\\Resolver\\UserIsGrantedResolver").isGranted(getUser(),value,context)'
            userIdentificationCode:
                type: 'String'
                resolve: '@=value.getUserIdentificationCodeValue()'
                access: '@=service("Capco\\AppBundle\\GraphQL\\Resolver\\UserIsGrantedResolver").isGranted(getUser(),value,context)'
                description: "The user's identification code value"
            openidId:
                type: 'String'
                access: '@=service("Capco\\AppBundle\\GraphQL\\Resolver\\UserIsGrantedResolver").isGranted(getUser(),value,context)'
                resolve: '@=value.getOpenId()'
                description: "The user's openidId value"
            organizations:
                type: '[InternalOrganization]'
                description: "The organizations of which user is a member"
                access: '@=service("Capco\\AppBundle\\GraphQL\\Resolver\\UserIsGrantedResolver").isGranted(getUser(),value,context)'
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\User\\UserOrganizationsResolver", value)'
            consultations:
                type: 'InternalConsultationConnection!'
                description: 'Get all consultations.'
                access: '@=service("Capco\\AppBundle\\GraphQL\\Resolver\\UserIsGrantedResolver").isGranted(getUser(),value,context)'
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\Query\\ConsultationsQueryResolver", args)'
            participant:
                type: 'InternalParticipant'
                description: "The user (who has already participated / is participating) in a questionnaire or other type of interaction"
                resolve: '@=value.getParticipant()'
            projectsMediator:
                access: "@=hasRole('ROLE_MEDIATOR') and hasFeatureFlag('mediator')"
                type: 'InternalProjectConnection'
                argsBuilder: 'Relay::ForwardConnection'
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\User\\ProjectsMediatorResolver", value, args)'
            isEvaluerOnNewTool:
                description: "A user that can access Evaluations page is a user that is assigned to at least one proposal, as analyst, supervisor or decision marker"
                type: 'Boolean!'
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\Query\\QueryViewerCanSeeEvaluationsPageResolver", value)'
