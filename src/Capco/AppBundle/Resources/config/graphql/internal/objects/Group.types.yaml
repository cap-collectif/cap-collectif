Group:
    type: object
    inherits:
        - Node
    config:
        interfaces:
            - Node
        description: 'A group of User'
        fields:
            id:
                description: 'The ID of an object.'
                builder: 'Relay::GlobalId'
                builderConfig:
                    typeName: Group
            title:
                type: 'String'
                description: 'Identifies the group name.'
            description:
                type: 'String'
                description: 'Identifies the description of the group.'
            users:
                type: 'InternalUserConnection!'
                argsBuilder: 'Relay::ForwardConnection'
                args:
                    emailConfirmed:
                        type: Boolean
                        defaultValue: true
                        description: 'Filter the list by email confirmation'
                    consentInternalCommunication:
                        type: Boolean
                        defaultValue: null
                        description: 'Filter the list by consent to internal communication'
                description: 'Get all users of the group.'
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\Group\\GroupUsersResolver", value, args)'
            members:
                type: 'GroupMemberConnection!'
                argsBuilder: 'Relay::ForwardConnection'
                args:
                    term:
                        type: String
                        description: 'Filter by email or username'
                description: 'Get all users and pending invitations'
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\Group\\GroupMembersResolver", value, args)'
            createdAt:
                type: 'DateTime!'
            updatedAt:
                type: 'DateTime'
            pendingInvitations: # remove when new group page is merged
                type: 'UserInviteConnection!'
                argsBuilder: 'Relay::ForwardConnection'
                description: 'Get all userInvite who are still pending'
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\Group\\GroupPendingInvitationsResolver", value, args)'
            isUsedInEmailing:
                type: Boolean!
                description: 'Whether or not group is used in emailing campaign'
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\Group\\GroupIsUsedInEmailingCampaignResolver", value, args)'