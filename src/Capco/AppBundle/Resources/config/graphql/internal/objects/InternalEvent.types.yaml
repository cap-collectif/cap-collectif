InternalEvent:
    type: object
    inherits:
        - PreviewEvent
        - Commentable
        - InternalPrimaryKey
        - InternalTimeRangeable
        - InternalOwnerable
        - Contribution
    config:
        description: 'An event.'
        interfaces:
            - Commentable
            - Contribution
        name: Event
        fields:
            id:
                description: 'The ID of an object.'
                builder: 'Relay::GlobalId'
                builderConfig:
                    typeName: Event
            adminUrl:
                type: 'URI!'
                description: 'The event admin edit url'
                resolve: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\Event\\EventAdminUrlResolver", [value])'
            participants:
                type: 'EventParticipantConnection!'
                description: 'A list of Users that are participating to the event.'
                resolve: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\Event\\EventParticipantsResolver", [value, args])'
                argsBuilder: 'Relay::ForwardConnection'
            themes:
                type: '[InternalTheme!]!'
            projects:
                type: '[InternalProject!]!'
            author:
                type: 'Author'
                resolve: '@=value.getAuthor()'
            commentable:
                type: 'Boolean!'
                resolve: '@=value.isCommentable()'
            media:
                type: 'InternalMedia'
            address:
                type: 'String'
                deprecationReason: 'reason:"will be deleted"'
            addressJson:
                type: 'String'
            url:
                type: 'URI!'
                description: 'The url of the event'
                resolve: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\Event\\EventUrlResolver", [value])'
            guestListEnabled:
                type: 'Boolean!'
            customCode:
                type: 'String'
            fullAddress:
                type: 'String'
                deprecationReason: 'reason:"will be deleted"'
            lat:
                type: 'Float'
            lng:
                type: 'Float'
            city:
                type: 'String'
                deprecationReason: 'reason:"will be deleted"'
            country:
                type: 'String'
                deprecationReason: 'reason:"will be deleted"'
            googleMapsAddress:
                type: 'PreviewGoogleMapsAddress'
                resolve: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\Event\\EventAddressResolver", [value])'
            review:
                type: 'InternalEventReview'
                description: 'User submitted events must be reviewed by an admin'
            deletedAt:
                type: 'DateTime'
                description: 'The delete date.'
            translations:
                type: '[InternalEventTranslation!]!'
            bodyUsingJoditWysiwyg:
                description: 'Is the body using Jodit Wysiwyg.'
                type: 'Boolean!'
            link:
                type: 'URI'
            roomName:
                type: 'String'
                description: 'The jitsi room name available on remote events only.'
            slug:
                type: 'String!'
                description: 'The slug of event'
            metaDescription:
                type: 'String'
            authorAgreeToUsePersonalDataForEventOnly:
                type: 'Boolean'
                description: 'Author of event agree to use personal data for event only'
            adminAuthorizeDataTransfer:
                type: 'Boolean'
                description: 'Admin authorize data transfer'
            isViewerParticipatingAtEvent:
                access: "@=hasRole('ROLE_USER')"
                type: 'Boolean!'
                description: 'Show if user is already participating at event'
                resolve: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\EventParticipant\\IsViewerParticipatingAtEventResolver", [value, getUser()])'
            steps:
                type: '[InternalStep!]!'
                description: 'The steps corresponding to this event.'
            isRegistrationPossible:
                type: 'Boolean!'
                description: 'Whether or not registration is enabled on this event.'
                resolve: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\Event\\EventIsRegistrationPossibleResolver", [value])'
            isCompleteAndRegistrationPossibleResolver:
                type: 'Boolean!'
                description: 'Whether or not registration is enabled on this event and event is complete.'
                resolve: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\Event\\EventIsCompleteAndRegistrationPossibleResolver", [value])'
            viewerIsRoomAnimator:
                type: 'Boolean!'
                description: 'Wheter or not the viewer can join the room before it starts.'
                resolve: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\Event\\EventViewerCanJoinBeforeStartResolver", [value, getUser()])'
            owner:
                type: 'InternalEventOwner'
                description: 'The owner of the event.'
            reviewStatus:
                type: 'EventReviewStatus'
                description: 'The event status.'
                resolve: '@=value.getStatus()'
            exportParticipantsUrl:
                access: '@=service("Capco\\AppBundle\\GraphQL\\Resolver\\Event\\EventExportParticipantsUrlResolver").isGranted(value)'
                type: 'URI'
                description: 'The url to export participants'
                resolve: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\Event\\EventExportParticipantsUrlResolver", [value])'
            availableRegistration:
                type: 'Int'
                description: 'The remaining number of possible registrations'
                resolve: '@=value.getAvailableRegistration()'
            isEventRegistrationComplete:
                type: 'Boolean!'
                description: 'Whether or not registration is complete'
                resolve: '@=value.isRegistrationComplete()'
            isMeasurable:
                type: 'Boolean!'
                description: 'Whether or not registration is measurable'
                resolve: '@=value.isMeasurable()'
            maxRegistrations:
                type: 'Int'
                description: 'The number of max registration available'
            districts:
                type: 'InternalGlobalDistrictConnection'
                argsBuilder: 'Relay::ForwardConnection'
                resolve: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\Event\\EventDistrictsResolver", [value, args])'
                description: 'Events districts.'
