InternalDebate:
    type: object
    inherits:
        - Node
    config:
        name: Debate
        description: 'A debate on a subject.'
        interfaces:
            - Node
        fields:
            id:
                description: 'The ID of an object.'
                builder: 'Relay::GlobalId'
                builderConfig:
                    typeName: Debate
            opinions:
                description: 'The opinions from experts of the debate.'
                argsBuilder: 'Relay::ForwardConnection'
                type: InternalDebateOpinionConnection!
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\Debate\\DebateOpinionsResolver", value, args)'
            alternateArguments:
                description: 'The arguments from non-experts of the debate, in alternate way.'
                argsBuilder: 'Relay::ForwardConnection'
                args:
                    isPublished:
                        type: 'Boolean'
                        description: '(ROLE_ADMIN only) True to see only published arguments, false to see only unpublished, null to see both.'
                        defaultValue: null
                    isTrashed:
                        type: 'Boolean'
                        description: '(ROLE_ADMIN only) True to see only trashed arguments, false to not see trashed, null to see both.'
                        defaultValue: false
                    orderBy:
                        type: 'DebateArgumentOrder'
                        description: 'Order by.'
                        defaultValue: { field: PUBLISHED_AT, direction: DESC }
                type: DebateArgumentAlternateConnection!
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\Debate\\DebateAlternateArgumentsResolver", value, args, getUser())'
            arguments:
                description: 'The arguments from non-experts of the debate.'
                argsBuilder: 'Relay::ForwardConnection'
                args:
                    value:
                        type: 'ForOrAgainstValue'
                        defaultValue: null
                        description: "Filter by an argument's stand."
                    isPublished:
                        type: 'Boolean'
                        description: '(ROLE_ADMIN only) True to see only published arguments, false to see only unpublished, null to see both.'
                        defaultValue: null
                    isTrashed:
                        type: 'Boolean'
                        description: '(ROLE_ADMIN only) True to see only trashed arguments, false to not see trashed, null to see both.'
                        defaultValue: null
                    orderBy:
                        type: 'DebateArgumentOrder'
                        description: 'Order by.'
                        defaultValue: { field: PUBLISHED_AT, direction: DESC }
                type: DebateArgumentConnection!
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\Debate\\DebateArgumentsResolver", value, args, getUser())'
            viewerHasArgument:
                access: "@=hasRole('ROLE_USER')"
                description: 'True if the viewer has created an argument.'
                type: Boolean!
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\Debate\\DebateViewerHasArgumentResolver", value, getUser())'
            votes:
                description: 'The votes from contributors of the debate.'
                argsBuilder: 'Relay::ForwardConnection'
                args:
                    type:
                        type: 'ForOrAgainstValue'
                        defaultValue: null
                        description: "Filter by a vote's type."
                    isPublished:
                        type: 'Boolean'
                        description: '(ROLE_ADMIN only) `true` to see only published votes, `false` to see only unpublished, `null` to see both.'
                        defaultValue: null
                    orderBy:
                        type: 'DebateVoteOrder'
                        description: 'The ordering options for votes.'
                        defaultValue: { field: PUBLISHED_AT, direction: DESC }
                type: DebateVoteConnection!
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\Debate\\DebateVotesResolver", value, args, getUser())'
            viewerHasVote:
                access: "@=hasRole('ROLE_USER')"
                description: 'True if the viewer has upvoted the argument.'
                type: Boolean!
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\Debate\\DebateViewerHasVoteResolver", value, getUser())'
            viewerVote:
                access: "@=hasRole('ROLE_USER')"
                description: 'True if the viewer has upvoted the argument.'
                type: InternalDebateVote
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\Debate\\DebateViewerVoteResolver", value, getUser())'
            articles:
                description: 'The associated articles of the debate.'
                argsBuilder: 'Relay::ForwardConnection'
                type: DebateArticleConnection!
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\Debate\\DebateArticlesResolver", value, args)'
            url:
                type: 'URI!'
                description: 'The url of the debate'
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\Debate\\DebateUrlResolver", value)'
            viewerUnpublishedVotes:
                access: "@=hasRole('ROLE_USER')"
                type: 'DebateVoteConnection!'
                argsBuilder: 'Relay::ForwardConnection'
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\Debate\\DebateViewerUnpublishedVotesResolver", value, args, getUser())'
                description: "The viewer's unpublished votes."
            viewerUnpublishedArgument:
                access: "@=hasRole('ROLE_USER')"
                type: 'InternalDebateArgument'
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\Debate\\DebateViewerUnpublishedArgumentResolver", value, getUser())'
                description: "The viewer's unpublished argument."
            step:
                type: 'InternalDebateStep!'
                description: 'The step of the debate.'
                resolve: '@=value.getStep()'
