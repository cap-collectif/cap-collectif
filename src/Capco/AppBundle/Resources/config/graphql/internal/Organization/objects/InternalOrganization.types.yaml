InternalOrganization:
    type: object
    inherits:
        - InternalPostOwner
        - InternalEventOwner
        - InternalProjectOwner
        - InternalProposalFormOwner
        - InternalQuestionnaireOwner
        - InternalMailingListOwner
        - InternalEmailingCampaignOwner
        - InternalConsultationOwner
        - Author
        - Node
    config:
        description: 'An organization.'
        name: Organization
        interfaces:
            - Node
            - Author
            - InternalPostOwner
            - InternalEventOwner
            - InternalProjectOwner
            - InternalProposalFormOwner
            - InternalQuestionnaireOwner
            - InternalMailingListOwner
            - InternalEmailingCampaignOwner
            - InternalConsultationOwner
            - NodeSlug
        fields:
            id:
                description: 'The ID of an object.'
                builder: 'Relay::GlobalId'
                builderConfig:
                    typeName: Organization
            media:
                type: 'InternalMedia'
                description: "The organization's logo file"
                resolve: '@=value.getLogo()'
            logo:
                type: 'InternalMedia'
                description: "The organization's logo file"
            banner:
                type: 'InternalMedia'
                description: "The organization's banner file"
            body:
                type: 'String'
                argsBuilder: 'Translatable::Field'
                resolve: '@=value.getBody(args["locale"], true)'
            biography:
                type: 'String'
                argsBuilder: 'Translatable::Field'
                resolve: '@=value.getBody(args["locale"], true)'
            title:
                type: 'String!'
                argsBuilder: 'Translatable::Field'
                resolve: '@=value.getTitle(args["locale"], true)'
            slug:
                type: 'String!'
                argsBuilder: 'Translatable::Field'
                resolve: '@=value.getSlug(args["locale"], true)'
            username:
                type: 'String!'
                description: "The organization's public name."
                resolve: '@=value.getTitle(args["locale"], true)'
            isViewer:
                type: 'Boolean!'
                access: "@=hasRole('ROLE_USER')"
                resolve: '@=value.isViewer(getUser())'
                description: 'Whether or not this user is the authenticated user.'
            displayName:
                type: 'String!'
                argsBuilder: 'Translatable::Field'
                resolve: '@=value.getTitle(args["locale"], true)'
            url:
                type: 'URI!'
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\User\\OrganizationUrlResolver", value)'
            members:
                type: 'InternalOrganizationMemberConnection'
                argsBuilder: 'Relay::ForwardConnection'
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\Organization\\OrganizationMembersResolver", value, getUser(), args)'
            socialNetworks:
                type: 'InternalOrganizationSocialNetworks'
                resolve: '@=value.getOrganizationSocialNetworks()'
            pendingOrganizationInvitations:
                access: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\Organization\\OrganizationAdminAccessResolver", value, getUser())'
                type: 'PendingOrganizationInvitationConnection'
                description: 'Get all pending invitations.'
                argsBuilder: 'Relay::ForwardConnection'
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\Organization\\PendingOrganizationInvitationsResolver", value, args)'
            deletedAt:
                type: 'DateTime'
                description: 'The date when the organization was deleted.'
            projects:
                type: 'InternalProjectConnection!'
                description: 'Get all projects that the organization owns.'
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\Project\\OwnerProjectsResolver", value, args, getUser())'
                argsBuilder: 'Relay::ForwardConnection'
            events:
                type: 'InternalEventConnection!'
                description: 'Get all events that the organization owns.'
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\Event\\OwnerEventsResolver", value, args)'
                argsBuilder: 'Relay::ForwardConnection'
                args:
                    hideDeletedEvents:
                        type: 'Boolean'
                        description: 'Hide deleted events'
                    hideUnpublishedEvents:
                        type: 'Boolean'
                        description: 'Hide unpublished events'
                    isFuture:
                        type: 'Boolean'
                        description: 'If non-null, filters events by comparing the start date with present.'
            proposalForms:
                type: 'InternalProposalFormConnection!'
                description: 'Get all proposalForm that the organization owns.'
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\ProposalForm\\OwnerProposalFormResolver", value, args)'
                argsBuilder: 'Relay::ForwardConnection'
            questionnaires:
                type: 'InternalQuestionnaireConnection!'
                description: 'Get all questionnaires that the organization owns.'
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\Questionnaire\\OwnerQuestionnaireResolver", value, args)'
                argsBuilder: 'Relay::ForwardConnection'
            mailingLists:
                type: 'MailingListConnection!'
                description: 'Get all mailingLists that the organization owns.'
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\Organization\\OrganizationMailingListsResolver", value, args)'
                argsBuilder: 'Relay::ForwardConnection'
            emailingCampaigns:
                type: 'EmailingCampaignConnection!'
                description: 'Get all emailing campaigns that the organization owns.'
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\Organization\\OrganizationEmailingCampaignsResolver", value, args)'
                argsBuilder: 'Relay::ForwardConnection'
            posts:
                type: 'InternalPostConnection!'
                description: 'Get all posts that the organization owns.'
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\Organization\\OrganizationPostsResolver", value, args)'
                argsBuilder: 'Relay::ForwardConnection'
                args:
                    hideUnpublishedPosts:
                        type: 'Boolean'
                        description: 'Hide unpublished posts'
            consultations:
                type: 'InternalConsultationConnection!'
                description: 'Get all consultations that the organization owns.'
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\Consultation\\OrganizationConsultationsResolver", value, args)'
                argsBuilder: 'Relay::ForwardConnection'
            translationBySlug:
                type: 'InternalOrganizationTranslation!'
                args:
                    slug: 'String!'
                resolve: '@=value.getTranslationBySlug(args["slug"])'
