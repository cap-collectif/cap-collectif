Argumentable:
    type: interface
    inherits:
        - Node
    config:
        description: 'An argumentable'
        resolveType: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\Contribution\\ConsultationTypeResolver", value)'
        fields:
            contribuable:
                type: 'Boolean!'
                resolve: '@=value.canContribute(getUser())'
            arguments:
                description: 'The arguments related to the argumentable.'
                type: 'ArgumentConnection!'
                argsBuilder: 'Relay::ForwardConnection'
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\Argumentable\\ArgumentableArgumentsResolver", value, args)'
                args:
                    orderBy:
                        type: 'ArgumentOrder'
                        defaultValue: { field: PUBLISHED_AT, direction: DESC }
                    type:
                        description: 'If provided, returns the arguments of this particular type.'
                        type: 'ArgumentValue'
                    includeTrashed:
                        type: 'Boolean'
                        description: 'The connection will return the trashed results too.'
                        defaultValue: false
            viewerArgumentsUnpublished:
                access: "@=hasRole('ROLE_USER')"
                description: 'The unpublished arguments of to the viewer.'
                type: 'ArgumentConnection'
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\Argumentable\\ArgumentableViewerArgumentsUnpublishedResolver", value, args, getUser())'
                argsBuilder: 'Relay::ForwardConnection'
                args:
                    type:
                        description: 'If provided, returns the arguments of this particular type.'
                        type: 'ArgumentValue'
