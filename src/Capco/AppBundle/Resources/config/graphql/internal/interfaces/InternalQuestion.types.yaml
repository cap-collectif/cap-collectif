InternalQuestion:
    type: interface
    inherits:
        - PreviewQuestion
    config:
        name: Question
        resolveType: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\Question\\QuestionTypeResolver", [value])'
        fields:
            # Overrides from Preview
            responses:
                type: 'InternalResponseConnection!'
                args:
                    withNotConfirmedUser:
                        type: 'Boolean'
                        description: 'Get responses with user not confirmed'
                        defaultValue: false
                    term:
                        type: 'String'
                        description: 'Get responses in which the term appears.'
                    iaCategory:
                        type: 'String'
                        defaultValue: null
                        description: 'Get responses matching given category.'
                    iaSentiment:
                        type: 'CivicIASentiment'
                        defaultValue: null
                        description: 'Get responses matching given sentiment.'
                    hasViewerStarred:
                        type: 'Boolean'
                        defaultValue: false
                        description: 'If true, get only responses starred by viewer.'
                    orderBy:
                        type: 'ResponsesOrder'
                        defaultValue: { field: CREATED_AT, direction: DESC }
                        description: 'Ordering options for responses.'
            number:
                resolve: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\Question\\QuestionNumberResolver", [value])'
                type: 'Int!'
            type:
                type: 'QuestionTypeValue!'
                resolve: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\Question\\QuestionTypeValueResolver", [value])'
            #need it for conditional jumps
            position:
                type: 'Int!'
                resolve: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\Question\\QuestionPositionResolver", [value])'
                description: 'The position of the question'
            private:
                type: 'Boolean!'
            required:
                type: 'Boolean!'
            helpText:
                type: 'String'
            description:
                type: 'HTML'
            descriptionUsingJoditWysiwyg:
                description: 'Is the description using Jodit Wysiwyg.'
                type: 'Boolean!'
            kind:
                type: 'String!'
            slug:
                type: 'String!'
            participants:
                type: 'EventParticipantConnection!'
                argsBuilder: 'Relay::ForwardConnection'
                resolve: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\Question\\QuestionParticipantsResolver", [value, args])'
                description: 'Return users who answered the question'
                args:
                    withNotConfirmedUser:
                        type: 'Boolean'
                        description: 'Get participant with user not confirmed'
                        defaultValue: false
            jumps:
                description: 'The associated logic jumps to this question.'
                type: '[LogicJump!]!'
                resolve: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\Question\\QuestionJumpsResolver", [value, args])'
                args:
                    orderBy:
                        type: 'JumpsOrder'
                        defaultValue: { field: POSITION, direction: ASC }
                        description: 'Ordering options for question jumps.'
            destinationJumps:
                description: 'The jumps of which this question is the destination'
                type: '[LogicJump!]!'
                resolve: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\Question\\DestinationJumpsResolver", [value, args])'
            alwaysJumpDestinationQuestion:
                description: 'The destination of the always jump (the else case) of this question.'
                type: 'InternalQuestion'
            hidden:
                type: 'Boolean!'
                description: 'Boolean to decide whether the question will be rendered or not'
            iaCategories:
                type: '[Counter!]!'
                access: "@=hasRole('ROLE_ADMIN')"
                args:
                    limit:
                        type: 'Int'
                        description: 'If given, will limit the number of categories returned.'
                resolve: '@=resolver("Capco\\AppBundle\\GraphQL\\Resolver\\Question\\QuestionIACategoriesResolver", [value, args, getUser()])'
                description: 'Most used categories of responses, detected by CivicIA.'
