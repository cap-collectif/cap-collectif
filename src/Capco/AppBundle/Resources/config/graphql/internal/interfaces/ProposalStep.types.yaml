ProposalStep:
    type: interface
    inherits:
        - RequirementStep
        - InternalStep
        - InternalWithProposals
    config:
        description: 'A proposal step'
        resolveType: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\Step\\StepTypeResolver", value)'
        fields:
            project:
                type: 'InternalProject'
            votesLimit:
                type: 'Int'
                description: 'If votesRanking enabled, votesLimit is the reference value for the points scale.'
            votesMin:
                type: 'Int'
                description: 'Minimum number of votes a user must submit for his votes to be counted.'
            budget:
                type: 'Int'
            voteType:
                type: 'ProposalStepVoteType!'
            votable:
                type: 'Boolean!'
            votesHelpText:
                type: 'String'
            voteThreshold:
                type: 'Int'
            statuses:
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\Step\\StepStatusesResolver", value)'
                type: '[ProposalStepStatus!]!'
            defaultSort:
                type: 'String' # should be an enum
            open:
                type: 'Boolean!'
            votesRanking:
                type: 'Boolean!'
                description: 'If enabled, allow voters to order their votes by point'
            viewerVotes:
                type: 'InternalProposalVoteConnection!'
                description: 'A list of viewer votes associated with the step.'
                argsBuilder: 'Relay::ForwardConnection'
                resolve: '@=query("Capco\\AppBundle\\GraphQL\\Resolver\\ViewerStepVotesResolver", value, getUser(), args)'
                args:
                    orderBy:
                        type: 'InternalProposalVoteOrder'
                        defaultValue: { field: CREATED_AT, direction: DESC }
                        description: 'Order votes.'
                    token:
                        type: 'String'
                        description: 'If anonymous user the token used to vote.'
            form:
                type: 'InternalProposalForm'
                resolve: '@=value.getProposalForm()'
            isSecretBallot:
                type: 'Boolean!'
                description: 'Whether or not secret ballot is enable'
            publishedVoteDate:
                type: 'DateTime'
                description: 'If not null, the date to display vote count'
            canDisplayBallot:
                type: 'Boolean!'
                description: 'Whether or not can display vote counters and points'
                resolve: '@=value.canDisplayBallot()'
            isProposalSmsVoteEnabled:
                type: 'Boolean'
                description: 'Whether or not sms vote are enabled.'
            proposalArchivedTime:
                type: 'Int!'
                description: 'Determines how long it will take for the proposal to be archived, coupled with proposalArchivedUnitTime.'
            proposalArchivedUnitTime:
                type: 'ProposalArchivedUnitTime!'
                description: 'The unit chosen to set the archived duration can be either MONTHS or DAYS'
