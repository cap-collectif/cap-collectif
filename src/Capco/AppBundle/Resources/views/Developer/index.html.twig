{% extends "@CapcoApp/base.html.twig" %}

{% block metaTags %}
    {% include '@CapcoApp/Default/meta.html.twig' with {
        'title': 'Developper',
        'url':   url('app_developer')
    } only %}
{% endblock %}

{% block title %}
    Cap Collectif Developers
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script src="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.1.3/js/bootstrap.min.js" crossorigin="anonymous"></script>
{% endblock %}

{% block body %}

<div class="container developers__container">

{% include '@CapcoApp/Developer/header.html.twig' with {'active': 'reference'} only %}

<div class="row mt-40">
    <div class="col-md-4">
        {% include '@CapcoApp/Developer/sidebar.html.twig' %}
    </div>
    <div class="col-md-8">

    {% if category is null %}
    <h2>Overview</h2>

    Cap Collectif provides an API to read and write data.

    <h3>Endpoint</h3>

    <p>
        This is an HTTPS-only and POST-only API. All API requests are made to <strong>{{ url('graphql_endpoint') }}</strong>.
    </p>

    <h3>Authentication</h3>

    <p>Authentication is based on API Keys. Each API Key is associated with a user. Results returned from various responses are based upon the role of the user to which the API key is tied.</p>

    <ul>
    <li>
        <span class="label label-info">ROLE_USER</span> indicates that this field can only be access if authenticated.
    </li>
    <li>
        <span class="label label-info">ROLE_ADMIN</span> indicates that this field can only be access if authenticated as an administrator.
    </li>
    </ul>

    <h4>Your API Keys</h4>

    {% if app.user and publicApiKeyRepo.findPublicApiTokensByUser(app.user) is not empty %}
    <p>These tokens are like passwords; guard them carefully.</p>
    <p>Right now, you can't revoke an API Key. Contact <a href="mailto:api@cap-collectif.com">api@cap-collectif.com</a> if needed.</p>
    <ul>
        {# {% for token in publicApiKeyRepo.findPublicApiTokensByUser(app.user) %}
        <li>
            API Key created at {{ token.createdAt|date }} : <strong>{{ token.value }}</strong>
        </li>
        {% endfor %} #}
    </ul>
    {% endif %}

    <p>Right now, you can't generate an API Key. Contact <a href="mailto:api@cap-collectif.com">our API team</a> if needed.</p>

    <h4>How to use an API Key</h4>

    <p>
        To make an authenticated query, add an <code>Authorization</code> header with content <code>"Bearer token"</code>.
        Example using <strong>cURL</strong> :
    </p>

    <div>
    <code>
    curl -H "Content-Type: application/json" -H "Authorization: Bearer <strong>token</strong>" -X POST -d '{"query":"query viewer {\n  viewer {\n    id\n    username\n  }\n}"}' {{ url('graphql_endpoint') }}
    </code>
    </div>

    <h3>Rate limits</h3>
    We currently have no rate limits, but this might be coming soon.

    <h3>About the GraphQL schema reference</h3>

    <p>
        The docs in the sidebar are generated from our GraphQL schema. All calls are validated and executed against the schema. Use these docs to find out what data you can call:

    <ul>
        <li>Allowed operations: <a href="{{ path('app_developer_category', { 'category': 'query' })}}">queries</a> and <a href="{{ path('app_developer_category', { 'category': 'mutation' })}}">mutations</a>.</li>
        <li>Schema-defined types: <a href="{{ path('app_developer_category', { 'category': 'scalar' })}}">scalars</a>, <a href="{{ path('app_developer_category', { 'category': 'object' })}}">objects</a>, <a href="{{ path('app_developer_category', { 'category': 'enum' })}}">enums</a>, <a href="{{ path('app_developer_category', { 'category': 'interface' })}}">interfaces</a>, <a href="{{ path('app_developer_category', { 'category': 'union' })}}">unions</a>, and <a href="{{ path('app_developer_category', { 'category': 'input_object' })}}">input objects</a>.</li>
    </ul>

    You can access this same content via the Explorer Docs sidebar. Note that you may need to rely on both the docs and the schema validation to successfully call the GraphQL API.

    For other information, such as authentication and rate limit details, check out the <a>guides</a>.
    </p>

    <h3>Requesting support</h3>

    <p>
        For questions, bug reports, and discussions about API development contact our <a href="mailto:api@cap-collectif.com">API team</a>.
    </p>

    {% endif %}

    {% if category == "previews" %}
    <h2>Schema Previews</h2>

<p>Schema previews let you try out new features and changes to our GraphQL schema before they become part of the official Cap-Collectif API.</p>

<p>During the preview period, we may change some features <strong>without advance notice</strong>.</p>
<p>
    To access a schema preview, you'll need to provide a custom <code>Accept</code> header for your requests.
    <pre><code>application/vnd.cap-collectif.preview+json</code></pre>
</p>
    {% endif %}

    {% if category == "breaking_changes" %}
    <h2>Breaking changes</h2>
    <p>We have no breaking change, yetâ€¦</p>
    {% endif %}

    {% if category == "query" %}
    <h2>{{query.name}}</h2>
    <p>The <a href="https://facebook.github.io/graphql/#sec-Type-System">query type</a> defines GraphQL operations that retrieve data from the server.</p>
    {% for field in query.fields|usort if 'Connection' in field.type.toString %}
        {% if loop.first %}
        <h3>
            Connections
        </h3>
        {% endif %}
        {% include '@CapcoApp/Developer/show_field.html.twig' with {'field': field, 'parent': query} %}
    {% endfor %}
    {% for field in query.fields|usort if 'Connection' not in field.type.toString %}
        {% if loop.first %}
        <h3>
            Fields
        </h3>
        {% endif %}
        {% include '@CapcoApp/Developer/show_field.html.twig' with {'field': field, 'parent': query} %}
    {% endfor %}
    {% endif %}

    {% if mutation and category == "mutation" %}
        {% if selection %}
        <h2>{{selection.name}}
        {% if selection.config.access|default(false) %}
            {# We need a way to get info about the required access #}
        <span class="label label-info">ROLE_ADMIN</span>
        {% endif %}
        </h2>
        {% if selection.type.getNullableType(selection.type).preview is defined and selection.type.getNullableType(selection.type).preview %}
            {% include '@CapcoApp/Developer/preview.html.twig' %}
        {% endif %}
        {# TODO we need to fix GraphQLBundle to handle descriptions on mutations #}
        {# <p>{{selection.description|graphql_description|raw}}</p> #}
        <h3>
           Input fields
        </h3>
        {% include '@CapcoApp/Developer/show_field.html.twig' with {'field': selection.args[0]} %}
        <h3>
            Payload fields
        </h3>
        {% for payloadField in selection.type.fields|usort if payloadField.name != "clientMutationId" %}
         {% include '@CapcoApp/Developer/show_field.html.twig' with {'field': payloadField} %}
        {% endfor %}
        {% else %}
            <h2>Mutations</h2>
            <p>
                Every GraphQL schema has a root type for both queries and mutations. The <a href="https://graphql.github.io/graphql-spec/June2018/#sec-Type-System">mutation type</a> defines GraphQL operations that change data on the server. It is analogous to performing HTTP verbs such as <code>POST</code>, <code>PATCH</code>, and <code>DELETE</code>.
            </p>
            <p>
                For more information, see "About mutations."
            </p>
        {% endif %}
    {% endif %}

    {% if category == "object" %}
        {% if selection %}
        <h2>{{selection.name}}</h2>
        {% if selection.preview is defined and selection.preview and not selection.previewHasAPublicType %}
            {% include '@CapcoApp/Developer/preview.html.twig' %}
        {% endif %}
        <p>{{selection.description|graphql_description|raw}}</p>

        {% for interface in selection.interfaces|usort %}
            {% if loop.first %}
                <h3>Implements</h3>
                <ul>
            {% endif %}
            <li>
                <a href="{{ path('app_developer_category_type', { 'category': 'interface', 'type': interface.name })}}">
                    {{ interface.name }}
                </a>
            </li>
            {% if loop.last %}
                </ul>
            {% endif %}
        {% endfor %}

        {% for field in selection.fields|usort %}
            {% if loop.first %}
                <h3>Fields</h3>
            {% endif %}
            {% include '@CapcoApp/Developer/show_field.html.twig' with {'field': field, 'parent': selection } %}
        {% endfor %}
        {% else %}
        <h2>Objects</h2>
        <p>
        <a href="https://graphql.github.io/graphql-spec/June2018/#sec-Objects">Objects</a> in GraphQL represent the resources you can access. An object can contain a list of fields, which are specifically typed.
        </p>
        <p>
            For example, the <a href="{{ path('app_developer_category_type', { 'category': 'object', 'type': 'User' }) }}"><code>User</code></a> object has a field called <code>username</code>, which is a <a href="{{ path('app_developer_category_type', { 'category': 'scalar', 'type': 'String' }) }}"><code>String</code></a>.
        </p>
        <p>
For more information, see "Introduction to GraphQL."
        </p>
        {% endif %}
    {% endif %}

    {% if category == "interface" %}
        {% if selection %}
        <h2>{{selection.name}}</h2>
        {% if selection.preview is defined and selection.preview %}
            {% include '@CapcoApp/Developer/preview.html.twig' %}
        {% endif %}
        <p>{{selection.description|graphql_description|raw}}</p>
        <h3>Implemented by</h3>
        <ul>
        {% for object in objects if object.implementsInterface(selection) %}
            <li>
            <a href="{{ path('app_developer_category_type', { 'category': 'object', 'type': object.name })}}">
             {{ object.name }}
            </a>
            </li>
        {% endfor %}
        </ul>
        {% for field in selection.fields|usort %}
            {% if loop.first %}
                <h3>Fields</h3>
            {% endif %}
            {% include '@CapcoApp/Developer/show_field.html.twig' with {'field': field} %}
        {% endfor %}
        {% else %}
            <h2>Interfaces</h2>
            Interfaces serve as parent objects from which other objects can inherit.
        {% endif %}
    {% endif %}

    {% if category == "enum" %}
        {% if selection %}
        <h2>{{selection.name}}</h2>
        <p>{{selection.description|graphql_description|raw}}</p>
        <h3>Values</h3>
        {% for value in selection.values %}
            <div>
             <h3>{{ value.name }}</h3>
             <p>{{ value.description|graphql_description|raw }}</p>
            </div>
        {% endfor %}
        {% else %}
            <h2>Enums</h2>
            Enums represent possible sets of values for a field.
        {% endif %}
    {% endif %}

    {% if category == "union" %}
        {% if selection %}
        <h2>{{selection.name}}</h2>
        <p>{{selection.description|graphql_description|raw}}</p>
        <h3>Possible Types</h3>
        {% for type in selection.getTypes() %}
             <h3>{{ type.name }}</h3>
        {% endfor %}
        {% else %}
            <h2>Unions</h2>
            A union is a type of object representing many objects.
        {% endif %}
    {% endif %}

    {% if category == "input_object" %}
        {% if selection %}
        <h2>{{selection.name}}</h2>
        {% if selection.getNullableType(selection).preview is defined and selection.getNullableType(selection).preview %}
            {% include '@CapcoApp/Developer/preview.html.twig' %}
        {% endif %}
        {# TODO we need to fix GraphQLBundle to handle descriptions on mutations #}
        {# <p>{{selection.description|graphql_description|raw}}</p> #}
        <h3>Input Fields</h3>
        {% for field in selection.fields|usort if field.name != "clientMutationId" %}
            {% include '@CapcoApp/Developer/show_field.html.twig' with {'field': field} %}
        {% endfor %}
        {% else %}
        <h2>Input objects</h2>
        <p>
        <a href="https://graphql.github.io/graphql-spec/June2018/#sec-Input-Objects">Input objects</a> can be described as "composable objects" because they include a set of input fields that define the object.
        </p>
        {% endif %}
    {% endif %}

    {% if category == "scalar" %}
        {% if selection %}
        <h2>{{selection.name}}</h2>
        <p>{{selection.description|graphql_description|raw}}</p>
        {% else %}
        <h2>Scalars</h2>
        <p>
        Scalars are primitive values: <code>Int</code>, <code>Float</code>, <code>String</code>, <code>Boolean</code>, or <code>ID</code>. We also added some custom scalars like <code>URI</code> or <code>HTML</code> to ease usage.
        </p>
        <p>
        When calling the GraphQL API, you must specify nested subfields until you return only scalars.
        </p>
        {% endif %}
    {% endif %}

</div>

</div>

</div>
{% endblock %}
