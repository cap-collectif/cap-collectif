{% extends "@CapcoApp/base.html.twig" %}

{% block metaTags %}
    {% include '@CapcoApp/Default/meta.html.twig' with {
        'title': 'Developper',
        'url':   url('app_developer')
    } only %}
{% endblock %}

{% block body %}
<div class="container  developers__container">

{% include '@CapcoApp/Developer/header.html.twig' with {'active': 'guides'} only %}

<h3>Listing events</h3>

<p>The following query looks up the 2 most recent events, and returns each event's title, content and URL:</p>

{% set query = '{
  events(first: 2) {
    edges {
      node {
        title
        body
        url
      }
    }
  }
}' %}
<p class="explorer-link"><a href="{{ path('graphiql_endpoint') ~ '?query=' ~ (query|url_encode) }}">Run in Explorer</a></p>

<pre><code>{{ query }}</code></pre>

<p>Values of <code>first</code> (and <code>last</code>) arguments must be within 0-100. So if you want to retrieve more than 100 events you must use pagination.</p>

<p>We use a cursor based pagination, first let's add <code>pageInfo</code> and <code>totalCount</code> to our previous query :</p>

{% set paginatedQuery = '{
  events(first: 2) {
    edges {
      node {
        title
        body
        url
      }
    }
    totalCount
    pageInfo {
      hasNextPage
      endCursor
    }
  }
}' %}

<p class="explorer-link"><a href="{{ path('graphiql_endpoint') ~ '?query=' ~ (paginatedQuery|url_encode) }}">Run in Explorer</a></p>

<pre class="highlight highlight-graphql"><code>{{paginatedQuery}}</code></pre>

{% set cursor = graphql_offset_to_cursor(3) %}
{% set paginatedNextQuery = '{
  events(first: 2, after: "' ~ cursor ~ '") {
    totalCount
    pageInfo {
      hasNextPage
      endCursor
    }
    edges {
      node {
        title
        body
        url
      }
    }
  }
}' %}
<p>Our <code>pageInfo</code> object contains everything we need to page. In this example, the <code>endCursor</code> value is <code>{{ cursor }}</code>. You can use this value to request the next 2 events :</p>

<p class="explorer-link"><a href="{{ path('graphiql_endpoint') ~ '?query=' ~ (paginatedNextQuery|url_encode) }}">Run in Explorer</a></p>

<pre class="highlight highlight-graphql"><code>{{paginatedNextQuery}}</code></pre>

</div>
{% endblock %}
