{% extends "@CapcoApp/base.html.twig" %}

{% block metaTags %}
    {% include '@CapcoApp/Default/meta.html.twig' with {
        'title': 'Developper',
        'url':   url('app_developer')
    } only %}
{% endblock %}

{% block body %}
<div class="container  developers__container">

{% include '@CapcoApp/Developer/header.html.twig' with {'active': 'guides'} only %}

<h3>Introduction to GraphQL</h3>

<h4>GraphQL terminology</h4>

<h5>Schema</h5>
<p>
A schema defines a GraphQL API's type system. It describes the complete set of possible data (objects, fields, relationships, everything) that a client can access. Calls from the client are validated and executed against the schema. A client can find information about the schema via introspection. A schema resides on the GraphQL API server. For more information, see "Discovering the GraphQL API."
</p>

<h5>Field</h5>

A field is a unit of data you can retrieve from an object. As the official GraphQL docs say: "The GraphQL query language is basically about selecting fields on objects."

The official spec also says about fields:

All GraphQL operations must specify their selections down to fields which return scalar values to ensure an unambiguously shaped response.

This means that if you try to return a field that is not a scalar, schema validation will throw an error. You must add nested subfields until all fields return scalars.

</div>
{% endblock %}
